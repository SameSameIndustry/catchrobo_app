// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/point_head.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"

	action_msgs_msg "msgs/action_msgs/msg"
	action_msgs_srv "msgs/action_msgs/srv"
)

func init() {
	typemap.RegisterAction("control_msgs/PointHead", PointHeadTypeSupport)
	typemap.RegisterAction("control_msgs/action/PointHead", PointHeadTypeSupport)
}

type _PointHeadTypeSupport struct {}

func (s _PointHeadTypeSupport) Goal() types.MessageTypeSupport {
	return PointHead_GoalTypeSupport
}

func (s _PointHeadTypeSupport) SendGoal() types.ServiceTypeSupport {
	return PointHead_SendGoalTypeSupport
}

func (s _PointHeadTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) types.Message {
	msg := NewPointHead_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _PointHeadTypeSupport) Result() types.MessageTypeSupport {
	return PointHead_ResultTypeSupport
}

func (s _PointHeadTypeSupport) GetResult() types.ServiceTypeSupport {
	return PointHead_GetResultTypeSupport
}

func (s _PointHeadTypeSupport) NewGetResultResponse(status int8, result types.Message) types.Message {
	msg := NewPointHead_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewPointHead_Result()
	} else {
		msg.Result = *result.(*PointHead_Result)
	}
	return msg
}

func (s _PointHeadTypeSupport) CancelGoal() types.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _PointHeadTypeSupport) Feedback() types.MessageTypeSupport {
	return PointHead_FeedbackTypeSupport
}

func (s _PointHeadTypeSupport) FeedbackMessage() types.MessageTypeSupport {
	return PointHead_FeedbackMessageTypeSupport
}

func (s _PointHeadTypeSupport) NewFeedbackMessage(goalID *types.GoalID, feedback types.Message) types.Message {
	msg := NewPointHead_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*PointHead_Feedback)
	return msg
}

func (s _PointHeadTypeSupport) GoalStatusArray() types.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _PointHeadTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__control_msgs__action__PointHead())
}

// Modifying this variable is undefined behavior.
var PointHeadTypeSupport types.ActionTypeSupport = _PointHeadTypeSupport{}

type PointHeadFeedbackSender struct {
	sender rclgo.FeedbackSender
}

func (s *PointHeadFeedbackSender) Send(msg *PointHead_Feedback) error {
	return s.sender.Send(msg)
}

type PointHeadGoalHandle struct{
	*rclgo.GoalHandle

	Description *PointHead_Goal
}

func (g *PointHeadGoalHandle) Accept() (*PointHeadFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &PointHeadFeedbackSender{*s}, nil
}

type PointHeadAction interface {
	ExecuteGoal(context.Context, *PointHeadGoalHandle) (*PointHead_Result, error)
}

func NewPointHeadAction(
	executeGoal func(context.Context, *PointHeadGoalHandle) (*PointHead_Result, error),
) PointHeadAction {
	return _PointHeadFuncAction(executeGoal)
}

type _PointHeadFuncAction func(context.Context, *PointHeadGoalHandle) (*PointHead_Result, error)

func (a _PointHeadFuncAction) ExecuteGoal(
	ctx context.Context, goal *PointHeadGoalHandle,
) (*PointHead_Result, error) {
	return a(ctx, goal)
}

type _PointHeadAction struct {
	action PointHeadAction
}

func (a _PointHeadAction) ExecuteGoal(ctx context.Context, handle *rclgo.GoalHandle) (types.Message, error) {
	return a.action.ExecuteGoal(ctx, &PointHeadGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*PointHead_Goal),
	})
}

func (a _PointHeadAction) TypeSupport() types.ActionTypeSupport {
	return PointHeadTypeSupport
}

type PointHeadServer struct{
	*rclgo.ActionServer
}

func NewPointHeadServer(node *rclgo.Node, name string, action PointHeadAction, opts *rclgo.ActionServerOptions) (*PointHeadServer, error) {
	server, err := node.NewActionServer(name, _PointHeadAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &PointHeadServer{server}, nil
}

type PointHeadFeedbackHandler func(context.Context, *PointHead_FeedbackMessage)

type PointHeadStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type PointHeadClient struct{
	*rclgo.ActionClient
}

func NewPointHeadClient(node *rclgo.Node, name string, opts *rclgo.ActionClientOptions) (*PointHeadClient, error) {
	client, err := node.NewActionClient(name, PointHeadTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &PointHeadClient{client}, nil
}

func (c *PointHeadClient) WatchGoal(ctx context.Context, goal *PointHead_Goal, onFeedback PointHeadFeedbackHandler) (*PointHead_GetResult_Response, *types.GoalID, error) {
	var resp types.Message
	var goalID *types.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg types.Message) {
			onFeedback(ctx, msg.(*PointHead_FeedbackMessage))
		})
	}
	if r, ok := resp.(*PointHead_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *PointHeadClient) SendGoal(ctx context.Context, goal *PointHead_Goal) (*PointHead_SendGoal_Response, *types.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*PointHead_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *PointHeadClient) SendGoalRequest(ctx context.Context, request *PointHead_SendGoal_Request) (*PointHead_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*PointHead_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *PointHeadClient) GetResult(ctx context.Context, goalID *types.GoalID) (*PointHead_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*PointHead_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *PointHeadClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *PointHeadClient) WatchFeedback(ctx context.Context, goalID *types.GoalID, handler PointHeadFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*PointHead_FeedbackMessage))
	})
}

func (c *PointHeadClient) WatchStatus(ctx context.Context, goalID *types.GoalID, handler PointHeadStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
