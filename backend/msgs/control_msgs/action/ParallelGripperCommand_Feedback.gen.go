// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	sensor_msgs_msg "msgs/sensor_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/parallel_gripper_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/ParallelGripperCommand_Feedback", ParallelGripperCommand_FeedbackTypeSupport)
	typemap.RegisterMessage("control_msgs/action/ParallelGripperCommand_Feedback", ParallelGripperCommand_FeedbackTypeSupport)
}

type ParallelGripperCommand_Feedback struct {
	State sensor_msgs_msg.JointState `yaml:"state"`// The current gripper state.
}

// NewParallelGripperCommand_Feedback creates a new ParallelGripperCommand_Feedback with default values.
func NewParallelGripperCommand_Feedback() *ParallelGripperCommand_Feedback {
	self := ParallelGripperCommand_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *ParallelGripperCommand_Feedback) Clone() *ParallelGripperCommand_Feedback {
	c := &ParallelGripperCommand_Feedback{}
	c.State = *t.State.Clone()
	return c
}

func (t *ParallelGripperCommand_Feedback) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParallelGripperCommand_Feedback) SetDefaults() {
	t.State.SetDefaults()
}

func (t *ParallelGripperCommand_Feedback) GetTypeSupport() types.MessageTypeSupport {
	return ParallelGripperCommand_FeedbackTypeSupport
}

// ParallelGripperCommand_FeedbackPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParallelGripperCommand_FeedbackPublisher struct {
	*rclgo.Publisher
}

// NewParallelGripperCommand_FeedbackPublisher creates and returns a new publisher for the
// ParallelGripperCommand_Feedback
func NewParallelGripperCommand_FeedbackPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParallelGripperCommand_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParallelGripperCommand_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParallelGripperCommand_FeedbackPublisher{pub}, nil
}

func (p *ParallelGripperCommand_FeedbackPublisher) Publish(msg *ParallelGripperCommand_Feedback) error {
	return p.Publisher.Publish(msg)
}

// ParallelGripperCommand_FeedbackSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParallelGripperCommand_FeedbackSubscription struct {
	*rclgo.Subscription
}

// ParallelGripperCommand_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a ParallelGripperCommand_FeedbackSubscription.
type ParallelGripperCommand_FeedbackSubscriptionCallback func(msg *ParallelGripperCommand_Feedback, info *rclgo.MessageInfo, err error)

// NewParallelGripperCommand_FeedbackSubscription creates and returns a new subscription for the
// ParallelGripperCommand_Feedback
func NewParallelGripperCommand_FeedbackSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParallelGripperCommand_FeedbackSubscriptionCallback) (*ParallelGripperCommand_FeedbackSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParallelGripperCommand_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParallelGripperCommand_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParallelGripperCommand_FeedbackSubscription{sub}, nil
}

func (s *ParallelGripperCommand_FeedbackSubscription) TakeMessage(out *ParallelGripperCommand_Feedback) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParallelGripperCommand_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParallelGripperCommand_FeedbackSlice(dst, src []ParallelGripperCommand_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParallelGripperCommand_FeedbackTypeSupport types.MessageTypeSupport = _ParallelGripperCommand_FeedbackTypeSupport{}

type _ParallelGripperCommand_FeedbackTypeSupport struct{}

func (t _ParallelGripperCommand_FeedbackTypeSupport) New() types.Message {
	return NewParallelGripperCommand_Feedback()
}

func (t _ParallelGripperCommand_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__ParallelGripperCommand_Feedback
	return (unsafe.Pointer)(C.control_msgs__action__ParallelGripperCommand_Feedback__create())
}

func (t _ParallelGripperCommand_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__ParallelGripperCommand_Feedback__destroy((*C.control_msgs__action__ParallelGripperCommand_Feedback)(pointer_to_free))
}

func (t _ParallelGripperCommand_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParallelGripperCommand_Feedback)
	mem := (*C.control_msgs__action__ParallelGripperCommand_Feedback)(dst)
	sensor_msgs_msg.JointStateTypeSupport.AsCStruct(unsafe.Pointer(&mem.state), &m.State)
}

func (t _ParallelGripperCommand_FeedbackTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParallelGripperCommand_Feedback)
	mem := (*C.control_msgs__action__ParallelGripperCommand_Feedback)(ros2_message_buffer)
	sensor_msgs_msg.JointStateTypeSupport.AsGoStruct(&m.State, unsafe.Pointer(&mem.state))
}

func (t _ParallelGripperCommand_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__ParallelGripperCommand_Feedback())
}

type CParallelGripperCommand_Feedback = C.control_msgs__action__ParallelGripperCommand_Feedback
type CParallelGripperCommand_Feedback__Sequence = C.control_msgs__action__ParallelGripperCommand_Feedback__Sequence

func ParallelGripperCommand_Feedback__Sequence_to_Go(goSlice *[]ParallelGripperCommand_Feedback, cSlice CParallelGripperCommand_Feedback__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParallelGripperCommand_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParallelGripperCommand_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParallelGripperCommand_Feedback__Sequence_to_C(cSlice *CParallelGripperCommand_Feedback__Sequence, goSlice []ParallelGripperCommand_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__ParallelGripperCommand_Feedback)(C.malloc(C.sizeof_struct_control_msgs__action__ParallelGripperCommand_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParallelGripperCommand_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParallelGripperCommand_Feedback__Array_to_Go(goSlice []ParallelGripperCommand_Feedback, cSlice []CParallelGripperCommand_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		ParallelGripperCommand_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParallelGripperCommand_Feedback__Array_to_C(cSlice []CParallelGripperCommand_Feedback, goSlice []ParallelGripperCommand_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		ParallelGripperCommand_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
