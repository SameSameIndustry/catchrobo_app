// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/joint_controller_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/JointControllerState", JointControllerStateTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/JointControllerState", JointControllerStateTypeSupport)
}

type JointControllerState struct {
	Header std_msgs_msg.Header `yaml:"header"`// Header timestamp should be update time of controller state
	SetPoint float64 `yaml:"set_point"`// The set point, that is, desired state.
	ProcessValue float64 `yaml:"process_value"`// Current value of the process (ie: latest sensor measurement on the controlled value).
	ProcessValueDot float64 `yaml:"process_value_dot"`// First time-derivative of the process value.
	Error float64 `yaml:"error"`// The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).
	TimeStep float64 `yaml:"time_step"`// Time between two consecutive updates/execution of the control law.
	Command float64 `yaml:"command"`// Current output of the controller.
	P float64 `yaml:"p"`// Current PID parameters of the controller.
	I float64 `yaml:"i"`
	D float64 `yaml:"d"`
	IClamp float64 `yaml:"i_clamp"`
	Antiwindup bool `yaml:"antiwindup"`
}

// NewJointControllerState creates a new JointControllerState with default values.
func NewJointControllerState() *JointControllerState {
	self := JointControllerState{}
	self.SetDefaults()
	return &self
}

func (t *JointControllerState) Clone() *JointControllerState {
	c := &JointControllerState{}
	c.Header = *t.Header.Clone()
	c.SetPoint = t.SetPoint
	c.ProcessValue = t.ProcessValue
	c.ProcessValueDot = t.ProcessValueDot
	c.Error = t.Error
	c.TimeStep = t.TimeStep
	c.Command = t.Command
	c.P = t.P
	c.I = t.I
	c.D = t.D
	c.IClamp = t.IClamp
	c.Antiwindup = t.Antiwindup
	return c
}

func (t *JointControllerState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointControllerState) SetDefaults() {
	t.Header.SetDefaults()
	t.SetPoint = 0
	t.ProcessValue = 0
	t.ProcessValueDot = 0
	t.Error = 0
	t.TimeStep = 0
	t.Command = 0
	t.P = 0
	t.I = 0
	t.D = 0
	t.IClamp = 0
	t.Antiwindup = false
}

func (t *JointControllerState) GetTypeSupport() types.MessageTypeSupport {
	return JointControllerStateTypeSupport
}

// JointControllerStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointControllerStatePublisher struct {
	*rclgo.Publisher
}

// NewJointControllerStatePublisher creates and returns a new publisher for the
// JointControllerState
func NewJointControllerStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointControllerStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointControllerStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointControllerStatePublisher{pub}, nil
}

func (p *JointControllerStatePublisher) Publish(msg *JointControllerState) error {
	return p.Publisher.Publish(msg)
}

// JointControllerStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointControllerStateSubscription struct {
	*rclgo.Subscription
}

// JointControllerStateSubscriptionCallback type is used to provide a subscription
// handler function for a JointControllerStateSubscription.
type JointControllerStateSubscriptionCallback func(msg *JointControllerState, info *rclgo.MessageInfo, err error)

// NewJointControllerStateSubscription creates and returns a new subscription for the
// JointControllerState
func NewJointControllerStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointControllerStateSubscriptionCallback) (*JointControllerStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointControllerState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointControllerStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointControllerStateSubscription{sub}, nil
}

func (s *JointControllerStateSubscription) TakeMessage(out *JointControllerState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointControllerStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointControllerStateSlice(dst, src []JointControllerState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointControllerStateTypeSupport types.MessageTypeSupport = _JointControllerStateTypeSupport{}

type _JointControllerStateTypeSupport struct{}

func (t _JointControllerStateTypeSupport) New() types.Message {
	return NewJointControllerState()
}

func (t _JointControllerStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__JointControllerState
	return (unsafe.Pointer)(C.control_msgs__msg__JointControllerState__create())
}

func (t _JointControllerStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__JointControllerState__destroy((*C.control_msgs__msg__JointControllerState)(pointer_to_free))
}

func (t _JointControllerStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointControllerState)
	mem := (*C.control_msgs__msg__JointControllerState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.set_point = C.double(m.SetPoint)
	mem.process_value = C.double(m.ProcessValue)
	mem.process_value_dot = C.double(m.ProcessValueDot)
	mem.error = C.double(m.Error)
	mem.time_step = C.double(m.TimeStep)
	mem.command = C.double(m.Command)
	mem.p = C.double(m.P)
	mem.i = C.double(m.I)
	mem.d = C.double(m.D)
	mem.i_clamp = C.double(m.IClamp)
	mem.antiwindup = C.bool(m.Antiwindup)
}

func (t _JointControllerStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointControllerState)
	mem := (*C.control_msgs__msg__JointControllerState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.SetPoint = float64(mem.set_point)
	m.ProcessValue = float64(mem.process_value)
	m.ProcessValueDot = float64(mem.process_value_dot)
	m.Error = float64(mem.error)
	m.TimeStep = float64(mem.time_step)
	m.Command = float64(mem.command)
	m.P = float64(mem.p)
	m.I = float64(mem.i)
	m.D = float64(mem.d)
	m.IClamp = float64(mem.i_clamp)
	m.Antiwindup = bool(mem.antiwindup)
}

func (t _JointControllerStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointControllerState())
}

type CJointControllerState = C.control_msgs__msg__JointControllerState
type CJointControllerState__Sequence = C.control_msgs__msg__JointControllerState__Sequence

func JointControllerState__Sequence_to_Go(goSlice *[]JointControllerState, cSlice CJointControllerState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointControllerState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointControllerStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointControllerState__Sequence_to_C(cSlice *CJointControllerState__Sequence, goSlice []JointControllerState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__JointControllerState)(C.malloc(C.sizeof_struct_control_msgs__msg__JointControllerState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointControllerState__Array_to_Go(goSlice []JointControllerState, cSlice []CJointControllerState) {
	for i := 0; i < len(cSlice); i++ {
		JointControllerStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointControllerState__Array_to_C(cSlice []CJointControllerState, goSlice []JointControllerState) {
	for i := 0; i < len(goSlice); i++ {
		JointControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
