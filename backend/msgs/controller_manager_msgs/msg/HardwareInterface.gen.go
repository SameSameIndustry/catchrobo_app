// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/msg/hardware_interface.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/HardwareInterface", HardwareInterfaceTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/msg/HardwareInterface", HardwareInterfaceTypeSupport)
}

type HardwareInterface struct {
	Name string `yaml:"name"`
	IsAvailable bool `yaml:"is_available"`
	IsClaimed bool `yaml:"is_claimed"`
}

// NewHardwareInterface creates a new HardwareInterface with default values.
func NewHardwareInterface() *HardwareInterface {
	self := HardwareInterface{}
	self.SetDefaults()
	return &self
}

func (t *HardwareInterface) Clone() *HardwareInterface {
	c := &HardwareInterface{}
	c.Name = t.Name
	c.IsAvailable = t.IsAvailable
	c.IsClaimed = t.IsClaimed
	return c
}

func (t *HardwareInterface) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HardwareInterface) SetDefaults() {
	t.Name = ""
	t.IsAvailable = false
	t.IsClaimed = false
}

func (t *HardwareInterface) GetTypeSupport() types.MessageTypeSupport {
	return HardwareInterfaceTypeSupport
}

// HardwareInterfacePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HardwareInterfacePublisher struct {
	*rclgo.Publisher
}

// NewHardwareInterfacePublisher creates and returns a new publisher for the
// HardwareInterface
func NewHardwareInterfacePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HardwareInterfacePublisher, error) {
	pub, err := node.NewPublisher(topic_name, HardwareInterfaceTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HardwareInterfacePublisher{pub}, nil
}

func (p *HardwareInterfacePublisher) Publish(msg *HardwareInterface) error {
	return p.Publisher.Publish(msg)
}

// HardwareInterfaceSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HardwareInterfaceSubscription struct {
	*rclgo.Subscription
}

// HardwareInterfaceSubscriptionCallback type is used to provide a subscription
// handler function for a HardwareInterfaceSubscription.
type HardwareInterfaceSubscriptionCallback func(msg *HardwareInterface, info *rclgo.MessageInfo, err error)

// NewHardwareInterfaceSubscription creates and returns a new subscription for the
// HardwareInterface
func NewHardwareInterfaceSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HardwareInterfaceSubscriptionCallback) (*HardwareInterfaceSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HardwareInterface
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HardwareInterfaceTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HardwareInterfaceSubscription{sub}, nil
}

func (s *HardwareInterfaceSubscription) TakeMessage(out *HardwareInterface) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHardwareInterfaceSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHardwareInterfaceSlice(dst, src []HardwareInterface) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HardwareInterfaceTypeSupport types.MessageTypeSupport = _HardwareInterfaceTypeSupport{}

type _HardwareInterfaceTypeSupport struct{}

func (t _HardwareInterfaceTypeSupport) New() types.Message {
	return NewHardwareInterface()
}

func (t _HardwareInterfaceTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__msg__HardwareInterface
	return (unsafe.Pointer)(C.controller_manager_msgs__msg__HardwareInterface__create())
}

func (t _HardwareInterfaceTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__msg__HardwareInterface__destroy((*C.controller_manager_msgs__msg__HardwareInterface)(pointer_to_free))
}

func (t _HardwareInterfaceTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HardwareInterface)
	mem := (*C.controller_manager_msgs__msg__HardwareInterface)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.is_available = C.bool(m.IsAvailable)
	mem.is_claimed = C.bool(m.IsClaimed)
}

func (t _HardwareInterfaceTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HardwareInterface)
	mem := (*C.controller_manager_msgs__msg__HardwareInterface)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.IsAvailable = bool(mem.is_available)
	m.IsClaimed = bool(mem.is_claimed)
}

func (t _HardwareInterfaceTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__msg__HardwareInterface())
}

type CHardwareInterface = C.controller_manager_msgs__msg__HardwareInterface
type CHardwareInterface__Sequence = C.controller_manager_msgs__msg__HardwareInterface__Sequence

func HardwareInterface__Sequence_to_Go(goSlice *[]HardwareInterface, cSlice CHardwareInterface__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HardwareInterface, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HardwareInterfaceTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HardwareInterface__Sequence_to_C(cSlice *CHardwareInterface__Sequence, goSlice []HardwareInterface) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__msg__HardwareInterface)(C.malloc(C.sizeof_struct_controller_manager_msgs__msg__HardwareInterface * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HardwareInterfaceTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HardwareInterface__Array_to_Go(goSlice []HardwareInterface, cSlice []CHardwareInterface) {
	for i := 0; i < len(cSlice); i++ {
		HardwareInterfaceTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HardwareInterface__Array_to_C(cSlice []CHardwareInterface, goSlice []HardwareInterface) {
	for i := 0; i < len(goSlice); i++ {
		HardwareInterfaceTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
