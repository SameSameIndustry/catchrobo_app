// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/multi_dof_state_stamped.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/MultiDOFStateStamped", MultiDOFStateStampedTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/MultiDOFStateStamped", MultiDOFStateStampedTypeSupport)
}

type MultiDOFStateStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`// Header timestamp should be update time of controller state
	DofStates []SingleDOFState `yaml:"dof_states"`
}

// NewMultiDOFStateStamped creates a new MultiDOFStateStamped with default values.
func NewMultiDOFStateStamped() *MultiDOFStateStamped {
	self := MultiDOFStateStamped{}
	self.SetDefaults()
	return &self
}

func (t *MultiDOFStateStamped) Clone() *MultiDOFStateStamped {
	c := &MultiDOFStateStamped{}
	c.Header = *t.Header.Clone()
	if t.DofStates != nil {
		c.DofStates = make([]SingleDOFState, len(t.DofStates))
		CloneSingleDOFStateSlice(c.DofStates, t.DofStates)
	}
	return c
}

func (t *MultiDOFStateStamped) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MultiDOFStateStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.DofStates = nil
}

func (t *MultiDOFStateStamped) GetTypeSupport() types.MessageTypeSupport {
	return MultiDOFStateStampedTypeSupport
}

// MultiDOFStateStampedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MultiDOFStateStampedPublisher struct {
	*rclgo.Publisher
}

// NewMultiDOFStateStampedPublisher creates and returns a new publisher for the
// MultiDOFStateStamped
func NewMultiDOFStateStampedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MultiDOFStateStampedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MultiDOFStateStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MultiDOFStateStampedPublisher{pub}, nil
}

func (p *MultiDOFStateStampedPublisher) Publish(msg *MultiDOFStateStamped) error {
	return p.Publisher.Publish(msg)
}

// MultiDOFStateStampedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MultiDOFStateStampedSubscription struct {
	*rclgo.Subscription
}

// MultiDOFStateStampedSubscriptionCallback type is used to provide a subscription
// handler function for a MultiDOFStateStampedSubscription.
type MultiDOFStateStampedSubscriptionCallback func(msg *MultiDOFStateStamped, info *rclgo.MessageInfo, err error)

// NewMultiDOFStateStampedSubscription creates and returns a new subscription for the
// MultiDOFStateStamped
func NewMultiDOFStateStampedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MultiDOFStateStampedSubscriptionCallback) (*MultiDOFStateStampedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MultiDOFStateStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MultiDOFStateStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MultiDOFStateStampedSubscription{sub}, nil
}

func (s *MultiDOFStateStampedSubscription) TakeMessage(out *MultiDOFStateStamped) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMultiDOFStateStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMultiDOFStateStampedSlice(dst, src []MultiDOFStateStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MultiDOFStateStampedTypeSupport types.MessageTypeSupport = _MultiDOFStateStampedTypeSupport{}

type _MultiDOFStateStampedTypeSupport struct{}

func (t _MultiDOFStateStampedTypeSupport) New() types.Message {
	return NewMultiDOFStateStamped()
}

func (t _MultiDOFStateStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__MultiDOFStateStamped
	return (unsafe.Pointer)(C.control_msgs__msg__MultiDOFStateStamped__create())
}

func (t _MultiDOFStateStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__MultiDOFStateStamped__destroy((*C.control_msgs__msg__MultiDOFStateStamped)(pointer_to_free))
}

func (t _MultiDOFStateStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MultiDOFStateStamped)
	mem := (*C.control_msgs__msg__MultiDOFStateStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	SingleDOFState__Sequence_to_C(&mem.dof_states, m.DofStates)
}

func (t _MultiDOFStateStampedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MultiDOFStateStamped)
	mem := (*C.control_msgs__msg__MultiDOFStateStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	SingleDOFState__Sequence_to_Go(&m.DofStates, mem.dof_states)
}

func (t _MultiDOFStateStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__MultiDOFStateStamped())
}

type CMultiDOFStateStamped = C.control_msgs__msg__MultiDOFStateStamped
type CMultiDOFStateStamped__Sequence = C.control_msgs__msg__MultiDOFStateStamped__Sequence

func MultiDOFStateStamped__Sequence_to_Go(goSlice *[]MultiDOFStateStamped, cSlice CMultiDOFStateStamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MultiDOFStateStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MultiDOFStateStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MultiDOFStateStamped__Sequence_to_C(cSlice *CMultiDOFStateStamped__Sequence, goSlice []MultiDOFStateStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__MultiDOFStateStamped)(C.malloc(C.sizeof_struct_control_msgs__msg__MultiDOFStateStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MultiDOFStateStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MultiDOFStateStamped__Array_to_Go(goSlice []MultiDOFStateStamped, cSlice []CMultiDOFStateStamped) {
	for i := 0; i < len(cSlice); i++ {
		MultiDOFStateStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MultiDOFStateStamped__Array_to_C(cSlice []CMultiDOFStateStamped, goSlice []MultiDOFStateStamped) {
	for i := 0; i < len(goSlice); i++ {
		MultiDOFStateStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
