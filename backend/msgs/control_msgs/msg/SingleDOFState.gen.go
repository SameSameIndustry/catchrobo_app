// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/single_dof_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/SingleDOFState", SingleDOFStateTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/SingleDOFState", SingleDOFStateTypeSupport)
}

type SingleDOFState struct {
	Name string `yaml:"name"`// DoF name, e.g., joint or Cartesian axis name
	Reference float64 `yaml:"reference"`// The set point, that is, desired state.
	Feedback float64 `yaml:"feedback"`// Current value of the process (ie: latest sensor measurement on the controlled value).
	FeedbackDot float64 `yaml:"feedback_dot"`// First time-derivative of the process value. E.g., velocity.
	Error float64 `yaml:"error"`// The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).
	ErrorDot float64 `yaml:"error_dot"`// First time-derivative of the error of the controlled value.
	TimeStep float64 `yaml:"time_step"`// Time between two consecutive updates/execution of the control law.
	Output float64 `yaml:"output"`// Current output of the controller.
}

// NewSingleDOFState creates a new SingleDOFState with default values.
func NewSingleDOFState() *SingleDOFState {
	self := SingleDOFState{}
	self.SetDefaults()
	return &self
}

func (t *SingleDOFState) Clone() *SingleDOFState {
	c := &SingleDOFState{}
	c.Name = t.Name
	c.Reference = t.Reference
	c.Feedback = t.Feedback
	c.FeedbackDot = t.FeedbackDot
	c.Error = t.Error
	c.ErrorDot = t.ErrorDot
	c.TimeStep = t.TimeStep
	c.Output = t.Output
	return c
}

func (t *SingleDOFState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SingleDOFState) SetDefaults() {
	t.Name = ""
	t.Reference = 0
	t.Feedback = 0
	t.FeedbackDot = 0
	t.Error = 0
	t.ErrorDot = 0
	t.TimeStep = 0
	t.Output = 0
}

func (t *SingleDOFState) GetTypeSupport() types.MessageTypeSupport {
	return SingleDOFStateTypeSupport
}

// SingleDOFStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SingleDOFStatePublisher struct {
	*rclgo.Publisher
}

// NewSingleDOFStatePublisher creates and returns a new publisher for the
// SingleDOFState
func NewSingleDOFStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SingleDOFStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, SingleDOFStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SingleDOFStatePublisher{pub}, nil
}

func (p *SingleDOFStatePublisher) Publish(msg *SingleDOFState) error {
	return p.Publisher.Publish(msg)
}

// SingleDOFStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SingleDOFStateSubscription struct {
	*rclgo.Subscription
}

// SingleDOFStateSubscriptionCallback type is used to provide a subscription
// handler function for a SingleDOFStateSubscription.
type SingleDOFStateSubscriptionCallback func(msg *SingleDOFState, info *rclgo.MessageInfo, err error)

// NewSingleDOFStateSubscription creates and returns a new subscription for the
// SingleDOFState
func NewSingleDOFStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SingleDOFStateSubscriptionCallback) (*SingleDOFStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SingleDOFState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SingleDOFStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SingleDOFStateSubscription{sub}, nil
}

func (s *SingleDOFStateSubscription) TakeMessage(out *SingleDOFState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSingleDOFStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSingleDOFStateSlice(dst, src []SingleDOFState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SingleDOFStateTypeSupport types.MessageTypeSupport = _SingleDOFStateTypeSupport{}

type _SingleDOFStateTypeSupport struct{}

func (t _SingleDOFStateTypeSupport) New() types.Message {
	return NewSingleDOFState()
}

func (t _SingleDOFStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__SingleDOFState
	return (unsafe.Pointer)(C.control_msgs__msg__SingleDOFState__create())
}

func (t _SingleDOFStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__SingleDOFState__destroy((*C.control_msgs__msg__SingleDOFState)(pointer_to_free))
}

func (t _SingleDOFStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SingleDOFState)
	mem := (*C.control_msgs__msg__SingleDOFState)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.reference = C.double(m.Reference)
	mem.feedback = C.double(m.Feedback)
	mem.feedback_dot = C.double(m.FeedbackDot)
	mem.error = C.double(m.Error)
	mem.error_dot = C.double(m.ErrorDot)
	mem.time_step = C.double(m.TimeStep)
	mem.output = C.double(m.Output)
}

func (t _SingleDOFStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SingleDOFState)
	mem := (*C.control_msgs__msg__SingleDOFState)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Reference = float64(mem.reference)
	m.Feedback = float64(mem.feedback)
	m.FeedbackDot = float64(mem.feedback_dot)
	m.Error = float64(mem.error)
	m.ErrorDot = float64(mem.error_dot)
	m.TimeStep = float64(mem.time_step)
	m.Output = float64(mem.output)
}

func (t _SingleDOFStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__SingleDOFState())
}

type CSingleDOFState = C.control_msgs__msg__SingleDOFState
type CSingleDOFState__Sequence = C.control_msgs__msg__SingleDOFState__Sequence

func SingleDOFState__Sequence_to_Go(goSlice *[]SingleDOFState, cSlice CSingleDOFState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SingleDOFState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SingleDOFStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SingleDOFState__Sequence_to_C(cSlice *CSingleDOFState__Sequence, goSlice []SingleDOFState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__SingleDOFState)(C.malloc(C.sizeof_struct_control_msgs__msg__SingleDOFState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SingleDOFStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SingleDOFState__Array_to_Go(goSlice []SingleDOFState, cSlice []CSingleDOFState) {
	for i := 0; i < len(cSlice); i++ {
		SingleDOFStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SingleDOFState__Array_to_C(cSlice []CSingleDOFState, goSlice []SingleDOFState) {
	for i := 0; i < len(goSlice); i++ {
		SingleDOFStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
