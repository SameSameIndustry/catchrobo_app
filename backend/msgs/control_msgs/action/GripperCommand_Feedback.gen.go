// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/gripper_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/GripperCommand_Feedback", GripperCommand_FeedbackTypeSupport)
	typemap.RegisterMessage("control_msgs/action/GripperCommand_Feedback", GripperCommand_FeedbackTypeSupport)
}

type GripperCommand_Feedback struct {
	Position float64 `yaml:"position"`// The current gripper gap size (in meters)
	Effort float64 `yaml:"effort"`// The current effort exerted (in Newtons)
	Stalled bool `yaml:"stalled"`// True iff the gripper is exerting max effort and not moving
	ReachedGoal bool `yaml:"reached_goal"`// True iff the gripper position has reached the commanded setpoint
}

// NewGripperCommand_Feedback creates a new GripperCommand_Feedback with default values.
func NewGripperCommand_Feedback() *GripperCommand_Feedback {
	self := GripperCommand_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *GripperCommand_Feedback) Clone() *GripperCommand_Feedback {
	c := &GripperCommand_Feedback{}
	c.Position = t.Position
	c.Effort = t.Effort
	c.Stalled = t.Stalled
	c.ReachedGoal = t.ReachedGoal
	return c
}

func (t *GripperCommand_Feedback) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GripperCommand_Feedback) SetDefaults() {
	t.Position = 0
	t.Effort = 0
	t.Stalled = false
	t.ReachedGoal = false
}

func (t *GripperCommand_Feedback) GetTypeSupport() types.MessageTypeSupport {
	return GripperCommand_FeedbackTypeSupport
}

// GripperCommand_FeedbackPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GripperCommand_FeedbackPublisher struct {
	*rclgo.Publisher
}

// NewGripperCommand_FeedbackPublisher creates and returns a new publisher for the
// GripperCommand_Feedback
func NewGripperCommand_FeedbackPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GripperCommand_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GripperCommand_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GripperCommand_FeedbackPublisher{pub}, nil
}

func (p *GripperCommand_FeedbackPublisher) Publish(msg *GripperCommand_Feedback) error {
	return p.Publisher.Publish(msg)
}

// GripperCommand_FeedbackSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GripperCommand_FeedbackSubscription struct {
	*rclgo.Subscription
}

// GripperCommand_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a GripperCommand_FeedbackSubscription.
type GripperCommand_FeedbackSubscriptionCallback func(msg *GripperCommand_Feedback, info *rclgo.MessageInfo, err error)

// NewGripperCommand_FeedbackSubscription creates and returns a new subscription for the
// GripperCommand_Feedback
func NewGripperCommand_FeedbackSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GripperCommand_FeedbackSubscriptionCallback) (*GripperCommand_FeedbackSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GripperCommand_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GripperCommand_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GripperCommand_FeedbackSubscription{sub}, nil
}

func (s *GripperCommand_FeedbackSubscription) TakeMessage(out *GripperCommand_Feedback) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGripperCommand_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGripperCommand_FeedbackSlice(dst, src []GripperCommand_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GripperCommand_FeedbackTypeSupport types.MessageTypeSupport = _GripperCommand_FeedbackTypeSupport{}

type _GripperCommand_FeedbackTypeSupport struct{}

func (t _GripperCommand_FeedbackTypeSupport) New() types.Message {
	return NewGripperCommand_Feedback()
}

func (t _GripperCommand_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__GripperCommand_Feedback
	return (unsafe.Pointer)(C.control_msgs__action__GripperCommand_Feedback__create())
}

func (t _GripperCommand_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__GripperCommand_Feedback__destroy((*C.control_msgs__action__GripperCommand_Feedback)(pointer_to_free))
}

func (t _GripperCommand_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GripperCommand_Feedback)
	mem := (*C.control_msgs__action__GripperCommand_Feedback)(dst)
	mem.position = C.double(m.Position)
	mem.effort = C.double(m.Effort)
	mem.stalled = C.bool(m.Stalled)
	mem.reached_goal = C.bool(m.ReachedGoal)
}

func (t _GripperCommand_FeedbackTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GripperCommand_Feedback)
	mem := (*C.control_msgs__action__GripperCommand_Feedback)(ros2_message_buffer)
	m.Position = float64(mem.position)
	m.Effort = float64(mem.effort)
	m.Stalled = bool(mem.stalled)
	m.ReachedGoal = bool(mem.reached_goal)
}

func (t _GripperCommand_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__GripperCommand_Feedback())
}

type CGripperCommand_Feedback = C.control_msgs__action__GripperCommand_Feedback
type CGripperCommand_Feedback__Sequence = C.control_msgs__action__GripperCommand_Feedback__Sequence

func GripperCommand_Feedback__Sequence_to_Go(goSlice *[]GripperCommand_Feedback, cSlice CGripperCommand_Feedback__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GripperCommand_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GripperCommand_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GripperCommand_Feedback__Sequence_to_C(cSlice *CGripperCommand_Feedback__Sequence, goSlice []GripperCommand_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__GripperCommand_Feedback)(C.malloc(C.sizeof_struct_control_msgs__action__GripperCommand_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GripperCommand_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GripperCommand_Feedback__Array_to_Go(goSlice []GripperCommand_Feedback, cSlice []CGripperCommand_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		GripperCommand_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GripperCommand_Feedback__Array_to_C(cSlice []CGripperCommand_Feedback, goSlice []GripperCommand_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		GripperCommand_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
