// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/multi_dof_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/MultiDOFCommand", MultiDOFCommandTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/MultiDOFCommand", MultiDOFCommandTypeSupport)
}

type MultiDOFCommand struct {
	DofNames []string `yaml:"dof_names"`// names of degrees of freedom
	Values []float64 `yaml:"values"`// values used by most of the controller
	ValuesDot []float64 `yaml:"values_dot"`// First derivation of the values, e.g., velocity if values are positions.This is useful for PID and similar controllers.
}

// NewMultiDOFCommand creates a new MultiDOFCommand with default values.
func NewMultiDOFCommand() *MultiDOFCommand {
	self := MultiDOFCommand{}
	self.SetDefaults()
	return &self
}

func (t *MultiDOFCommand) Clone() *MultiDOFCommand {
	c := &MultiDOFCommand{}
	if t.DofNames != nil {
		c.DofNames = make([]string, len(t.DofNames))
		copy(c.DofNames, t.DofNames)
	}
	if t.Values != nil {
		c.Values = make([]float64, len(t.Values))
		copy(c.Values, t.Values)
	}
	if t.ValuesDot != nil {
		c.ValuesDot = make([]float64, len(t.ValuesDot))
		copy(c.ValuesDot, t.ValuesDot)
	}
	return c
}

func (t *MultiDOFCommand) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MultiDOFCommand) SetDefaults() {
	t.DofNames = nil
	t.Values = nil
	t.ValuesDot = nil
}

func (t *MultiDOFCommand) GetTypeSupport() types.MessageTypeSupport {
	return MultiDOFCommandTypeSupport
}

// MultiDOFCommandPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MultiDOFCommandPublisher struct {
	*rclgo.Publisher
}

// NewMultiDOFCommandPublisher creates and returns a new publisher for the
// MultiDOFCommand
func NewMultiDOFCommandPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MultiDOFCommandPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MultiDOFCommandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MultiDOFCommandPublisher{pub}, nil
}

func (p *MultiDOFCommandPublisher) Publish(msg *MultiDOFCommand) error {
	return p.Publisher.Publish(msg)
}

// MultiDOFCommandSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MultiDOFCommandSubscription struct {
	*rclgo.Subscription
}

// MultiDOFCommandSubscriptionCallback type is used to provide a subscription
// handler function for a MultiDOFCommandSubscription.
type MultiDOFCommandSubscriptionCallback func(msg *MultiDOFCommand, info *rclgo.MessageInfo, err error)

// NewMultiDOFCommandSubscription creates and returns a new subscription for the
// MultiDOFCommand
func NewMultiDOFCommandSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MultiDOFCommandSubscriptionCallback) (*MultiDOFCommandSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MultiDOFCommand
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MultiDOFCommandTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MultiDOFCommandSubscription{sub}, nil
}

func (s *MultiDOFCommandSubscription) TakeMessage(out *MultiDOFCommand) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMultiDOFCommandSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMultiDOFCommandSlice(dst, src []MultiDOFCommand) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MultiDOFCommandTypeSupport types.MessageTypeSupport = _MultiDOFCommandTypeSupport{}

type _MultiDOFCommandTypeSupport struct{}

func (t _MultiDOFCommandTypeSupport) New() types.Message {
	return NewMultiDOFCommand()
}

func (t _MultiDOFCommandTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__MultiDOFCommand
	return (unsafe.Pointer)(C.control_msgs__msg__MultiDOFCommand__create())
}

func (t _MultiDOFCommandTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__MultiDOFCommand__destroy((*C.control_msgs__msg__MultiDOFCommand)(pointer_to_free))
}

func (t _MultiDOFCommandTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MultiDOFCommand)
	mem := (*C.control_msgs__msg__MultiDOFCommand)(dst)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.dof_names)), m.DofNames)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.values)), m.Values)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.values_dot)), m.ValuesDot)
}

func (t _MultiDOFCommandTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MultiDOFCommand)
	mem := (*C.control_msgs__msg__MultiDOFCommand)(ros2_message_buffer)
	primitives.String__Sequence_to_Go(&m.DofNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.dof_names)))
	primitives.Float64__Sequence_to_Go(&m.Values, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.values)))
	primitives.Float64__Sequence_to_Go(&m.ValuesDot, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.values_dot)))
}

func (t _MultiDOFCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__MultiDOFCommand())
}

type CMultiDOFCommand = C.control_msgs__msg__MultiDOFCommand
type CMultiDOFCommand__Sequence = C.control_msgs__msg__MultiDOFCommand__Sequence

func MultiDOFCommand__Sequence_to_Go(goSlice *[]MultiDOFCommand, cSlice CMultiDOFCommand__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MultiDOFCommand, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MultiDOFCommandTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MultiDOFCommand__Sequence_to_C(cSlice *CMultiDOFCommand__Sequence, goSlice []MultiDOFCommand) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__MultiDOFCommand)(C.malloc(C.sizeof_struct_control_msgs__msg__MultiDOFCommand * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MultiDOFCommandTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MultiDOFCommand__Array_to_Go(goSlice []MultiDOFCommand, cSlice []CMultiDOFCommand) {
	for i := 0; i < len(cSlice); i++ {
		MultiDOFCommandTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MultiDOFCommand__Array_to_C(cSlice []CMultiDOFCommand, goSlice []MultiDOFCommand) {
	for i := 0; i < len(goSlice); i++ {
		MultiDOFCommandTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
