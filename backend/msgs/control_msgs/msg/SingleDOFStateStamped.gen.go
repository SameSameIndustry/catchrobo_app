// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/single_dof_state_stamped.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/SingleDOFStateStamped", SingleDOFStateStampedTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/SingleDOFStateStamped", SingleDOFStateStampedTypeSupport)
}

type SingleDOFStateStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`// Header timestamp should be update time of controller state
	DofState SingleDOFState `yaml:"dof_state"`
}

// NewSingleDOFStateStamped creates a new SingleDOFStateStamped with default values.
func NewSingleDOFStateStamped() *SingleDOFStateStamped {
	self := SingleDOFStateStamped{}
	self.SetDefaults()
	return &self
}

func (t *SingleDOFStateStamped) Clone() *SingleDOFStateStamped {
	c := &SingleDOFStateStamped{}
	c.Header = *t.Header.Clone()
	c.DofState = *t.DofState.Clone()
	return c
}

func (t *SingleDOFStateStamped) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SingleDOFStateStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.DofState.SetDefaults()
}

func (t *SingleDOFStateStamped) GetTypeSupport() types.MessageTypeSupport {
	return SingleDOFStateStampedTypeSupport
}

// SingleDOFStateStampedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SingleDOFStateStampedPublisher struct {
	*rclgo.Publisher
}

// NewSingleDOFStateStampedPublisher creates and returns a new publisher for the
// SingleDOFStateStamped
func NewSingleDOFStateStampedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SingleDOFStateStampedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SingleDOFStateStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SingleDOFStateStampedPublisher{pub}, nil
}

func (p *SingleDOFStateStampedPublisher) Publish(msg *SingleDOFStateStamped) error {
	return p.Publisher.Publish(msg)
}

// SingleDOFStateStampedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SingleDOFStateStampedSubscription struct {
	*rclgo.Subscription
}

// SingleDOFStateStampedSubscriptionCallback type is used to provide a subscription
// handler function for a SingleDOFStateStampedSubscription.
type SingleDOFStateStampedSubscriptionCallback func(msg *SingleDOFStateStamped, info *rclgo.MessageInfo, err error)

// NewSingleDOFStateStampedSubscription creates and returns a new subscription for the
// SingleDOFStateStamped
func NewSingleDOFStateStampedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SingleDOFStateStampedSubscriptionCallback) (*SingleDOFStateStampedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SingleDOFStateStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SingleDOFStateStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SingleDOFStateStampedSubscription{sub}, nil
}

func (s *SingleDOFStateStampedSubscription) TakeMessage(out *SingleDOFStateStamped) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSingleDOFStateStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSingleDOFStateStampedSlice(dst, src []SingleDOFStateStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SingleDOFStateStampedTypeSupport types.MessageTypeSupport = _SingleDOFStateStampedTypeSupport{}

type _SingleDOFStateStampedTypeSupport struct{}

func (t _SingleDOFStateStampedTypeSupport) New() types.Message {
	return NewSingleDOFStateStamped()
}

func (t _SingleDOFStateStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__SingleDOFStateStamped
	return (unsafe.Pointer)(C.control_msgs__msg__SingleDOFStateStamped__create())
}

func (t _SingleDOFStateStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__SingleDOFStateStamped__destroy((*C.control_msgs__msg__SingleDOFStateStamped)(pointer_to_free))
}

func (t _SingleDOFStateStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SingleDOFStateStamped)
	mem := (*C.control_msgs__msg__SingleDOFStateStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	SingleDOFStateTypeSupport.AsCStruct(unsafe.Pointer(&mem.dof_state), &m.DofState)
}

func (t _SingleDOFStateStampedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SingleDOFStateStamped)
	mem := (*C.control_msgs__msg__SingleDOFStateStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	SingleDOFStateTypeSupport.AsGoStruct(&m.DofState, unsafe.Pointer(&mem.dof_state))
}

func (t _SingleDOFStateStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__SingleDOFStateStamped())
}

type CSingleDOFStateStamped = C.control_msgs__msg__SingleDOFStateStamped
type CSingleDOFStateStamped__Sequence = C.control_msgs__msg__SingleDOFStateStamped__Sequence

func SingleDOFStateStamped__Sequence_to_Go(goSlice *[]SingleDOFStateStamped, cSlice CSingleDOFStateStamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SingleDOFStateStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SingleDOFStateStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SingleDOFStateStamped__Sequence_to_C(cSlice *CSingleDOFStateStamped__Sequence, goSlice []SingleDOFStateStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__SingleDOFStateStamped)(C.malloc(C.sizeof_struct_control_msgs__msg__SingleDOFStateStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SingleDOFStateStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SingleDOFStateStamped__Array_to_Go(goSlice []SingleDOFStateStamped, cSlice []CSingleDOFStateStamped) {
	for i := 0; i < len(cSlice); i++ {
		SingleDOFStateStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SingleDOFStateStamped__Array_to_C(cSlice []CSingleDOFStateStamped, goSlice []SingleDOFStateStamped) {
	for i := 0; i < len(goSlice); i++ {
		SingleDOFStateStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
