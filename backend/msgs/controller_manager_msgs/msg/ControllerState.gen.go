// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/msg/controller_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/ControllerState", ControllerStateTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/msg/ControllerState", ControllerStateTypeSupport)
}

type ControllerState struct {
	Name string `yaml:"name"`// controller name
	State string `yaml:"state"`// controller state: unconfigured, inactive, active, or finalized
	Type string `yaml:"type"`// the controller class name, e.g. joint_trajectory_controller/JointTrajectoryController
	ClaimedInterfaces []string `yaml:"claimed_interfaces"`// command interfaces currently owned by controller
	RequiredCommandInterfaces []string `yaml:"required_command_interfaces"`// command interfaces required by controller
	RequiredStateInterfaces []string `yaml:"required_state_interfaces"`// state interfaces required by controller
	IsChainable bool `yaml:"is_chainable"`// specifies whether or not controller can export references for a controller chain
	IsChained bool `yaml:"is_chained"`// specifies whether or not controller's exported references are claimed by another controller
	ReferenceInterfaces []string `yaml:"reference_interfaces"`// references to be exported (only applicable if is_chainable is true)
	ChainConnections []ChainConnection `yaml:"chain_connections"`// specifies list of controllers and their exported references that the controller is chained to
}

// NewControllerState creates a new ControllerState with default values.
func NewControllerState() *ControllerState {
	self := ControllerState{}
	self.SetDefaults()
	return &self
}

func (t *ControllerState) Clone() *ControllerState {
	c := &ControllerState{}
	c.Name = t.Name
	c.State = t.State
	c.Type = t.Type
	if t.ClaimedInterfaces != nil {
		c.ClaimedInterfaces = make([]string, len(t.ClaimedInterfaces))
		copy(c.ClaimedInterfaces, t.ClaimedInterfaces)
	}
	if t.RequiredCommandInterfaces != nil {
		c.RequiredCommandInterfaces = make([]string, len(t.RequiredCommandInterfaces))
		copy(c.RequiredCommandInterfaces, t.RequiredCommandInterfaces)
	}
	if t.RequiredStateInterfaces != nil {
		c.RequiredStateInterfaces = make([]string, len(t.RequiredStateInterfaces))
		copy(c.RequiredStateInterfaces, t.RequiredStateInterfaces)
	}
	c.IsChainable = t.IsChainable
	c.IsChained = t.IsChained
	if t.ReferenceInterfaces != nil {
		c.ReferenceInterfaces = make([]string, len(t.ReferenceInterfaces))
		copy(c.ReferenceInterfaces, t.ReferenceInterfaces)
	}
	if t.ChainConnections != nil {
		c.ChainConnections = make([]ChainConnection, len(t.ChainConnections))
		CloneChainConnectionSlice(c.ChainConnections, t.ChainConnections)
	}
	return c
}

func (t *ControllerState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ControllerState) SetDefaults() {
	t.Name = ""
	t.State = ""
	t.Type = ""
	t.ClaimedInterfaces = nil
	t.RequiredCommandInterfaces = nil
	t.RequiredStateInterfaces = nil
	t.IsChainable = false
	t.IsChained = false
	t.ReferenceInterfaces = nil
	t.ChainConnections = nil
}

func (t *ControllerState) GetTypeSupport() types.MessageTypeSupport {
	return ControllerStateTypeSupport
}

// ControllerStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ControllerStatePublisher struct {
	*rclgo.Publisher
}

// NewControllerStatePublisher creates and returns a new publisher for the
// ControllerState
func NewControllerStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ControllerStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ControllerStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ControllerStatePublisher{pub}, nil
}

func (p *ControllerStatePublisher) Publish(msg *ControllerState) error {
	return p.Publisher.Publish(msg)
}

// ControllerStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ControllerStateSubscription struct {
	*rclgo.Subscription
}

// ControllerStateSubscriptionCallback type is used to provide a subscription
// handler function for a ControllerStateSubscription.
type ControllerStateSubscriptionCallback func(msg *ControllerState, info *rclgo.MessageInfo, err error)

// NewControllerStateSubscription creates and returns a new subscription for the
// ControllerState
func NewControllerStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ControllerStateSubscriptionCallback) (*ControllerStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ControllerState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ControllerStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ControllerStateSubscription{sub}, nil
}

func (s *ControllerStateSubscription) TakeMessage(out *ControllerState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneControllerStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneControllerStateSlice(dst, src []ControllerState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ControllerStateTypeSupport types.MessageTypeSupport = _ControllerStateTypeSupport{}

type _ControllerStateTypeSupport struct{}

func (t _ControllerStateTypeSupport) New() types.Message {
	return NewControllerState()
}

func (t _ControllerStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__msg__ControllerState
	return (unsafe.Pointer)(C.controller_manager_msgs__msg__ControllerState__create())
}

func (t _ControllerStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__msg__ControllerState__destroy((*C.controller_manager_msgs__msg__ControllerState)(pointer_to_free))
}

func (t _ControllerStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ControllerState)
	mem := (*C.controller_manager_msgs__msg__ControllerState)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.state), m.State)
	primitives.StringAsCStruct(unsafe.Pointer(&mem._type), m.Type)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.claimed_interfaces)), m.ClaimedInterfaces)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.required_command_interfaces)), m.RequiredCommandInterfaces)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.required_state_interfaces)), m.RequiredStateInterfaces)
	mem.is_chainable = C.bool(m.IsChainable)
	mem.is_chained = C.bool(m.IsChained)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.reference_interfaces)), m.ReferenceInterfaces)
	ChainConnection__Sequence_to_C(&mem.chain_connections, m.ChainConnections)
}

func (t _ControllerStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ControllerState)
	mem := (*C.controller_manager_msgs__msg__ControllerState)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	primitives.StringAsGoStruct(&m.State, unsafe.Pointer(&mem.state))
	primitives.StringAsGoStruct(&m.Type, unsafe.Pointer(&mem._type))
	primitives.String__Sequence_to_Go(&m.ClaimedInterfaces, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.claimed_interfaces)))
	primitives.String__Sequence_to_Go(&m.RequiredCommandInterfaces, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.required_command_interfaces)))
	primitives.String__Sequence_to_Go(&m.RequiredStateInterfaces, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.required_state_interfaces)))
	m.IsChainable = bool(mem.is_chainable)
	m.IsChained = bool(mem.is_chained)
	primitives.String__Sequence_to_Go(&m.ReferenceInterfaces, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.reference_interfaces)))
	ChainConnection__Sequence_to_Go(&m.ChainConnections, mem.chain_connections)
}

func (t _ControllerStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__msg__ControllerState())
}

type CControllerState = C.controller_manager_msgs__msg__ControllerState
type CControllerState__Sequence = C.controller_manager_msgs__msg__ControllerState__Sequence

func ControllerState__Sequence_to_Go(goSlice *[]ControllerState, cSlice CControllerState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ControllerState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ControllerStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ControllerState__Sequence_to_C(cSlice *CControllerState__Sequence, goSlice []ControllerState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__msg__ControllerState)(C.malloc(C.sizeof_struct_controller_manager_msgs__msg__ControllerState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ControllerState__Array_to_Go(goSlice []ControllerState, cSlice []CControllerState) {
	for i := 0; i < len(cSlice); i++ {
		ControllerStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ControllerState__Array_to_C(cSlice []CControllerState, goSlice []ControllerState) {
	for i := 0; i < len(goSlice); i++ {
		ControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
