// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/follow_joint_trajectory.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/FollowJointTrajectory_Result", FollowJointTrajectory_ResultTypeSupport)
	typemap.RegisterMessage("control_msgs/action/FollowJointTrajectory_Result", FollowJointTrajectory_ResultTypeSupport)
}
const (
	FollowJointTrajectory_Result_SUCCESSFUL int32 = 0
	FollowJointTrajectory_Result_INVALID_GOAL int32 = -1
	FollowJointTrajectory_Result_INVALID_JOINTS int32 = -2
	FollowJointTrajectory_Result_OLD_HEADER_TIMESTAMP int32 = -3
	FollowJointTrajectory_Result_PATH_TOLERANCE_VIOLATED int32 = -4
	FollowJointTrajectory_Result_GOAL_TOLERANCE_VIOLATED int32 = -5
)

type FollowJointTrajectory_Result struct {
	ErrorCode int32 `yaml:"error_code"`
	ErrorString string `yaml:"error_string"`// Human readable description of the error code. Contains complementaryinformation that is especially useful when execution fails, for instance:- INVALID_GOAL: The reason for the invalid goal (e.g., the requestedtrajectory is in the past).- INVALID_JOINTS: The mismatch between the expected controller jointsand those provided in the goal.- PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which jointviolated which tolerance, and by how much.
}

// NewFollowJointTrajectory_Result creates a new FollowJointTrajectory_Result with default values.
func NewFollowJointTrajectory_Result() *FollowJointTrajectory_Result {
	self := FollowJointTrajectory_Result{}
	self.SetDefaults()
	return &self
}

func (t *FollowJointTrajectory_Result) Clone() *FollowJointTrajectory_Result {
	c := &FollowJointTrajectory_Result{}
	c.ErrorCode = t.ErrorCode
	c.ErrorString = t.ErrorString
	return c
}

func (t *FollowJointTrajectory_Result) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FollowJointTrajectory_Result) SetDefaults() {
	t.ErrorCode = 0
	t.ErrorString = ""
}

func (t *FollowJointTrajectory_Result) GetTypeSupport() types.MessageTypeSupport {
	return FollowJointTrajectory_ResultTypeSupport
}

// FollowJointTrajectory_ResultPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FollowJointTrajectory_ResultPublisher struct {
	*rclgo.Publisher
}

// NewFollowJointTrajectory_ResultPublisher creates and returns a new publisher for the
// FollowJointTrajectory_Result
func NewFollowJointTrajectory_ResultPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FollowJointTrajectory_ResultPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FollowJointTrajectory_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowJointTrajectory_ResultPublisher{pub}, nil
}

func (p *FollowJointTrajectory_ResultPublisher) Publish(msg *FollowJointTrajectory_Result) error {
	return p.Publisher.Publish(msg)
}

// FollowJointTrajectory_ResultSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FollowJointTrajectory_ResultSubscription struct {
	*rclgo.Subscription
}

// FollowJointTrajectory_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a FollowJointTrajectory_ResultSubscription.
type FollowJointTrajectory_ResultSubscriptionCallback func(msg *FollowJointTrajectory_Result, info *rclgo.MessageInfo, err error)

// NewFollowJointTrajectory_ResultSubscription creates and returns a new subscription for the
// FollowJointTrajectory_Result
func NewFollowJointTrajectory_ResultSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FollowJointTrajectory_ResultSubscriptionCallback) (*FollowJointTrajectory_ResultSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FollowJointTrajectory_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FollowJointTrajectory_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowJointTrajectory_ResultSubscription{sub}, nil
}

func (s *FollowJointTrajectory_ResultSubscription) TakeMessage(out *FollowJointTrajectory_Result) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowJointTrajectory_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowJointTrajectory_ResultSlice(dst, src []FollowJointTrajectory_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowJointTrajectory_ResultTypeSupport types.MessageTypeSupport = _FollowJointTrajectory_ResultTypeSupport{}

type _FollowJointTrajectory_ResultTypeSupport struct{}

func (t _FollowJointTrajectory_ResultTypeSupport) New() types.Message {
	return NewFollowJointTrajectory_Result()
}

func (t _FollowJointTrajectory_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__FollowJointTrajectory_Result
	return (unsafe.Pointer)(C.control_msgs__action__FollowJointTrajectory_Result__create())
}

func (t _FollowJointTrajectory_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__FollowJointTrajectory_Result__destroy((*C.control_msgs__action__FollowJointTrajectory_Result)(pointer_to_free))
}

func (t _FollowJointTrajectory_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FollowJointTrajectory_Result)
	mem := (*C.control_msgs__action__FollowJointTrajectory_Result)(dst)
	mem.error_code = C.int32_t(m.ErrorCode)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.error_string), m.ErrorString)
}

func (t _FollowJointTrajectory_ResultTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowJointTrajectory_Result)
	mem := (*C.control_msgs__action__FollowJointTrajectory_Result)(ros2_message_buffer)
	m.ErrorCode = int32(mem.error_code)
	primitives.StringAsGoStruct(&m.ErrorString, unsafe.Pointer(&mem.error_string))
}

func (t _FollowJointTrajectory_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__FollowJointTrajectory_Result())
}

type CFollowJointTrajectory_Result = C.control_msgs__action__FollowJointTrajectory_Result
type CFollowJointTrajectory_Result__Sequence = C.control_msgs__action__FollowJointTrajectory_Result__Sequence

func FollowJointTrajectory_Result__Sequence_to_Go(goSlice *[]FollowJointTrajectory_Result, cSlice CFollowJointTrajectory_Result__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowJointTrajectory_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowJointTrajectory_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FollowJointTrajectory_Result__Sequence_to_C(cSlice *CFollowJointTrajectory_Result__Sequence, goSlice []FollowJointTrajectory_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__FollowJointTrajectory_Result)(C.malloc(C.sizeof_struct_control_msgs__action__FollowJointTrajectory_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowJointTrajectory_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FollowJointTrajectory_Result__Array_to_Go(goSlice []FollowJointTrajectory_Result, cSlice []CFollowJointTrajectory_Result) {
	for i := 0; i < len(cSlice); i++ {
		FollowJointTrajectory_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FollowJointTrajectory_Result__Array_to_C(cSlice []CFollowJointTrajectory_Result, goSlice []FollowJointTrajectory_Result) {
	for i := 0; i < len(goSlice); i++ {
		FollowJointTrajectory_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
