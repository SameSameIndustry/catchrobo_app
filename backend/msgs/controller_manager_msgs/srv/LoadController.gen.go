// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <controller_manager_msgs/srv/load_controller.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("controller_manager_msgs/LoadController", LoadControllerTypeSupport)
	typemap.RegisterService("controller_manager_msgs/srv/LoadController", LoadControllerTypeSupport)
}

type _LoadControllerTypeSupport struct {}

func (s _LoadControllerTypeSupport) Request() types.MessageTypeSupport {
	return LoadController_RequestTypeSupport
}

func (s _LoadControllerTypeSupport) Response() types.MessageTypeSupport {
	return LoadController_ResponseTypeSupport
}

func (s _LoadControllerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__controller_manager_msgs__srv__LoadController())
}

// Modifying this variable is undefined behavior.
var LoadControllerTypeSupport types.ServiceTypeSupport = _LoadControllerTypeSupport{}

// LoadControllerClient wraps rclgo.Client to provide type safe helper
// functions
type LoadControllerClient struct {
	*rclgo.Client
}

// NewLoadControllerClient creates and returns a new client for the
// LoadController
func NewLoadControllerClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*LoadControllerClient, error) {
	client, err := node.NewClient(serviceName, LoadControllerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LoadControllerClient{client}, nil
}

func (s *LoadControllerClient) Send(ctx context.Context, req *LoadController_Request) (*LoadController_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*LoadController_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type LoadControllerServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s LoadControllerServiceResponseSender) SendResponse(resp *LoadController_Response) error {
	return s.sender.SendResponse(resp)
}

type LoadControllerServiceRequestHandler func(*rclgo.ServiceInfo, *LoadController_Request, LoadControllerServiceResponseSender)

// LoadControllerService wraps rclgo.Service to provide type safe helper
// functions
type LoadControllerService struct {
	*rclgo.Service
}

// NewLoadControllerService creates and returns a new service for the
// LoadController
func NewLoadControllerService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler LoadControllerServiceRequestHandler) (*LoadControllerService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*LoadController_Request)
		responseSender := LoadControllerServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, LoadControllerTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &LoadControllerService{service}, nil
}