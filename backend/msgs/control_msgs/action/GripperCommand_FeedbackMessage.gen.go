// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	unique_identifier_msgs_msg "msgs/unique_identifier_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/gripper_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/GripperCommand_FeedbackMessage", GripperCommand_FeedbackMessageTypeSupport)
	typemap.RegisterMessage("control_msgs/action/GripperCommand_FeedbackMessage", GripperCommand_FeedbackMessageTypeSupport)
}

type GripperCommand_FeedbackMessage struct {
	GoalID unique_identifier_msgs_msg.UUID `yaml:"goal_id"`
	Feedback GripperCommand_Feedback `yaml:"feedback"`
}

// NewGripperCommand_FeedbackMessage creates a new GripperCommand_FeedbackMessage with default values.
func NewGripperCommand_FeedbackMessage() *GripperCommand_FeedbackMessage {
	self := GripperCommand_FeedbackMessage{}
	self.SetDefaults()
	return &self
}

func (t *GripperCommand_FeedbackMessage) Clone() *GripperCommand_FeedbackMessage {
	c := &GripperCommand_FeedbackMessage{}
	c.GoalID = *t.GoalID.Clone()
	c.Feedback = *t.Feedback.Clone()
	return c
}

func (t *GripperCommand_FeedbackMessage) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GripperCommand_FeedbackMessage) SetDefaults() {
	t.GoalID.SetDefaults()
	t.Feedback.SetDefaults()
}

func (t *GripperCommand_FeedbackMessage) GetTypeSupport() types.MessageTypeSupport {
	return GripperCommand_FeedbackMessageTypeSupport
}
func (t *GripperCommand_FeedbackMessage) GetGoalID() *types.GoalID {
	return (*types.GoalID)(&t.GoalID.Uuid)
}

func (t *GripperCommand_FeedbackMessage) SetGoalID(id *types.GoalID) {
	t.GoalID.Uuid = *id
}

// GripperCommand_FeedbackMessagePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GripperCommand_FeedbackMessagePublisher struct {
	*rclgo.Publisher
}

// NewGripperCommand_FeedbackMessagePublisher creates and returns a new publisher for the
// GripperCommand_FeedbackMessage
func NewGripperCommand_FeedbackMessagePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GripperCommand_FeedbackMessagePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GripperCommand_FeedbackMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GripperCommand_FeedbackMessagePublisher{pub}, nil
}

func (p *GripperCommand_FeedbackMessagePublisher) Publish(msg *GripperCommand_FeedbackMessage) error {
	return p.Publisher.Publish(msg)
}

// GripperCommand_FeedbackMessageSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GripperCommand_FeedbackMessageSubscription struct {
	*rclgo.Subscription
}

// GripperCommand_FeedbackMessageSubscriptionCallback type is used to provide a subscription
// handler function for a GripperCommand_FeedbackMessageSubscription.
type GripperCommand_FeedbackMessageSubscriptionCallback func(msg *GripperCommand_FeedbackMessage, info *rclgo.MessageInfo, err error)

// NewGripperCommand_FeedbackMessageSubscription creates and returns a new subscription for the
// GripperCommand_FeedbackMessage
func NewGripperCommand_FeedbackMessageSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GripperCommand_FeedbackMessageSubscriptionCallback) (*GripperCommand_FeedbackMessageSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GripperCommand_FeedbackMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GripperCommand_FeedbackMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GripperCommand_FeedbackMessageSubscription{sub}, nil
}

func (s *GripperCommand_FeedbackMessageSubscription) TakeMessage(out *GripperCommand_FeedbackMessage) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGripperCommand_FeedbackMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGripperCommand_FeedbackMessageSlice(dst, src []GripperCommand_FeedbackMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GripperCommand_FeedbackMessageTypeSupport types.MessageTypeSupport = _GripperCommand_FeedbackMessageTypeSupport{}

type _GripperCommand_FeedbackMessageTypeSupport struct{}

func (t _GripperCommand_FeedbackMessageTypeSupport) New() types.Message {
	return NewGripperCommand_FeedbackMessage()
}

func (t _GripperCommand_FeedbackMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__GripperCommand_FeedbackMessage
	return (unsafe.Pointer)(C.control_msgs__action__GripperCommand_FeedbackMessage__create())
}

func (t _GripperCommand_FeedbackMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__GripperCommand_FeedbackMessage__destroy((*C.control_msgs__action__GripperCommand_FeedbackMessage)(pointer_to_free))
}

func (t _GripperCommand_FeedbackMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GripperCommand_FeedbackMessage)
	mem := (*C.control_msgs__action__GripperCommand_FeedbackMessage)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_id), &m.GoalID)
	GripperCommand_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&mem.feedback), &m.Feedback)
}

func (t _GripperCommand_FeedbackMessageTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GripperCommand_FeedbackMessage)
	mem := (*C.control_msgs__action__GripperCommand_FeedbackMessage)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.GoalID, unsafe.Pointer(&mem.goal_id))
	GripperCommand_FeedbackTypeSupport.AsGoStruct(&m.Feedback, unsafe.Pointer(&mem.feedback))
}

func (t _GripperCommand_FeedbackMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__GripperCommand_FeedbackMessage())
}

type CGripperCommand_FeedbackMessage = C.control_msgs__action__GripperCommand_FeedbackMessage
type CGripperCommand_FeedbackMessage__Sequence = C.control_msgs__action__GripperCommand_FeedbackMessage__Sequence

func GripperCommand_FeedbackMessage__Sequence_to_Go(goSlice *[]GripperCommand_FeedbackMessage, cSlice CGripperCommand_FeedbackMessage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GripperCommand_FeedbackMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GripperCommand_FeedbackMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GripperCommand_FeedbackMessage__Sequence_to_C(cSlice *CGripperCommand_FeedbackMessage__Sequence, goSlice []GripperCommand_FeedbackMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__GripperCommand_FeedbackMessage)(C.malloc(C.sizeof_struct_control_msgs__action__GripperCommand_FeedbackMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GripperCommand_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GripperCommand_FeedbackMessage__Array_to_Go(goSlice []GripperCommand_FeedbackMessage, cSlice []CGripperCommand_FeedbackMessage) {
	for i := 0; i < len(cSlice); i++ {
		GripperCommand_FeedbackMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GripperCommand_FeedbackMessage__Array_to_C(cSlice []CGripperCommand_FeedbackMessage, goSlice []GripperCommand_FeedbackMessage) {
	for i := 0; i < len(goSlice); i++ {
		GripperCommand_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
