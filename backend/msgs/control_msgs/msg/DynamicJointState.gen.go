// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/dynamic_joint_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/DynamicJointState", DynamicJointStateTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/DynamicJointState", DynamicJointStateTypeSupport)
}

type DynamicJointState struct {
	Header std_msgs_msg.Header `yaml:"header"`
	JointNames []string `yaml:"joint_names"`// List of resource names, e.g. ["arm_joint_1", "arm_joint_2", "gripper_joint"]
	InterfaceValues []InterfaceValue `yaml:"interface_values"`// Key-value pairs representing interfaces and their corresponding values for each joint listed in `joint_names`
}

// NewDynamicJointState creates a new DynamicJointState with default values.
func NewDynamicJointState() *DynamicJointState {
	self := DynamicJointState{}
	self.SetDefaults()
	return &self
}

func (t *DynamicJointState) Clone() *DynamicJointState {
	c := &DynamicJointState{}
	c.Header = *t.Header.Clone()
	if t.JointNames != nil {
		c.JointNames = make([]string, len(t.JointNames))
		copy(c.JointNames, t.JointNames)
	}
	if t.InterfaceValues != nil {
		c.InterfaceValues = make([]InterfaceValue, len(t.InterfaceValues))
		CloneInterfaceValueSlice(c.InterfaceValues, t.InterfaceValues)
	}
	return c
}

func (t *DynamicJointState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DynamicJointState) SetDefaults() {
	t.Header.SetDefaults()
	t.JointNames = nil
	t.InterfaceValues = nil
}

func (t *DynamicJointState) GetTypeSupport() types.MessageTypeSupport {
	return DynamicJointStateTypeSupport
}

// DynamicJointStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DynamicJointStatePublisher struct {
	*rclgo.Publisher
}

// NewDynamicJointStatePublisher creates and returns a new publisher for the
// DynamicJointState
func NewDynamicJointStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DynamicJointStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, DynamicJointStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DynamicJointStatePublisher{pub}, nil
}

func (p *DynamicJointStatePublisher) Publish(msg *DynamicJointState) error {
	return p.Publisher.Publish(msg)
}

// DynamicJointStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DynamicJointStateSubscription struct {
	*rclgo.Subscription
}

// DynamicJointStateSubscriptionCallback type is used to provide a subscription
// handler function for a DynamicJointStateSubscription.
type DynamicJointStateSubscriptionCallback func(msg *DynamicJointState, info *rclgo.MessageInfo, err error)

// NewDynamicJointStateSubscription creates and returns a new subscription for the
// DynamicJointState
func NewDynamicJointStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DynamicJointStateSubscriptionCallback) (*DynamicJointStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DynamicJointState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DynamicJointStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DynamicJointStateSubscription{sub}, nil
}

func (s *DynamicJointStateSubscription) TakeMessage(out *DynamicJointState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDynamicJointStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDynamicJointStateSlice(dst, src []DynamicJointState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DynamicJointStateTypeSupport types.MessageTypeSupport = _DynamicJointStateTypeSupport{}

type _DynamicJointStateTypeSupport struct{}

func (t _DynamicJointStateTypeSupport) New() types.Message {
	return NewDynamicJointState()
}

func (t _DynamicJointStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__DynamicJointState
	return (unsafe.Pointer)(C.control_msgs__msg__DynamicJointState__create())
}

func (t _DynamicJointStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__DynamicJointState__destroy((*C.control_msgs__msg__DynamicJointState)(pointer_to_free))
}

func (t _DynamicJointStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DynamicJointState)
	mem := (*C.control_msgs__msg__DynamicJointState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)), m.JointNames)
	InterfaceValue__Sequence_to_C(&mem.interface_values, m.InterfaceValues)
}

func (t _DynamicJointStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DynamicJointState)
	mem := (*C.control_msgs__msg__DynamicJointState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.JointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)))
	InterfaceValue__Sequence_to_Go(&m.InterfaceValues, mem.interface_values)
}

func (t _DynamicJointStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__DynamicJointState())
}

type CDynamicJointState = C.control_msgs__msg__DynamicJointState
type CDynamicJointState__Sequence = C.control_msgs__msg__DynamicJointState__Sequence

func DynamicJointState__Sequence_to_Go(goSlice *[]DynamicJointState, cSlice CDynamicJointState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DynamicJointState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DynamicJointStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DynamicJointState__Sequence_to_C(cSlice *CDynamicJointState__Sequence, goSlice []DynamicJointState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__DynamicJointState)(C.malloc(C.sizeof_struct_control_msgs__msg__DynamicJointState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DynamicJointStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DynamicJointState__Array_to_Go(goSlice []DynamicJointState, cSlice []CDynamicJointState) {
	for i := 0; i < len(cSlice); i++ {
		DynamicJointStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DynamicJointState__Array_to_C(cSlice []CDynamicJointState, goSlice []DynamicJointState) {
	for i := 0; i < len(goSlice); i++ {
		DynamicJointStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
