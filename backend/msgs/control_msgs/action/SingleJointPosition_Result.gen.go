// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/single_joint_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/SingleJointPosition_Result", SingleJointPosition_ResultTypeSupport)
	typemap.RegisterMessage("control_msgs/action/SingleJointPosition_Result", SingleJointPosition_ResultTypeSupport)
}

type SingleJointPosition_Result struct {
}

// NewSingleJointPosition_Result creates a new SingleJointPosition_Result with default values.
func NewSingleJointPosition_Result() *SingleJointPosition_Result {
	self := SingleJointPosition_Result{}
	self.SetDefaults()
	return &self
}

func (t *SingleJointPosition_Result) Clone() *SingleJointPosition_Result {
	c := &SingleJointPosition_Result{}
	return c
}

func (t *SingleJointPosition_Result) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SingleJointPosition_Result) SetDefaults() {
}

func (t *SingleJointPosition_Result) GetTypeSupport() types.MessageTypeSupport {
	return SingleJointPosition_ResultTypeSupport
}

// SingleJointPosition_ResultPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SingleJointPosition_ResultPublisher struct {
	*rclgo.Publisher
}

// NewSingleJointPosition_ResultPublisher creates and returns a new publisher for the
// SingleJointPosition_Result
func NewSingleJointPosition_ResultPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SingleJointPosition_ResultPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SingleJointPosition_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SingleJointPosition_ResultPublisher{pub}, nil
}

func (p *SingleJointPosition_ResultPublisher) Publish(msg *SingleJointPosition_Result) error {
	return p.Publisher.Publish(msg)
}

// SingleJointPosition_ResultSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SingleJointPosition_ResultSubscription struct {
	*rclgo.Subscription
}

// SingleJointPosition_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a SingleJointPosition_ResultSubscription.
type SingleJointPosition_ResultSubscriptionCallback func(msg *SingleJointPosition_Result, info *rclgo.MessageInfo, err error)

// NewSingleJointPosition_ResultSubscription creates and returns a new subscription for the
// SingleJointPosition_Result
func NewSingleJointPosition_ResultSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SingleJointPosition_ResultSubscriptionCallback) (*SingleJointPosition_ResultSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SingleJointPosition_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SingleJointPosition_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SingleJointPosition_ResultSubscription{sub}, nil
}

func (s *SingleJointPosition_ResultSubscription) TakeMessage(out *SingleJointPosition_Result) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSingleJointPosition_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSingleJointPosition_ResultSlice(dst, src []SingleJointPosition_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SingleJointPosition_ResultTypeSupport types.MessageTypeSupport = _SingleJointPosition_ResultTypeSupport{}

type _SingleJointPosition_ResultTypeSupport struct{}

func (t _SingleJointPosition_ResultTypeSupport) New() types.Message {
	return NewSingleJointPosition_Result()
}

func (t _SingleJointPosition_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__SingleJointPosition_Result
	return (unsafe.Pointer)(C.control_msgs__action__SingleJointPosition_Result__create())
}

func (t _SingleJointPosition_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__SingleJointPosition_Result__destroy((*C.control_msgs__action__SingleJointPosition_Result)(pointer_to_free))
}

func (t _SingleJointPosition_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _SingleJointPosition_ResultTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _SingleJointPosition_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__SingleJointPosition_Result())
}

type CSingleJointPosition_Result = C.control_msgs__action__SingleJointPosition_Result
type CSingleJointPosition_Result__Sequence = C.control_msgs__action__SingleJointPosition_Result__Sequence

func SingleJointPosition_Result__Sequence_to_Go(goSlice *[]SingleJointPosition_Result, cSlice CSingleJointPosition_Result__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SingleJointPosition_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SingleJointPosition_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SingleJointPosition_Result__Sequence_to_C(cSlice *CSingleJointPosition_Result__Sequence, goSlice []SingleJointPosition_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__SingleJointPosition_Result)(C.malloc(C.sizeof_struct_control_msgs__action__SingleJointPosition_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SingleJointPosition_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SingleJointPosition_Result__Array_to_Go(goSlice []SingleJointPosition_Result, cSlice []CSingleJointPosition_Result) {
	for i := 0; i < len(cSlice); i++ {
		SingleJointPosition_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SingleJointPosition_Result__Array_to_C(cSlice []CSingleJointPosition_Result, goSlice []SingleJointPosition_Result) {
	for i := 0; i < len(goSlice); i++ {
		SingleJointPosition_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
