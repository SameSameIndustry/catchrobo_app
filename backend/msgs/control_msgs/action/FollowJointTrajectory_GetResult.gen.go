// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/follow_joint_trajectory.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("control_msgs/FollowJointTrajectory_GetResult", FollowJointTrajectory_GetResultTypeSupport)
	typemap.RegisterService("control_msgs/action/FollowJointTrajectory_GetResult", FollowJointTrajectory_GetResultTypeSupport)
}

type _FollowJointTrajectory_GetResultTypeSupport struct {}

func (s _FollowJointTrajectory_GetResultTypeSupport) Request() types.MessageTypeSupport {
	return FollowJointTrajectory_GetResult_RequestTypeSupport
}

func (s _FollowJointTrajectory_GetResultTypeSupport) Response() types.MessageTypeSupport {
	return FollowJointTrajectory_GetResult_ResponseTypeSupport
}

func (s _FollowJointTrajectory_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__control_msgs__action__FollowJointTrajectory_GetResult())
}

// Modifying this variable is undefined behavior.
var FollowJointTrajectory_GetResultTypeSupport types.ServiceTypeSupport = _FollowJointTrajectory_GetResultTypeSupport{}

// FollowJointTrajectory_GetResultClient wraps rclgo.Client to provide type safe helper
// functions
type FollowJointTrajectory_GetResultClient struct {
	*rclgo.Client
}

// NewFollowJointTrajectory_GetResultClient creates and returns a new client for the
// FollowJointTrajectory_GetResult
func NewFollowJointTrajectory_GetResultClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*FollowJointTrajectory_GetResultClient, error) {
	client, err := node.NewClient(serviceName, FollowJointTrajectory_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowJointTrajectory_GetResultClient{client}, nil
}

func (s *FollowJointTrajectory_GetResultClient) Send(ctx context.Context, req *FollowJointTrajectory_GetResult_Request) (*FollowJointTrajectory_GetResult_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*FollowJointTrajectory_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type FollowJointTrajectory_GetResultServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s FollowJointTrajectory_GetResultServiceResponseSender) SendResponse(resp *FollowJointTrajectory_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type FollowJointTrajectory_GetResultServiceRequestHandler func(*rclgo.ServiceInfo, *FollowJointTrajectory_GetResult_Request, FollowJointTrajectory_GetResultServiceResponseSender)

// FollowJointTrajectory_GetResultService wraps rclgo.Service to provide type safe helper
// functions
type FollowJointTrajectory_GetResultService struct {
	*rclgo.Service
}

// NewFollowJointTrajectory_GetResultService creates and returns a new service for the
// FollowJointTrajectory_GetResult
func NewFollowJointTrajectory_GetResultService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler FollowJointTrajectory_GetResultServiceRequestHandler) (*FollowJointTrajectory_GetResultService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*FollowJointTrajectory_GetResult_Request)
		responseSender := FollowJointTrajectory_GetResultServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, FollowJointTrajectory_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &FollowJointTrajectory_GetResultService{service}, nil
}