// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/point_head.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/PointHead_Feedback", PointHead_FeedbackTypeSupport)
	typemap.RegisterMessage("control_msgs/action/PointHead_Feedback", PointHead_FeedbackTypeSupport)
}

type PointHead_Feedback struct {
	PointingAngleError float64 `yaml:"pointing_angle_error"`
}

// NewPointHead_Feedback creates a new PointHead_Feedback with default values.
func NewPointHead_Feedback() *PointHead_Feedback {
	self := PointHead_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *PointHead_Feedback) Clone() *PointHead_Feedback {
	c := &PointHead_Feedback{}
	c.PointingAngleError = t.PointingAngleError
	return c
}

func (t *PointHead_Feedback) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PointHead_Feedback) SetDefaults() {
	t.PointingAngleError = 0
}

func (t *PointHead_Feedback) GetTypeSupport() types.MessageTypeSupport {
	return PointHead_FeedbackTypeSupport
}

// PointHead_FeedbackPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PointHead_FeedbackPublisher struct {
	*rclgo.Publisher
}

// NewPointHead_FeedbackPublisher creates and returns a new publisher for the
// PointHead_Feedback
func NewPointHead_FeedbackPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PointHead_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PointHead_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointHead_FeedbackPublisher{pub}, nil
}

func (p *PointHead_FeedbackPublisher) Publish(msg *PointHead_Feedback) error {
	return p.Publisher.Publish(msg)
}

// PointHead_FeedbackSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PointHead_FeedbackSubscription struct {
	*rclgo.Subscription
}

// PointHead_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a PointHead_FeedbackSubscription.
type PointHead_FeedbackSubscriptionCallback func(msg *PointHead_Feedback, info *rclgo.MessageInfo, err error)

// NewPointHead_FeedbackSubscription creates and returns a new subscription for the
// PointHead_Feedback
func NewPointHead_FeedbackSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PointHead_FeedbackSubscriptionCallback) (*PointHead_FeedbackSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PointHead_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PointHead_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PointHead_FeedbackSubscription{sub}, nil
}

func (s *PointHead_FeedbackSubscription) TakeMessage(out *PointHead_Feedback) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePointHead_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePointHead_FeedbackSlice(dst, src []PointHead_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PointHead_FeedbackTypeSupport types.MessageTypeSupport = _PointHead_FeedbackTypeSupport{}

type _PointHead_FeedbackTypeSupport struct{}

func (t _PointHead_FeedbackTypeSupport) New() types.Message {
	return NewPointHead_Feedback()
}

func (t _PointHead_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__PointHead_Feedback
	return (unsafe.Pointer)(C.control_msgs__action__PointHead_Feedback__create())
}

func (t _PointHead_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__PointHead_Feedback__destroy((*C.control_msgs__action__PointHead_Feedback)(pointer_to_free))
}

func (t _PointHead_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PointHead_Feedback)
	mem := (*C.control_msgs__action__PointHead_Feedback)(dst)
	mem.pointing_angle_error = C.double(m.PointingAngleError)
}

func (t _PointHead_FeedbackTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PointHead_Feedback)
	mem := (*C.control_msgs__action__PointHead_Feedback)(ros2_message_buffer)
	m.PointingAngleError = float64(mem.pointing_angle_error)
}

func (t _PointHead_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__PointHead_Feedback())
}

type CPointHead_Feedback = C.control_msgs__action__PointHead_Feedback
type CPointHead_Feedback__Sequence = C.control_msgs__action__PointHead_Feedback__Sequence

func PointHead_Feedback__Sequence_to_Go(goSlice *[]PointHead_Feedback, cSlice CPointHead_Feedback__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointHead_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PointHead_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PointHead_Feedback__Sequence_to_C(cSlice *CPointHead_Feedback__Sequence, goSlice []PointHead_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__PointHead_Feedback)(C.malloc(C.sizeof_struct_control_msgs__action__PointHead_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PointHead_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PointHead_Feedback__Array_to_Go(goSlice []PointHead_Feedback, cSlice []CPointHead_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		PointHead_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PointHead_Feedback__Array_to_C(cSlice []CPointHead_Feedback, goSlice []PointHead_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		PointHead_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
