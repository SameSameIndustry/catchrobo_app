// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	lifecycle_msgs_msg "msgs/lifecycle_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/msg/hardware_component_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/HardwareComponentState", HardwareComponentStateTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/msg/HardwareComponentState", HardwareComponentStateTypeSupport)
}

type HardwareComponentState struct {
	Name string `yaml:"name"`
	Type string `yaml:"type"`
	ClassType string `yaml:"class_type"`
	State lifecycle_msgs_msg.State `yaml:"state"`
	CommandInterfaces []HardwareInterface `yaml:"command_interfaces"`
	StateInterfaces []HardwareInterface `yaml:"state_interfaces"`
}

// NewHardwareComponentState creates a new HardwareComponentState with default values.
func NewHardwareComponentState() *HardwareComponentState {
	self := HardwareComponentState{}
	self.SetDefaults()
	return &self
}

func (t *HardwareComponentState) Clone() *HardwareComponentState {
	c := &HardwareComponentState{}
	c.Name = t.Name
	c.Type = t.Type
	c.ClassType = t.ClassType
	c.State = *t.State.Clone()
	if t.CommandInterfaces != nil {
		c.CommandInterfaces = make([]HardwareInterface, len(t.CommandInterfaces))
		CloneHardwareInterfaceSlice(c.CommandInterfaces, t.CommandInterfaces)
	}
	if t.StateInterfaces != nil {
		c.StateInterfaces = make([]HardwareInterface, len(t.StateInterfaces))
		CloneHardwareInterfaceSlice(c.StateInterfaces, t.StateInterfaces)
	}
	return c
}

func (t *HardwareComponentState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HardwareComponentState) SetDefaults() {
	t.Name = ""
	t.Type = ""
	t.ClassType = ""
	t.State.SetDefaults()
	t.CommandInterfaces = nil
	t.StateInterfaces = nil
}

func (t *HardwareComponentState) GetTypeSupport() types.MessageTypeSupport {
	return HardwareComponentStateTypeSupport
}

// HardwareComponentStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HardwareComponentStatePublisher struct {
	*rclgo.Publisher
}

// NewHardwareComponentStatePublisher creates and returns a new publisher for the
// HardwareComponentState
func NewHardwareComponentStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HardwareComponentStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, HardwareComponentStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HardwareComponentStatePublisher{pub}, nil
}

func (p *HardwareComponentStatePublisher) Publish(msg *HardwareComponentState) error {
	return p.Publisher.Publish(msg)
}

// HardwareComponentStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HardwareComponentStateSubscription struct {
	*rclgo.Subscription
}

// HardwareComponentStateSubscriptionCallback type is used to provide a subscription
// handler function for a HardwareComponentStateSubscription.
type HardwareComponentStateSubscriptionCallback func(msg *HardwareComponentState, info *rclgo.MessageInfo, err error)

// NewHardwareComponentStateSubscription creates and returns a new subscription for the
// HardwareComponentState
func NewHardwareComponentStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HardwareComponentStateSubscriptionCallback) (*HardwareComponentStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HardwareComponentState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HardwareComponentStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HardwareComponentStateSubscription{sub}, nil
}

func (s *HardwareComponentStateSubscription) TakeMessage(out *HardwareComponentState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHardwareComponentStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHardwareComponentStateSlice(dst, src []HardwareComponentState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HardwareComponentStateTypeSupport types.MessageTypeSupport = _HardwareComponentStateTypeSupport{}

type _HardwareComponentStateTypeSupport struct{}

func (t _HardwareComponentStateTypeSupport) New() types.Message {
	return NewHardwareComponentState()
}

func (t _HardwareComponentStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__msg__HardwareComponentState
	return (unsafe.Pointer)(C.controller_manager_msgs__msg__HardwareComponentState__create())
}

func (t _HardwareComponentStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__msg__HardwareComponentState__destroy((*C.controller_manager_msgs__msg__HardwareComponentState)(pointer_to_free))
}

func (t _HardwareComponentStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HardwareComponentState)
	mem := (*C.controller_manager_msgs__msg__HardwareComponentState)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	primitives.StringAsCStruct(unsafe.Pointer(&mem._type), m.Type)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.class_type), m.ClassType)
	lifecycle_msgs_msg.StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.state), &m.State)
	HardwareInterface__Sequence_to_C(&mem.command_interfaces, m.CommandInterfaces)
	HardwareInterface__Sequence_to_C(&mem.state_interfaces, m.StateInterfaces)
}

func (t _HardwareComponentStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HardwareComponentState)
	mem := (*C.controller_manager_msgs__msg__HardwareComponentState)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	primitives.StringAsGoStruct(&m.Type, unsafe.Pointer(&mem._type))
	primitives.StringAsGoStruct(&m.ClassType, unsafe.Pointer(&mem.class_type))
	lifecycle_msgs_msg.StateTypeSupport.AsGoStruct(&m.State, unsafe.Pointer(&mem.state))
	HardwareInterface__Sequence_to_Go(&m.CommandInterfaces, mem.command_interfaces)
	HardwareInterface__Sequence_to_Go(&m.StateInterfaces, mem.state_interfaces)
}

func (t _HardwareComponentStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__msg__HardwareComponentState())
}

type CHardwareComponentState = C.controller_manager_msgs__msg__HardwareComponentState
type CHardwareComponentState__Sequence = C.controller_manager_msgs__msg__HardwareComponentState__Sequence

func HardwareComponentState__Sequence_to_Go(goSlice *[]HardwareComponentState, cSlice CHardwareComponentState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HardwareComponentState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HardwareComponentStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HardwareComponentState__Sequence_to_C(cSlice *CHardwareComponentState__Sequence, goSlice []HardwareComponentState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__msg__HardwareComponentState)(C.malloc(C.sizeof_struct_controller_manager_msgs__msg__HardwareComponentState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HardwareComponentStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HardwareComponentState__Array_to_Go(goSlice []HardwareComponentState, cSlice []CHardwareComponentState) {
	for i := 0; i < len(cSlice); i++ {
		HardwareComponentStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HardwareComponentState__Array_to_C(cSlice []CHardwareComponentState, goSlice []HardwareComponentState) {
	for i := 0; i < len(goSlice); i++ {
		HardwareComponentStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
