// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <controller_manager_msgs/srv/list_controller_types.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("controller_manager_msgs/ListControllerTypes", ListControllerTypesTypeSupport)
	typemap.RegisterService("controller_manager_msgs/srv/ListControllerTypes", ListControllerTypesTypeSupport)
}

type _ListControllerTypesTypeSupport struct {}

func (s _ListControllerTypesTypeSupport) Request() types.MessageTypeSupport {
	return ListControllerTypes_RequestTypeSupport
}

func (s _ListControllerTypesTypeSupport) Response() types.MessageTypeSupport {
	return ListControllerTypes_ResponseTypeSupport
}

func (s _ListControllerTypesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__controller_manager_msgs__srv__ListControllerTypes())
}

// Modifying this variable is undefined behavior.
var ListControllerTypesTypeSupport types.ServiceTypeSupport = _ListControllerTypesTypeSupport{}

// ListControllerTypesClient wraps rclgo.Client to provide type safe helper
// functions
type ListControllerTypesClient struct {
	*rclgo.Client
}

// NewListControllerTypesClient creates and returns a new client for the
// ListControllerTypes
func NewListControllerTypesClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ListControllerTypesClient, error) {
	client, err := node.NewClient(serviceName, ListControllerTypesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListControllerTypesClient{client}, nil
}

func (s *ListControllerTypesClient) Send(ctx context.Context, req *ListControllerTypes_Request) (*ListControllerTypes_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ListControllerTypes_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ListControllerTypesServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ListControllerTypesServiceResponseSender) SendResponse(resp *ListControllerTypes_Response) error {
	return s.sender.SendResponse(resp)
}

type ListControllerTypesServiceRequestHandler func(*rclgo.ServiceInfo, *ListControllerTypes_Request, ListControllerTypesServiceResponseSender)

// ListControllerTypesService wraps rclgo.Service to provide type safe helper
// functions
type ListControllerTypesService struct {
	*rclgo.Service
}

// NewListControllerTypesService creates and returns a new service for the
// ListControllerTypes
func NewListControllerTypesService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ListControllerTypesServiceRequestHandler) (*ListControllerTypesService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ListControllerTypes_Request)
		responseSender := ListControllerTypesServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ListControllerTypesTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ListControllerTypesService{service}, nil
}