// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/point_head.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("control_msgs/PointHead_GetResult", PointHead_GetResultTypeSupport)
	typemap.RegisterService("control_msgs/action/PointHead_GetResult", PointHead_GetResultTypeSupport)
}

type _PointHead_GetResultTypeSupport struct {}

func (s _PointHead_GetResultTypeSupport) Request() types.MessageTypeSupport {
	return PointHead_GetResult_RequestTypeSupport
}

func (s _PointHead_GetResultTypeSupport) Response() types.MessageTypeSupport {
	return PointHead_GetResult_ResponseTypeSupport
}

func (s _PointHead_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__control_msgs__action__PointHead_GetResult())
}

// Modifying this variable is undefined behavior.
var PointHead_GetResultTypeSupport types.ServiceTypeSupport = _PointHead_GetResultTypeSupport{}

// PointHead_GetResultClient wraps rclgo.Client to provide type safe helper
// functions
type PointHead_GetResultClient struct {
	*rclgo.Client
}

// NewPointHead_GetResultClient creates and returns a new client for the
// PointHead_GetResult
func NewPointHead_GetResultClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*PointHead_GetResultClient, error) {
	client, err := node.NewClient(serviceName, PointHead_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointHead_GetResultClient{client}, nil
}

func (s *PointHead_GetResultClient) Send(ctx context.Context, req *PointHead_GetResult_Request) (*PointHead_GetResult_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*PointHead_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type PointHead_GetResultServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s PointHead_GetResultServiceResponseSender) SendResponse(resp *PointHead_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type PointHead_GetResultServiceRequestHandler func(*rclgo.ServiceInfo, *PointHead_GetResult_Request, PointHead_GetResultServiceResponseSender)

// PointHead_GetResultService wraps rclgo.Service to provide type safe helper
// functions
type PointHead_GetResultService struct {
	*rclgo.Service
}

// NewPointHead_GetResultService creates and returns a new service for the
// PointHead_GetResult
func NewPointHead_GetResultService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler PointHead_GetResultServiceRequestHandler) (*PointHead_GetResultService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*PointHead_GetResult_Request)
		responseSender := PointHead_GetResultServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, PointHead_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &PointHead_GetResultService{service}, nil
}