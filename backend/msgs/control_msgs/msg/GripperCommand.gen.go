// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/gripper_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/GripperCommand", GripperCommandTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/GripperCommand", GripperCommandTypeSupport)
}

type GripperCommand struct {
	Position float64 `yaml:"position"`
	MaxEffort float64 `yaml:"max_effort"`
}

// NewGripperCommand creates a new GripperCommand with default values.
func NewGripperCommand() *GripperCommand {
	self := GripperCommand{}
	self.SetDefaults()
	return &self
}

func (t *GripperCommand) Clone() *GripperCommand {
	c := &GripperCommand{}
	c.Position = t.Position
	c.MaxEffort = t.MaxEffort
	return c
}

func (t *GripperCommand) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GripperCommand) SetDefaults() {
	t.Position = 0
	t.MaxEffort = 0
}

func (t *GripperCommand) GetTypeSupport() types.MessageTypeSupport {
	return GripperCommandTypeSupport
}

// GripperCommandPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GripperCommandPublisher struct {
	*rclgo.Publisher
}

// NewGripperCommandPublisher creates and returns a new publisher for the
// GripperCommand
func NewGripperCommandPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GripperCommandPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GripperCommandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GripperCommandPublisher{pub}, nil
}

func (p *GripperCommandPublisher) Publish(msg *GripperCommand) error {
	return p.Publisher.Publish(msg)
}

// GripperCommandSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GripperCommandSubscription struct {
	*rclgo.Subscription
}

// GripperCommandSubscriptionCallback type is used to provide a subscription
// handler function for a GripperCommandSubscription.
type GripperCommandSubscriptionCallback func(msg *GripperCommand, info *rclgo.MessageInfo, err error)

// NewGripperCommandSubscription creates and returns a new subscription for the
// GripperCommand
func NewGripperCommandSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GripperCommandSubscriptionCallback) (*GripperCommandSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GripperCommand
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GripperCommandTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GripperCommandSubscription{sub}, nil
}

func (s *GripperCommandSubscription) TakeMessage(out *GripperCommand) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGripperCommandSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGripperCommandSlice(dst, src []GripperCommand) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GripperCommandTypeSupport types.MessageTypeSupport = _GripperCommandTypeSupport{}

type _GripperCommandTypeSupport struct{}

func (t _GripperCommandTypeSupport) New() types.Message {
	return NewGripperCommand()
}

func (t _GripperCommandTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__GripperCommand
	return (unsafe.Pointer)(C.control_msgs__msg__GripperCommand__create())
}

func (t _GripperCommandTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__GripperCommand__destroy((*C.control_msgs__msg__GripperCommand)(pointer_to_free))
}

func (t _GripperCommandTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GripperCommand)
	mem := (*C.control_msgs__msg__GripperCommand)(dst)
	mem.position = C.double(m.Position)
	mem.max_effort = C.double(m.MaxEffort)
}

func (t _GripperCommandTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GripperCommand)
	mem := (*C.control_msgs__msg__GripperCommand)(ros2_message_buffer)
	m.Position = float64(mem.position)
	m.MaxEffort = float64(mem.max_effort)
}

func (t _GripperCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__GripperCommand())
}

type CGripperCommand = C.control_msgs__msg__GripperCommand
type CGripperCommand__Sequence = C.control_msgs__msg__GripperCommand__Sequence

func GripperCommand__Sequence_to_Go(goSlice *[]GripperCommand, cSlice CGripperCommand__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GripperCommand, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GripperCommandTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GripperCommand__Sequence_to_C(cSlice *CGripperCommand__Sequence, goSlice []GripperCommand) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__GripperCommand)(C.malloc(C.sizeof_struct_control_msgs__msg__GripperCommand * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GripperCommandTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GripperCommand__Array_to_Go(goSlice []GripperCommand, cSlice []CGripperCommand) {
	for i := 0; i < len(cSlice); i++ {
		GripperCommandTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GripperCommand__Array_to_C(cSlice []CGripperCommand, goSlice []GripperCommand) {
	for i := 0; i < len(goSlice); i++ {
		GripperCommandTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
