// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/interface_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/InterfaceValue", InterfaceValueTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/InterfaceValue", InterfaceValueTypeSupport)
}

type InterfaceValue struct {
	InterfaceNames []string `yaml:"interface_names"`// List of resource interface names
	Values []float64 `yaml:"values"`// Values corresponding to the list of interfaces in `interface_names`, [1.0, 0.0] for example
}

// NewInterfaceValue creates a new InterfaceValue with default values.
func NewInterfaceValue() *InterfaceValue {
	self := InterfaceValue{}
	self.SetDefaults()
	return &self
}

func (t *InterfaceValue) Clone() *InterfaceValue {
	c := &InterfaceValue{}
	if t.InterfaceNames != nil {
		c.InterfaceNames = make([]string, len(t.InterfaceNames))
		copy(c.InterfaceNames, t.InterfaceNames)
	}
	if t.Values != nil {
		c.Values = make([]float64, len(t.Values))
		copy(c.Values, t.Values)
	}
	return c
}

func (t *InterfaceValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *InterfaceValue) SetDefaults() {
	t.InterfaceNames = nil
	t.Values = nil
}

func (t *InterfaceValue) GetTypeSupport() types.MessageTypeSupport {
	return InterfaceValueTypeSupport
}

// InterfaceValuePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type InterfaceValuePublisher struct {
	*rclgo.Publisher
}

// NewInterfaceValuePublisher creates and returns a new publisher for the
// InterfaceValue
func NewInterfaceValuePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*InterfaceValuePublisher, error) {
	pub, err := node.NewPublisher(topic_name, InterfaceValueTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &InterfaceValuePublisher{pub}, nil
}

func (p *InterfaceValuePublisher) Publish(msg *InterfaceValue) error {
	return p.Publisher.Publish(msg)
}

// InterfaceValueSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type InterfaceValueSubscription struct {
	*rclgo.Subscription
}

// InterfaceValueSubscriptionCallback type is used to provide a subscription
// handler function for a InterfaceValueSubscription.
type InterfaceValueSubscriptionCallback func(msg *InterfaceValue, info *rclgo.MessageInfo, err error)

// NewInterfaceValueSubscription creates and returns a new subscription for the
// InterfaceValue
func NewInterfaceValueSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback InterfaceValueSubscriptionCallback) (*InterfaceValueSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg InterfaceValue
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, InterfaceValueTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &InterfaceValueSubscription{sub}, nil
}

func (s *InterfaceValueSubscription) TakeMessage(out *InterfaceValue) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneInterfaceValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneInterfaceValueSlice(dst, src []InterfaceValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var InterfaceValueTypeSupport types.MessageTypeSupport = _InterfaceValueTypeSupport{}

type _InterfaceValueTypeSupport struct{}

func (t _InterfaceValueTypeSupport) New() types.Message {
	return NewInterfaceValue()
}

func (t _InterfaceValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__InterfaceValue
	return (unsafe.Pointer)(C.control_msgs__msg__InterfaceValue__create())
}

func (t _InterfaceValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__InterfaceValue__destroy((*C.control_msgs__msg__InterfaceValue)(pointer_to_free))
}

func (t _InterfaceValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*InterfaceValue)
	mem := (*C.control_msgs__msg__InterfaceValue)(dst)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.interface_names)), m.InterfaceNames)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.values)), m.Values)
}

func (t _InterfaceValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*InterfaceValue)
	mem := (*C.control_msgs__msg__InterfaceValue)(ros2_message_buffer)
	primitives.String__Sequence_to_Go(&m.InterfaceNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.interface_names)))
	primitives.Float64__Sequence_to_Go(&m.Values, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.values)))
}

func (t _InterfaceValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__InterfaceValue())
}

type CInterfaceValue = C.control_msgs__msg__InterfaceValue
type CInterfaceValue__Sequence = C.control_msgs__msg__InterfaceValue__Sequence

func InterfaceValue__Sequence_to_Go(goSlice *[]InterfaceValue, cSlice CInterfaceValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]InterfaceValue, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		InterfaceValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func InterfaceValue__Sequence_to_C(cSlice *CInterfaceValue__Sequence, goSlice []InterfaceValue) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__InterfaceValue)(C.malloc(C.sizeof_struct_control_msgs__msg__InterfaceValue * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		InterfaceValueTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func InterfaceValue__Array_to_Go(goSlice []InterfaceValue, cSlice []CInterfaceValue) {
	for i := 0; i < len(cSlice); i++ {
		InterfaceValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func InterfaceValue__Array_to_C(cSlice []CInterfaceValue, goSlice []InterfaceValue) {
	for i := 0; i < len(goSlice); i++ {
		InterfaceValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
