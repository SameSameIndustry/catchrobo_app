// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/joint_component_tolerance.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/JointComponentTolerance", JointComponentToleranceTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/JointComponentTolerance", JointComponentToleranceTypeSupport)
}
const (
	JointComponentTolerance_X_AXIS uint16 = 1
	JointComponentTolerance_Y_AXIS uint16 = 2
	JointComponentTolerance_Z_AXIS uint16 = 3
	JointComponentTolerance_TRANSLATION uint16 = 4
	JointComponentTolerance_ROTATION uint16 = 5
)

type JointComponentTolerance struct {
	JointName string `yaml:"joint_name"`
	Component uint16 `yaml:"component"`
	Position float64 `yaml:"position"`
	Velocity float64 `yaml:"velocity"`
	Acceleration float64 `yaml:"acceleration"`
}

// NewJointComponentTolerance creates a new JointComponentTolerance with default values.
func NewJointComponentTolerance() *JointComponentTolerance {
	self := JointComponentTolerance{}
	self.SetDefaults()
	return &self
}

func (t *JointComponentTolerance) Clone() *JointComponentTolerance {
	c := &JointComponentTolerance{}
	c.JointName = t.JointName
	c.Component = t.Component
	c.Position = t.Position
	c.Velocity = t.Velocity
	c.Acceleration = t.Acceleration
	return c
}

func (t *JointComponentTolerance) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointComponentTolerance) SetDefaults() {
	t.JointName = ""
	t.Component = 0
	t.Position = 0
	t.Velocity = 0
	t.Acceleration = 0
}

func (t *JointComponentTolerance) GetTypeSupport() types.MessageTypeSupport {
	return JointComponentToleranceTypeSupport
}

// JointComponentTolerancePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointComponentTolerancePublisher struct {
	*rclgo.Publisher
}

// NewJointComponentTolerancePublisher creates and returns a new publisher for the
// JointComponentTolerance
func NewJointComponentTolerancePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointComponentTolerancePublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointComponentToleranceTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointComponentTolerancePublisher{pub}, nil
}

func (p *JointComponentTolerancePublisher) Publish(msg *JointComponentTolerance) error {
	return p.Publisher.Publish(msg)
}

// JointComponentToleranceSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointComponentToleranceSubscription struct {
	*rclgo.Subscription
}

// JointComponentToleranceSubscriptionCallback type is used to provide a subscription
// handler function for a JointComponentToleranceSubscription.
type JointComponentToleranceSubscriptionCallback func(msg *JointComponentTolerance, info *rclgo.MessageInfo, err error)

// NewJointComponentToleranceSubscription creates and returns a new subscription for the
// JointComponentTolerance
func NewJointComponentToleranceSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointComponentToleranceSubscriptionCallback) (*JointComponentToleranceSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointComponentTolerance
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointComponentToleranceTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointComponentToleranceSubscription{sub}, nil
}

func (s *JointComponentToleranceSubscription) TakeMessage(out *JointComponentTolerance) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointComponentToleranceSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointComponentToleranceSlice(dst, src []JointComponentTolerance) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointComponentToleranceTypeSupport types.MessageTypeSupport = _JointComponentToleranceTypeSupport{}

type _JointComponentToleranceTypeSupport struct{}

func (t _JointComponentToleranceTypeSupport) New() types.Message {
	return NewJointComponentTolerance()
}

func (t _JointComponentToleranceTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__JointComponentTolerance
	return (unsafe.Pointer)(C.control_msgs__msg__JointComponentTolerance__create())
}

func (t _JointComponentToleranceTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__JointComponentTolerance__destroy((*C.control_msgs__msg__JointComponentTolerance)(pointer_to_free))
}

func (t _JointComponentToleranceTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointComponentTolerance)
	mem := (*C.control_msgs__msg__JointComponentTolerance)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.joint_name), m.JointName)
	mem.component = C.uint16_t(m.Component)
	mem.position = C.double(m.Position)
	mem.velocity = C.double(m.Velocity)
	mem.acceleration = C.double(m.Acceleration)
}

func (t _JointComponentToleranceTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointComponentTolerance)
	mem := (*C.control_msgs__msg__JointComponentTolerance)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.JointName, unsafe.Pointer(&mem.joint_name))
	m.Component = uint16(mem.component)
	m.Position = float64(mem.position)
	m.Velocity = float64(mem.velocity)
	m.Acceleration = float64(mem.acceleration)
}

func (t _JointComponentToleranceTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointComponentTolerance())
}

type CJointComponentTolerance = C.control_msgs__msg__JointComponentTolerance
type CJointComponentTolerance__Sequence = C.control_msgs__msg__JointComponentTolerance__Sequence

func JointComponentTolerance__Sequence_to_Go(goSlice *[]JointComponentTolerance, cSlice CJointComponentTolerance__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointComponentTolerance, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointComponentToleranceTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointComponentTolerance__Sequence_to_C(cSlice *CJointComponentTolerance__Sequence, goSlice []JointComponentTolerance) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__JointComponentTolerance)(C.malloc(C.sizeof_struct_control_msgs__msg__JointComponentTolerance * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointComponentToleranceTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointComponentTolerance__Array_to_Go(goSlice []JointComponentTolerance, cSlice []CJointComponentTolerance) {
	for i := 0; i < len(cSlice); i++ {
		JointComponentToleranceTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointComponentTolerance__Array_to_C(cSlice []CJointComponentTolerance, goSlice []JointComponentTolerance) {
	for i := 0; i < len(goSlice); i++ {
		JointComponentToleranceTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
