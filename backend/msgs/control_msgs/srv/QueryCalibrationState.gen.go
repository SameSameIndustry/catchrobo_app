// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/srv/query_calibration_state.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("control_msgs/QueryCalibrationState", QueryCalibrationStateTypeSupport)
	typemap.RegisterService("control_msgs/srv/QueryCalibrationState", QueryCalibrationStateTypeSupport)
}

type _QueryCalibrationStateTypeSupport struct {}

func (s _QueryCalibrationStateTypeSupport) Request() types.MessageTypeSupport {
	return QueryCalibrationState_RequestTypeSupport
}

func (s _QueryCalibrationStateTypeSupport) Response() types.MessageTypeSupport {
	return QueryCalibrationState_ResponseTypeSupport
}

func (s _QueryCalibrationStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__control_msgs__srv__QueryCalibrationState())
}

// Modifying this variable is undefined behavior.
var QueryCalibrationStateTypeSupport types.ServiceTypeSupport = _QueryCalibrationStateTypeSupport{}

// QueryCalibrationStateClient wraps rclgo.Client to provide type safe helper
// functions
type QueryCalibrationStateClient struct {
	*rclgo.Client
}

// NewQueryCalibrationStateClient creates and returns a new client for the
// QueryCalibrationState
func NewQueryCalibrationStateClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*QueryCalibrationStateClient, error) {
	client, err := node.NewClient(serviceName, QueryCalibrationStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &QueryCalibrationStateClient{client}, nil
}

func (s *QueryCalibrationStateClient) Send(ctx context.Context, req *QueryCalibrationState_Request) (*QueryCalibrationState_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*QueryCalibrationState_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type QueryCalibrationStateServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s QueryCalibrationStateServiceResponseSender) SendResponse(resp *QueryCalibrationState_Response) error {
	return s.sender.SendResponse(resp)
}

type QueryCalibrationStateServiceRequestHandler func(*rclgo.ServiceInfo, *QueryCalibrationState_Request, QueryCalibrationStateServiceResponseSender)

// QueryCalibrationStateService wraps rclgo.Service to provide type safe helper
// functions
type QueryCalibrationStateService struct {
	*rclgo.Service
}

// NewQueryCalibrationStateService creates and returns a new service for the
// QueryCalibrationState
func NewQueryCalibrationStateService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler QueryCalibrationStateServiceRequestHandler) (*QueryCalibrationStateService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*QueryCalibrationState_Request)
		responseSender := QueryCalibrationStateServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, QueryCalibrationStateTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &QueryCalibrationStateService{service}, nil
}