// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	builtin_interfaces_msg "msgs/builtin_interfaces/msg"
	geometry_msgs_msg "msgs/geometry_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/point_head.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/PointHead_Goal", PointHead_GoalTypeSupport)
	typemap.RegisterMessage("control_msgs/action/PointHead_Goal", PointHead_GoalTypeSupport)
}

type PointHead_Goal struct {
	Target geometry_msgs_msg.PointStamped `yaml:"target"`
	PointingAxis geometry_msgs_msg.Vector3 `yaml:"pointing_axis"`
	PointingFrame string `yaml:"pointing_frame"`
	MinDuration builtin_interfaces_msg.Duration `yaml:"min_duration"`
	MaxVelocity float64 `yaml:"max_velocity"`
}

// NewPointHead_Goal creates a new PointHead_Goal with default values.
func NewPointHead_Goal() *PointHead_Goal {
	self := PointHead_Goal{}
	self.SetDefaults()
	return &self
}

func (t *PointHead_Goal) Clone() *PointHead_Goal {
	c := &PointHead_Goal{}
	c.Target = *t.Target.Clone()
	c.PointingAxis = *t.PointingAxis.Clone()
	c.PointingFrame = t.PointingFrame
	c.MinDuration = *t.MinDuration.Clone()
	c.MaxVelocity = t.MaxVelocity
	return c
}

func (t *PointHead_Goal) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PointHead_Goal) SetDefaults() {
	t.Target.SetDefaults()
	t.PointingAxis.SetDefaults()
	t.PointingFrame = ""
	t.MinDuration.SetDefaults()
	t.MaxVelocity = 0
}

func (t *PointHead_Goal) GetTypeSupport() types.MessageTypeSupport {
	return PointHead_GoalTypeSupport
}

// PointHead_GoalPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PointHead_GoalPublisher struct {
	*rclgo.Publisher
}

// NewPointHead_GoalPublisher creates and returns a new publisher for the
// PointHead_Goal
func NewPointHead_GoalPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PointHead_GoalPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PointHead_GoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointHead_GoalPublisher{pub}, nil
}

func (p *PointHead_GoalPublisher) Publish(msg *PointHead_Goal) error {
	return p.Publisher.Publish(msg)
}

// PointHead_GoalSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PointHead_GoalSubscription struct {
	*rclgo.Subscription
}

// PointHead_GoalSubscriptionCallback type is used to provide a subscription
// handler function for a PointHead_GoalSubscription.
type PointHead_GoalSubscriptionCallback func(msg *PointHead_Goal, info *rclgo.MessageInfo, err error)

// NewPointHead_GoalSubscription creates and returns a new subscription for the
// PointHead_Goal
func NewPointHead_GoalSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PointHead_GoalSubscriptionCallback) (*PointHead_GoalSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PointHead_Goal
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PointHead_GoalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PointHead_GoalSubscription{sub}, nil
}

func (s *PointHead_GoalSubscription) TakeMessage(out *PointHead_Goal) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePointHead_GoalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePointHead_GoalSlice(dst, src []PointHead_Goal) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PointHead_GoalTypeSupport types.MessageTypeSupport = _PointHead_GoalTypeSupport{}

type _PointHead_GoalTypeSupport struct{}

func (t _PointHead_GoalTypeSupport) New() types.Message {
	return NewPointHead_Goal()
}

func (t _PointHead_GoalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__PointHead_Goal
	return (unsafe.Pointer)(C.control_msgs__action__PointHead_Goal__create())
}

func (t _PointHead_GoalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__PointHead_Goal__destroy((*C.control_msgs__action__PointHead_Goal)(pointer_to_free))
}

func (t _PointHead_GoalTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PointHead_Goal)
	mem := (*C.control_msgs__action__PointHead_Goal)(dst)
	geometry_msgs_msg.PointStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.target), &m.Target)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.pointing_axis), &m.PointingAxis)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.pointing_frame), m.PointingFrame)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.min_duration), &m.MinDuration)
	mem.max_velocity = C.double(m.MaxVelocity)
}

func (t _PointHead_GoalTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PointHead_Goal)
	mem := (*C.control_msgs__action__PointHead_Goal)(ros2_message_buffer)
	geometry_msgs_msg.PointStampedTypeSupport.AsGoStruct(&m.Target, unsafe.Pointer(&mem.target))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.PointingAxis, unsafe.Pointer(&mem.pointing_axis))
	primitives.StringAsGoStruct(&m.PointingFrame, unsafe.Pointer(&mem.pointing_frame))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.MinDuration, unsafe.Pointer(&mem.min_duration))
	m.MaxVelocity = float64(mem.max_velocity)
}

func (t _PointHead_GoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__PointHead_Goal())
}

type CPointHead_Goal = C.control_msgs__action__PointHead_Goal
type CPointHead_Goal__Sequence = C.control_msgs__action__PointHead_Goal__Sequence

func PointHead_Goal__Sequence_to_Go(goSlice *[]PointHead_Goal, cSlice CPointHead_Goal__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointHead_Goal, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PointHead_GoalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PointHead_Goal__Sequence_to_C(cSlice *CPointHead_Goal__Sequence, goSlice []PointHead_Goal) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__PointHead_Goal)(C.malloc(C.sizeof_struct_control_msgs__action__PointHead_Goal * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PointHead_GoalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PointHead_Goal__Array_to_Go(goSlice []PointHead_Goal, cSlice []CPointHead_Goal) {
	for i := 0; i < len(cSlice); i++ {
		PointHead_GoalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PointHead_Goal__Array_to_C(cSlice []CPointHead_Goal, goSlice []PointHead_Goal) {
	for i := 0; i < len(goSlice); i++ {
		PointHead_GoalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
