// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/single_joint_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/SingleJointPosition_Feedback", SingleJointPosition_FeedbackTypeSupport)
	typemap.RegisterMessage("control_msgs/action/SingleJointPosition_Feedback", SingleJointPosition_FeedbackTypeSupport)
}

type SingleJointPosition_Feedback struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Position float64 `yaml:"position"`
	Velocity float64 `yaml:"velocity"`
	Error float64 `yaml:"error"`
}

// NewSingleJointPosition_Feedback creates a new SingleJointPosition_Feedback with default values.
func NewSingleJointPosition_Feedback() *SingleJointPosition_Feedback {
	self := SingleJointPosition_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *SingleJointPosition_Feedback) Clone() *SingleJointPosition_Feedback {
	c := &SingleJointPosition_Feedback{}
	c.Header = *t.Header.Clone()
	c.Position = t.Position
	c.Velocity = t.Velocity
	c.Error = t.Error
	return c
}

func (t *SingleJointPosition_Feedback) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SingleJointPosition_Feedback) SetDefaults() {
	t.Header.SetDefaults()
	t.Position = 0
	t.Velocity = 0
	t.Error = 0
}

func (t *SingleJointPosition_Feedback) GetTypeSupport() types.MessageTypeSupport {
	return SingleJointPosition_FeedbackTypeSupport
}

// SingleJointPosition_FeedbackPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SingleJointPosition_FeedbackPublisher struct {
	*rclgo.Publisher
}

// NewSingleJointPosition_FeedbackPublisher creates and returns a new publisher for the
// SingleJointPosition_Feedback
func NewSingleJointPosition_FeedbackPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SingleJointPosition_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SingleJointPosition_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SingleJointPosition_FeedbackPublisher{pub}, nil
}

func (p *SingleJointPosition_FeedbackPublisher) Publish(msg *SingleJointPosition_Feedback) error {
	return p.Publisher.Publish(msg)
}

// SingleJointPosition_FeedbackSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SingleJointPosition_FeedbackSubscription struct {
	*rclgo.Subscription
}

// SingleJointPosition_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a SingleJointPosition_FeedbackSubscription.
type SingleJointPosition_FeedbackSubscriptionCallback func(msg *SingleJointPosition_Feedback, info *rclgo.MessageInfo, err error)

// NewSingleJointPosition_FeedbackSubscription creates and returns a new subscription for the
// SingleJointPosition_Feedback
func NewSingleJointPosition_FeedbackSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SingleJointPosition_FeedbackSubscriptionCallback) (*SingleJointPosition_FeedbackSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SingleJointPosition_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SingleJointPosition_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SingleJointPosition_FeedbackSubscription{sub}, nil
}

func (s *SingleJointPosition_FeedbackSubscription) TakeMessage(out *SingleJointPosition_Feedback) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSingleJointPosition_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSingleJointPosition_FeedbackSlice(dst, src []SingleJointPosition_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SingleJointPosition_FeedbackTypeSupport types.MessageTypeSupport = _SingleJointPosition_FeedbackTypeSupport{}

type _SingleJointPosition_FeedbackTypeSupport struct{}

func (t _SingleJointPosition_FeedbackTypeSupport) New() types.Message {
	return NewSingleJointPosition_Feedback()
}

func (t _SingleJointPosition_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__SingleJointPosition_Feedback
	return (unsafe.Pointer)(C.control_msgs__action__SingleJointPosition_Feedback__create())
}

func (t _SingleJointPosition_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__SingleJointPosition_Feedback__destroy((*C.control_msgs__action__SingleJointPosition_Feedback)(pointer_to_free))
}

func (t _SingleJointPosition_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SingleJointPosition_Feedback)
	mem := (*C.control_msgs__action__SingleJointPosition_Feedback)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.position = C.double(m.Position)
	mem.velocity = C.double(m.Velocity)
	mem.error = C.double(m.Error)
}

func (t _SingleJointPosition_FeedbackTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SingleJointPosition_Feedback)
	mem := (*C.control_msgs__action__SingleJointPosition_Feedback)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Position = float64(mem.position)
	m.Velocity = float64(mem.velocity)
	m.Error = float64(mem.error)
}

func (t _SingleJointPosition_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__SingleJointPosition_Feedback())
}

type CSingleJointPosition_Feedback = C.control_msgs__action__SingleJointPosition_Feedback
type CSingleJointPosition_Feedback__Sequence = C.control_msgs__action__SingleJointPosition_Feedback__Sequence

func SingleJointPosition_Feedback__Sequence_to_Go(goSlice *[]SingleJointPosition_Feedback, cSlice CSingleJointPosition_Feedback__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SingleJointPosition_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SingleJointPosition_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SingleJointPosition_Feedback__Sequence_to_C(cSlice *CSingleJointPosition_Feedback__Sequence, goSlice []SingleJointPosition_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__SingleJointPosition_Feedback)(C.malloc(C.sizeof_struct_control_msgs__action__SingleJointPosition_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SingleJointPosition_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SingleJointPosition_Feedback__Array_to_Go(goSlice []SingleJointPosition_Feedback, cSlice []CSingleJointPosition_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		SingleJointPosition_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SingleJointPosition_Feedback__Array_to_C(cSlice []CSingleJointPosition_Feedback, goSlice []SingleJointPosition_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		SingleJointPosition_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
