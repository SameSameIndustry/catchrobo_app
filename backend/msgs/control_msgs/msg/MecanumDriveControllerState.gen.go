// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "msgs/geometry_msgs/msg"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/mecanum_drive_controller_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/MecanumDriveControllerState", MecanumDriveControllerStateTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/MecanumDriveControllerState", MecanumDriveControllerStateTypeSupport)
}

type MecanumDriveControllerState struct {
	Header std_msgs_msg.Header `yaml:"header"`
	FrontLeftWheelVelocity float64 `yaml:"front_left_wheel_velocity"`
	BackLeftWheelVelocity float64 `yaml:"back_left_wheel_velocity"`
	BackRightWheelVelocity float64 `yaml:"back_right_wheel_velocity"`
	FrontRightWheelVelocity float64 `yaml:"front_right_wheel_velocity"`
	ReferenceVelocity geometry_msgs_msg.Twist `yaml:"reference_velocity"`
}

// NewMecanumDriveControllerState creates a new MecanumDriveControllerState with default values.
func NewMecanumDriveControllerState() *MecanumDriveControllerState {
	self := MecanumDriveControllerState{}
	self.SetDefaults()
	return &self
}

func (t *MecanumDriveControllerState) Clone() *MecanumDriveControllerState {
	c := &MecanumDriveControllerState{}
	c.Header = *t.Header.Clone()
	c.FrontLeftWheelVelocity = t.FrontLeftWheelVelocity
	c.BackLeftWheelVelocity = t.BackLeftWheelVelocity
	c.BackRightWheelVelocity = t.BackRightWheelVelocity
	c.FrontRightWheelVelocity = t.FrontRightWheelVelocity
	c.ReferenceVelocity = *t.ReferenceVelocity.Clone()
	return c
}

func (t *MecanumDriveControllerState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MecanumDriveControllerState) SetDefaults() {
	t.Header.SetDefaults()
	t.FrontLeftWheelVelocity = 0
	t.BackLeftWheelVelocity = 0
	t.BackRightWheelVelocity = 0
	t.FrontRightWheelVelocity = 0
	t.ReferenceVelocity.SetDefaults()
}

func (t *MecanumDriveControllerState) GetTypeSupport() types.MessageTypeSupport {
	return MecanumDriveControllerStateTypeSupport
}

// MecanumDriveControllerStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MecanumDriveControllerStatePublisher struct {
	*rclgo.Publisher
}

// NewMecanumDriveControllerStatePublisher creates and returns a new publisher for the
// MecanumDriveControllerState
func NewMecanumDriveControllerStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MecanumDriveControllerStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, MecanumDriveControllerStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MecanumDriveControllerStatePublisher{pub}, nil
}

func (p *MecanumDriveControllerStatePublisher) Publish(msg *MecanumDriveControllerState) error {
	return p.Publisher.Publish(msg)
}

// MecanumDriveControllerStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MecanumDriveControllerStateSubscription struct {
	*rclgo.Subscription
}

// MecanumDriveControllerStateSubscriptionCallback type is used to provide a subscription
// handler function for a MecanumDriveControllerStateSubscription.
type MecanumDriveControllerStateSubscriptionCallback func(msg *MecanumDriveControllerState, info *rclgo.MessageInfo, err error)

// NewMecanumDriveControllerStateSubscription creates and returns a new subscription for the
// MecanumDriveControllerState
func NewMecanumDriveControllerStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MecanumDriveControllerStateSubscriptionCallback) (*MecanumDriveControllerStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MecanumDriveControllerState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MecanumDriveControllerStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MecanumDriveControllerStateSubscription{sub}, nil
}

func (s *MecanumDriveControllerStateSubscription) TakeMessage(out *MecanumDriveControllerState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMecanumDriveControllerStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMecanumDriveControllerStateSlice(dst, src []MecanumDriveControllerState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MecanumDriveControllerStateTypeSupport types.MessageTypeSupport = _MecanumDriveControllerStateTypeSupport{}

type _MecanumDriveControllerStateTypeSupport struct{}

func (t _MecanumDriveControllerStateTypeSupport) New() types.Message {
	return NewMecanumDriveControllerState()
}

func (t _MecanumDriveControllerStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__MecanumDriveControllerState
	return (unsafe.Pointer)(C.control_msgs__msg__MecanumDriveControllerState__create())
}

func (t _MecanumDriveControllerStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__MecanumDriveControllerState__destroy((*C.control_msgs__msg__MecanumDriveControllerState)(pointer_to_free))
}

func (t _MecanumDriveControllerStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MecanumDriveControllerState)
	mem := (*C.control_msgs__msg__MecanumDriveControllerState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.front_left_wheel_velocity = C.double(m.FrontLeftWheelVelocity)
	mem.back_left_wheel_velocity = C.double(m.BackLeftWheelVelocity)
	mem.back_right_wheel_velocity = C.double(m.BackRightWheelVelocity)
	mem.front_right_wheel_velocity = C.double(m.FrontRightWheelVelocity)
	geometry_msgs_msg.TwistTypeSupport.AsCStruct(unsafe.Pointer(&mem.reference_velocity), &m.ReferenceVelocity)
}

func (t _MecanumDriveControllerStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MecanumDriveControllerState)
	mem := (*C.control_msgs__msg__MecanumDriveControllerState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.FrontLeftWheelVelocity = float64(mem.front_left_wheel_velocity)
	m.BackLeftWheelVelocity = float64(mem.back_left_wheel_velocity)
	m.BackRightWheelVelocity = float64(mem.back_right_wheel_velocity)
	m.FrontRightWheelVelocity = float64(mem.front_right_wheel_velocity)
	geometry_msgs_msg.TwistTypeSupport.AsGoStruct(&m.ReferenceVelocity, unsafe.Pointer(&mem.reference_velocity))
}

func (t _MecanumDriveControllerStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__MecanumDriveControllerState())
}

type CMecanumDriveControllerState = C.control_msgs__msg__MecanumDriveControllerState
type CMecanumDriveControllerState__Sequence = C.control_msgs__msg__MecanumDriveControllerState__Sequence

func MecanumDriveControllerState__Sequence_to_Go(goSlice *[]MecanumDriveControllerState, cSlice CMecanumDriveControllerState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MecanumDriveControllerState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MecanumDriveControllerStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MecanumDriveControllerState__Sequence_to_C(cSlice *CMecanumDriveControllerState__Sequence, goSlice []MecanumDriveControllerState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__MecanumDriveControllerState)(C.malloc(C.sizeof_struct_control_msgs__msg__MecanumDriveControllerState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MecanumDriveControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MecanumDriveControllerState__Array_to_Go(goSlice []MecanumDriveControllerState, cSlice []CMecanumDriveControllerState) {
	for i := 0; i < len(cSlice); i++ {
		MecanumDriveControllerStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MecanumDriveControllerState__Array_to_C(cSlice []CMecanumDriveControllerState, goSlice []MecanumDriveControllerState) {
	for i := 0; i < len(goSlice); i++ {
		MecanumDriveControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
