// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/srv/query_trajectory_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/QueryTrajectoryState_Response", QueryTrajectoryState_ResponseTypeSupport)
	typemap.RegisterMessage("control_msgs/srv/QueryTrajectoryState_Response", QueryTrajectoryState_ResponseTypeSupport)
}

type QueryTrajectoryState_Response struct {
	Success bool `yaml:"success"`// indicate successful run of triggered service
	Message string `yaml:"message"`// informational, e.g. for error messages
	Name []string `yaml:"name"`
	Position []float64 `yaml:"position"`
	Velocity []float64 `yaml:"velocity"`
	Acceleration []float64 `yaml:"acceleration"`
}

// NewQueryTrajectoryState_Response creates a new QueryTrajectoryState_Response with default values.
func NewQueryTrajectoryState_Response() *QueryTrajectoryState_Response {
	self := QueryTrajectoryState_Response{}
	self.SetDefaults()
	return &self
}

func (t *QueryTrajectoryState_Response) Clone() *QueryTrajectoryState_Response {
	c := &QueryTrajectoryState_Response{}
	c.Success = t.Success
	c.Message = t.Message
	if t.Name != nil {
		c.Name = make([]string, len(t.Name))
		copy(c.Name, t.Name)
	}
	if t.Position != nil {
		c.Position = make([]float64, len(t.Position))
		copy(c.Position, t.Position)
	}
	if t.Velocity != nil {
		c.Velocity = make([]float64, len(t.Velocity))
		copy(c.Velocity, t.Velocity)
	}
	if t.Acceleration != nil {
		c.Acceleration = make([]float64, len(t.Acceleration))
		copy(c.Acceleration, t.Acceleration)
	}
	return c
}

func (t *QueryTrajectoryState_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *QueryTrajectoryState_Response) SetDefaults() {
	t.Success = false
	t.Message = ""
	t.Name = nil
	t.Position = nil
	t.Velocity = nil
	t.Acceleration = nil
}

func (t *QueryTrajectoryState_Response) GetTypeSupport() types.MessageTypeSupport {
	return QueryTrajectoryState_ResponseTypeSupport
}

// QueryTrajectoryState_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type QueryTrajectoryState_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewQueryTrajectoryState_ResponsePublisher creates and returns a new publisher for the
// QueryTrajectoryState_Response
func NewQueryTrajectoryState_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*QueryTrajectoryState_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, QueryTrajectoryState_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &QueryTrajectoryState_ResponsePublisher{pub}, nil
}

func (p *QueryTrajectoryState_ResponsePublisher) Publish(msg *QueryTrajectoryState_Response) error {
	return p.Publisher.Publish(msg)
}

// QueryTrajectoryState_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type QueryTrajectoryState_ResponseSubscription struct {
	*rclgo.Subscription
}

// QueryTrajectoryState_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a QueryTrajectoryState_ResponseSubscription.
type QueryTrajectoryState_ResponseSubscriptionCallback func(msg *QueryTrajectoryState_Response, info *rclgo.MessageInfo, err error)

// NewQueryTrajectoryState_ResponseSubscription creates and returns a new subscription for the
// QueryTrajectoryState_Response
func NewQueryTrajectoryState_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback QueryTrajectoryState_ResponseSubscriptionCallback) (*QueryTrajectoryState_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg QueryTrajectoryState_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, QueryTrajectoryState_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &QueryTrajectoryState_ResponseSubscription{sub}, nil
}

func (s *QueryTrajectoryState_ResponseSubscription) TakeMessage(out *QueryTrajectoryState_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneQueryTrajectoryState_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneQueryTrajectoryState_ResponseSlice(dst, src []QueryTrajectoryState_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var QueryTrajectoryState_ResponseTypeSupport types.MessageTypeSupport = _QueryTrajectoryState_ResponseTypeSupport{}

type _QueryTrajectoryState_ResponseTypeSupport struct{}

func (t _QueryTrajectoryState_ResponseTypeSupport) New() types.Message {
	return NewQueryTrajectoryState_Response()
}

func (t _QueryTrajectoryState_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__srv__QueryTrajectoryState_Response
	return (unsafe.Pointer)(C.control_msgs__srv__QueryTrajectoryState_Response__create())
}

func (t _QueryTrajectoryState_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__srv__QueryTrajectoryState_Response__destroy((*C.control_msgs__srv__QueryTrajectoryState_Response)(pointer_to_free))
}

func (t _QueryTrajectoryState_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*QueryTrajectoryState_Response)
	mem := (*C.control_msgs__srv__QueryTrajectoryState_Response)(dst)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.message), m.Message)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.name)), m.Name)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)), m.Position)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)), m.Velocity)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.acceleration)), m.Acceleration)
}

func (t _QueryTrajectoryState_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*QueryTrajectoryState_Response)
	mem := (*C.control_msgs__srv__QueryTrajectoryState_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.Message, unsafe.Pointer(&mem.message))
	primitives.String__Sequence_to_Go(&m.Name, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.name)))
	primitives.Float64__Sequence_to_Go(&m.Position, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)))
	primitives.Float64__Sequence_to_Go(&m.Velocity, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)))
	primitives.Float64__Sequence_to_Go(&m.Acceleration, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.acceleration)))
}

func (t _QueryTrajectoryState_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__srv__QueryTrajectoryState_Response())
}

type CQueryTrajectoryState_Response = C.control_msgs__srv__QueryTrajectoryState_Response
type CQueryTrajectoryState_Response__Sequence = C.control_msgs__srv__QueryTrajectoryState_Response__Sequence

func QueryTrajectoryState_Response__Sequence_to_Go(goSlice *[]QueryTrajectoryState_Response, cSlice CQueryTrajectoryState_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]QueryTrajectoryState_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		QueryTrajectoryState_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func QueryTrajectoryState_Response__Sequence_to_C(cSlice *CQueryTrajectoryState_Response__Sequence, goSlice []QueryTrajectoryState_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__srv__QueryTrajectoryState_Response)(C.malloc(C.sizeof_struct_control_msgs__srv__QueryTrajectoryState_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		QueryTrajectoryState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func QueryTrajectoryState_Response__Array_to_Go(goSlice []QueryTrajectoryState_Response, cSlice []CQueryTrajectoryState_Response) {
	for i := 0; i < len(cSlice); i++ {
		QueryTrajectoryState_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func QueryTrajectoryState_Response__Array_to_C(cSlice []CQueryTrajectoryState_Response, goSlice []QueryTrajectoryState_Response) {
	for i := 0; i < len(goSlice); i++ {
		QueryTrajectoryState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
