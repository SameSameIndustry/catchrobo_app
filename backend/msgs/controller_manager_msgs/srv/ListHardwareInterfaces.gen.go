// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <controller_manager_msgs/srv/list_hardware_interfaces.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("controller_manager_msgs/ListHardwareInterfaces", ListHardwareInterfacesTypeSupport)
	typemap.RegisterService("controller_manager_msgs/srv/ListHardwareInterfaces", ListHardwareInterfacesTypeSupport)
}

type _ListHardwareInterfacesTypeSupport struct {}

func (s _ListHardwareInterfacesTypeSupport) Request() types.MessageTypeSupport {
	return ListHardwareInterfaces_RequestTypeSupport
}

func (s _ListHardwareInterfacesTypeSupport) Response() types.MessageTypeSupport {
	return ListHardwareInterfaces_ResponseTypeSupport
}

func (s _ListHardwareInterfacesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__controller_manager_msgs__srv__ListHardwareInterfaces())
}

// Modifying this variable is undefined behavior.
var ListHardwareInterfacesTypeSupport types.ServiceTypeSupport = _ListHardwareInterfacesTypeSupport{}

// ListHardwareInterfacesClient wraps rclgo.Client to provide type safe helper
// functions
type ListHardwareInterfacesClient struct {
	*rclgo.Client
}

// NewListHardwareInterfacesClient creates and returns a new client for the
// ListHardwareInterfaces
func NewListHardwareInterfacesClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ListHardwareInterfacesClient, error) {
	client, err := node.NewClient(serviceName, ListHardwareInterfacesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListHardwareInterfacesClient{client}, nil
}

func (s *ListHardwareInterfacesClient) Send(ctx context.Context, req *ListHardwareInterfaces_Request) (*ListHardwareInterfaces_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ListHardwareInterfaces_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ListHardwareInterfacesServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ListHardwareInterfacesServiceResponseSender) SendResponse(resp *ListHardwareInterfaces_Response) error {
	return s.sender.SendResponse(resp)
}

type ListHardwareInterfacesServiceRequestHandler func(*rclgo.ServiceInfo, *ListHardwareInterfaces_Request, ListHardwareInterfacesServiceResponseSender)

// ListHardwareInterfacesService wraps rclgo.Service to provide type safe helper
// functions
type ListHardwareInterfacesService struct {
	*rclgo.Service
}

// NewListHardwareInterfacesService creates and returns a new service for the
// ListHardwareInterfaces
func NewListHardwareInterfacesService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ListHardwareInterfacesServiceRequestHandler) (*ListHardwareInterfacesService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ListHardwareInterfaces_Request)
		responseSender := ListHardwareInterfacesServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ListHardwareInterfacesTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ListHardwareInterfacesService{service}, nil
}