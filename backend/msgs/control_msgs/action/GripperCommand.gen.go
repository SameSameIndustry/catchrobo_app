// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/gripper_command.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"

	action_msgs_msg "msgs/action_msgs/msg"
	action_msgs_srv "msgs/action_msgs/srv"
)

func init() {
	typemap.RegisterAction("control_msgs/GripperCommand", GripperCommandTypeSupport)
	typemap.RegisterAction("control_msgs/action/GripperCommand", GripperCommandTypeSupport)
}

type _GripperCommandTypeSupport struct {}

func (s _GripperCommandTypeSupport) Goal() types.MessageTypeSupport {
	return GripperCommand_GoalTypeSupport
}

func (s _GripperCommandTypeSupport) SendGoal() types.ServiceTypeSupport {
	return GripperCommand_SendGoalTypeSupport
}

func (s _GripperCommandTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) types.Message {
	msg := NewGripperCommand_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _GripperCommandTypeSupport) Result() types.MessageTypeSupport {
	return GripperCommand_ResultTypeSupport
}

func (s _GripperCommandTypeSupport) GetResult() types.ServiceTypeSupport {
	return GripperCommand_GetResultTypeSupport
}

func (s _GripperCommandTypeSupport) NewGetResultResponse(status int8, result types.Message) types.Message {
	msg := NewGripperCommand_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewGripperCommand_Result()
	} else {
		msg.Result = *result.(*GripperCommand_Result)
	}
	return msg
}

func (s _GripperCommandTypeSupport) CancelGoal() types.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _GripperCommandTypeSupport) Feedback() types.MessageTypeSupport {
	return GripperCommand_FeedbackTypeSupport
}

func (s _GripperCommandTypeSupport) FeedbackMessage() types.MessageTypeSupport {
	return GripperCommand_FeedbackMessageTypeSupport
}

func (s _GripperCommandTypeSupport) NewFeedbackMessage(goalID *types.GoalID, feedback types.Message) types.Message {
	msg := NewGripperCommand_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*GripperCommand_Feedback)
	return msg
}

func (s _GripperCommandTypeSupport) GoalStatusArray() types.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _GripperCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__control_msgs__action__GripperCommand())
}

// Modifying this variable is undefined behavior.
var GripperCommandTypeSupport types.ActionTypeSupport = _GripperCommandTypeSupport{}

type GripperCommandFeedbackSender struct {
	sender rclgo.FeedbackSender
}

func (s *GripperCommandFeedbackSender) Send(msg *GripperCommand_Feedback) error {
	return s.sender.Send(msg)
}

type GripperCommandGoalHandle struct{
	*rclgo.GoalHandle

	Description *GripperCommand_Goal
}

func (g *GripperCommandGoalHandle) Accept() (*GripperCommandFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &GripperCommandFeedbackSender{*s}, nil
}

type GripperCommandAction interface {
	ExecuteGoal(context.Context, *GripperCommandGoalHandle) (*GripperCommand_Result, error)
}

func NewGripperCommandAction(
	executeGoal func(context.Context, *GripperCommandGoalHandle) (*GripperCommand_Result, error),
) GripperCommandAction {
	return _GripperCommandFuncAction(executeGoal)
}

type _GripperCommandFuncAction func(context.Context, *GripperCommandGoalHandle) (*GripperCommand_Result, error)

func (a _GripperCommandFuncAction) ExecuteGoal(
	ctx context.Context, goal *GripperCommandGoalHandle,
) (*GripperCommand_Result, error) {
	return a(ctx, goal)
}

type _GripperCommandAction struct {
	action GripperCommandAction
}

func (a _GripperCommandAction) ExecuteGoal(ctx context.Context, handle *rclgo.GoalHandle) (types.Message, error) {
	return a.action.ExecuteGoal(ctx, &GripperCommandGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*GripperCommand_Goal),
	})
}

func (a _GripperCommandAction) TypeSupport() types.ActionTypeSupport {
	return GripperCommandTypeSupport
}

type GripperCommandServer struct{
	*rclgo.ActionServer
}

func NewGripperCommandServer(node *rclgo.Node, name string, action GripperCommandAction, opts *rclgo.ActionServerOptions) (*GripperCommandServer, error) {
	server, err := node.NewActionServer(name, _GripperCommandAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &GripperCommandServer{server}, nil
}

type GripperCommandFeedbackHandler func(context.Context, *GripperCommand_FeedbackMessage)

type GripperCommandStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type GripperCommandClient struct{
	*rclgo.ActionClient
}

func NewGripperCommandClient(node *rclgo.Node, name string, opts *rclgo.ActionClientOptions) (*GripperCommandClient, error) {
	client, err := node.NewActionClient(name, GripperCommandTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &GripperCommandClient{client}, nil
}

func (c *GripperCommandClient) WatchGoal(ctx context.Context, goal *GripperCommand_Goal, onFeedback GripperCommandFeedbackHandler) (*GripperCommand_GetResult_Response, *types.GoalID, error) {
	var resp types.Message
	var goalID *types.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg types.Message) {
			onFeedback(ctx, msg.(*GripperCommand_FeedbackMessage))
		})
	}
	if r, ok := resp.(*GripperCommand_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *GripperCommandClient) SendGoal(ctx context.Context, goal *GripperCommand_Goal) (*GripperCommand_SendGoal_Response, *types.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*GripperCommand_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *GripperCommandClient) SendGoalRequest(ctx context.Context, request *GripperCommand_SendGoal_Request) (*GripperCommand_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*GripperCommand_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *GripperCommandClient) GetResult(ctx context.Context, goalID *types.GoalID) (*GripperCommand_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*GripperCommand_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *GripperCommandClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *GripperCommandClient) WatchFeedback(ctx context.Context, goalID *types.GoalID, handler GripperCommandFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*GripperCommand_FeedbackMessage))
	})
}

func (c *GripperCommandClient) WatchStatus(ctx context.Context, goalID *types.GoalID, handler GripperCommandStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
