// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "msgs/std_msgs/msg"
	trajectory_msgs_msg "msgs/trajectory_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/action/follow_joint_trajectory.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/FollowJointTrajectory_Feedback", FollowJointTrajectory_FeedbackTypeSupport)
	typemap.RegisterMessage("control_msgs/action/FollowJointTrajectory_Feedback", FollowJointTrajectory_FeedbackTypeSupport)
}

type FollowJointTrajectory_Feedback struct {
	Header std_msgs_msg.Header `yaml:"header"`
	JointNames []string `yaml:"joint_names"`
	Desired trajectory_msgs_msg.JointTrajectoryPoint `yaml:"desired"`
	Actual trajectory_msgs_msg.JointTrajectoryPoint `yaml:"actual"`
	Error trajectory_msgs_msg.JointTrajectoryPoint `yaml:"error"`
	MultiDofJointNames []string `yaml:"multi_dof_joint_names"`
	MultiDofDesired trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_desired"`
	MultiDofActual trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_actual"`
	MultiDofError trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_error"`
}

// NewFollowJointTrajectory_Feedback creates a new FollowJointTrajectory_Feedback with default values.
func NewFollowJointTrajectory_Feedback() *FollowJointTrajectory_Feedback {
	self := FollowJointTrajectory_Feedback{}
	self.SetDefaults()
	return &self
}

func (t *FollowJointTrajectory_Feedback) Clone() *FollowJointTrajectory_Feedback {
	c := &FollowJointTrajectory_Feedback{}
	c.Header = *t.Header.Clone()
	if t.JointNames != nil {
		c.JointNames = make([]string, len(t.JointNames))
		copy(c.JointNames, t.JointNames)
	}
	c.Desired = *t.Desired.Clone()
	c.Actual = *t.Actual.Clone()
	c.Error = *t.Error.Clone()
	if t.MultiDofJointNames != nil {
		c.MultiDofJointNames = make([]string, len(t.MultiDofJointNames))
		copy(c.MultiDofJointNames, t.MultiDofJointNames)
	}
	c.MultiDofDesired = *t.MultiDofDesired.Clone()
	c.MultiDofActual = *t.MultiDofActual.Clone()
	c.MultiDofError = *t.MultiDofError.Clone()
	return c
}

func (t *FollowJointTrajectory_Feedback) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FollowJointTrajectory_Feedback) SetDefaults() {
	t.Header.SetDefaults()
	t.JointNames = nil
	t.Desired.SetDefaults()
	t.Actual.SetDefaults()
	t.Error.SetDefaults()
	t.MultiDofJointNames = nil
	t.MultiDofDesired.SetDefaults()
	t.MultiDofActual.SetDefaults()
	t.MultiDofError.SetDefaults()
}

func (t *FollowJointTrajectory_Feedback) GetTypeSupport() types.MessageTypeSupport {
	return FollowJointTrajectory_FeedbackTypeSupport
}

// FollowJointTrajectory_FeedbackPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FollowJointTrajectory_FeedbackPublisher struct {
	*rclgo.Publisher
}

// NewFollowJointTrajectory_FeedbackPublisher creates and returns a new publisher for the
// FollowJointTrajectory_Feedback
func NewFollowJointTrajectory_FeedbackPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FollowJointTrajectory_FeedbackPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FollowJointTrajectory_FeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowJointTrajectory_FeedbackPublisher{pub}, nil
}

func (p *FollowJointTrajectory_FeedbackPublisher) Publish(msg *FollowJointTrajectory_Feedback) error {
	return p.Publisher.Publish(msg)
}

// FollowJointTrajectory_FeedbackSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FollowJointTrajectory_FeedbackSubscription struct {
	*rclgo.Subscription
}

// FollowJointTrajectory_FeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a FollowJointTrajectory_FeedbackSubscription.
type FollowJointTrajectory_FeedbackSubscriptionCallback func(msg *FollowJointTrajectory_Feedback, info *rclgo.MessageInfo, err error)

// NewFollowJointTrajectory_FeedbackSubscription creates and returns a new subscription for the
// FollowJointTrajectory_Feedback
func NewFollowJointTrajectory_FeedbackSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FollowJointTrajectory_FeedbackSubscriptionCallback) (*FollowJointTrajectory_FeedbackSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FollowJointTrajectory_Feedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FollowJointTrajectory_FeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowJointTrajectory_FeedbackSubscription{sub}, nil
}

func (s *FollowJointTrajectory_FeedbackSubscription) TakeMessage(out *FollowJointTrajectory_Feedback) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowJointTrajectory_FeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowJointTrajectory_FeedbackSlice(dst, src []FollowJointTrajectory_Feedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowJointTrajectory_FeedbackTypeSupport types.MessageTypeSupport = _FollowJointTrajectory_FeedbackTypeSupport{}

type _FollowJointTrajectory_FeedbackTypeSupport struct{}

func (t _FollowJointTrajectory_FeedbackTypeSupport) New() types.Message {
	return NewFollowJointTrajectory_Feedback()
}

func (t _FollowJointTrajectory_FeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__action__FollowJointTrajectory_Feedback
	return (unsafe.Pointer)(C.control_msgs__action__FollowJointTrajectory_Feedback__create())
}

func (t _FollowJointTrajectory_FeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__action__FollowJointTrajectory_Feedback__destroy((*C.control_msgs__action__FollowJointTrajectory_Feedback)(pointer_to_free))
}

func (t _FollowJointTrajectory_FeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FollowJointTrajectory_Feedback)
	mem := (*C.control_msgs__action__FollowJointTrajectory_Feedback)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)), m.JointNames)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.desired), &m.Desired)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.actual), &m.Actual)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.error), &m.Error)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.multi_dof_joint_names)), m.MultiDofJointNames)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_desired), &m.MultiDofDesired)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_actual), &m.MultiDofActual)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_error), &m.MultiDofError)
}

func (t _FollowJointTrajectory_FeedbackTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowJointTrajectory_Feedback)
	mem := (*C.control_msgs__action__FollowJointTrajectory_Feedback)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.JointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Desired, unsafe.Pointer(&mem.desired))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Actual, unsafe.Pointer(&mem.actual))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Error, unsafe.Pointer(&mem.error))
	primitives.String__Sequence_to_Go(&m.MultiDofJointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.multi_dof_joint_names)))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofDesired, unsafe.Pointer(&mem.multi_dof_desired))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofActual, unsafe.Pointer(&mem.multi_dof_actual))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofError, unsafe.Pointer(&mem.multi_dof_error))
}

func (t _FollowJointTrajectory_FeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__action__FollowJointTrajectory_Feedback())
}

type CFollowJointTrajectory_Feedback = C.control_msgs__action__FollowJointTrajectory_Feedback
type CFollowJointTrajectory_Feedback__Sequence = C.control_msgs__action__FollowJointTrajectory_Feedback__Sequence

func FollowJointTrajectory_Feedback__Sequence_to_Go(goSlice *[]FollowJointTrajectory_Feedback, cSlice CFollowJointTrajectory_Feedback__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowJointTrajectory_Feedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowJointTrajectory_FeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FollowJointTrajectory_Feedback__Sequence_to_C(cSlice *CFollowJointTrajectory_Feedback__Sequence, goSlice []FollowJointTrajectory_Feedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__action__FollowJointTrajectory_Feedback)(C.malloc(C.sizeof_struct_control_msgs__action__FollowJointTrajectory_Feedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowJointTrajectory_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FollowJointTrajectory_Feedback__Array_to_Go(goSlice []FollowJointTrajectory_Feedback, cSlice []CFollowJointTrajectory_Feedback) {
	for i := 0; i < len(cSlice); i++ {
		FollowJointTrajectory_FeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FollowJointTrajectory_Feedback__Array_to_C(cSlice []CFollowJointTrajectory_Feedback, goSlice []FollowJointTrajectory_Feedback) {
	for i := 0; i < len(goSlice); i++ {
		FollowJointTrajectory_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
