// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/parallel_gripper_command.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("control_msgs/ParallelGripperCommand_SendGoal", ParallelGripperCommand_SendGoalTypeSupport)
	typemap.RegisterService("control_msgs/action/ParallelGripperCommand_SendGoal", ParallelGripperCommand_SendGoalTypeSupport)
}

type _ParallelGripperCommand_SendGoalTypeSupport struct {}

func (s _ParallelGripperCommand_SendGoalTypeSupport) Request() types.MessageTypeSupport {
	return ParallelGripperCommand_SendGoal_RequestTypeSupport
}

func (s _ParallelGripperCommand_SendGoalTypeSupport) Response() types.MessageTypeSupport {
	return ParallelGripperCommand_SendGoal_ResponseTypeSupport
}

func (s _ParallelGripperCommand_SendGoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__control_msgs__action__ParallelGripperCommand_SendGoal())
}

// Modifying this variable is undefined behavior.
var ParallelGripperCommand_SendGoalTypeSupport types.ServiceTypeSupport = _ParallelGripperCommand_SendGoalTypeSupport{}

// ParallelGripperCommand_SendGoalClient wraps rclgo.Client to provide type safe helper
// functions
type ParallelGripperCommand_SendGoalClient struct {
	*rclgo.Client
}

// NewParallelGripperCommand_SendGoalClient creates and returns a new client for the
// ParallelGripperCommand_SendGoal
func NewParallelGripperCommand_SendGoalClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ParallelGripperCommand_SendGoalClient, error) {
	client, err := node.NewClient(serviceName, ParallelGripperCommand_SendGoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParallelGripperCommand_SendGoalClient{client}, nil
}

func (s *ParallelGripperCommand_SendGoalClient) Send(ctx context.Context, req *ParallelGripperCommand_SendGoal_Request) (*ParallelGripperCommand_SendGoal_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ParallelGripperCommand_SendGoal_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ParallelGripperCommand_SendGoalServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ParallelGripperCommand_SendGoalServiceResponseSender) SendResponse(resp *ParallelGripperCommand_SendGoal_Response) error {
	return s.sender.SendResponse(resp)
}

type ParallelGripperCommand_SendGoalServiceRequestHandler func(*rclgo.ServiceInfo, *ParallelGripperCommand_SendGoal_Request, ParallelGripperCommand_SendGoalServiceResponseSender)

// ParallelGripperCommand_SendGoalService wraps rclgo.Service to provide type safe helper
// functions
type ParallelGripperCommand_SendGoalService struct {
	*rclgo.Service
}

// NewParallelGripperCommand_SendGoalService creates and returns a new service for the
// ParallelGripperCommand_SendGoal
func NewParallelGripperCommand_SendGoalService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ParallelGripperCommand_SendGoalServiceRequestHandler) (*ParallelGripperCommand_SendGoalService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ParallelGripperCommand_SendGoal_Request)
		responseSender := ParallelGripperCommand_SendGoalServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ParallelGripperCommand_SendGoalTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ParallelGripperCommand_SendGoalService{service}, nil
}