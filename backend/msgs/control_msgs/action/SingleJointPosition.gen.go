// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/single_joint_position.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"

	action_msgs_msg "msgs/action_msgs/msg"
	action_msgs_srv "msgs/action_msgs/srv"
)

func init() {
	typemap.RegisterAction("control_msgs/SingleJointPosition", SingleJointPositionTypeSupport)
	typemap.RegisterAction("control_msgs/action/SingleJointPosition", SingleJointPositionTypeSupport)
}

type _SingleJointPositionTypeSupport struct {}

func (s _SingleJointPositionTypeSupport) Goal() types.MessageTypeSupport {
	return SingleJointPosition_GoalTypeSupport
}

func (s _SingleJointPositionTypeSupport) SendGoal() types.ServiceTypeSupport {
	return SingleJointPosition_SendGoalTypeSupport
}

func (s _SingleJointPositionTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) types.Message {
	msg := NewSingleJointPosition_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _SingleJointPositionTypeSupport) Result() types.MessageTypeSupport {
	return SingleJointPosition_ResultTypeSupport
}

func (s _SingleJointPositionTypeSupport) GetResult() types.ServiceTypeSupport {
	return SingleJointPosition_GetResultTypeSupport
}

func (s _SingleJointPositionTypeSupport) NewGetResultResponse(status int8, result types.Message) types.Message {
	msg := NewSingleJointPosition_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewSingleJointPosition_Result()
	} else {
		msg.Result = *result.(*SingleJointPosition_Result)
	}
	return msg
}

func (s _SingleJointPositionTypeSupport) CancelGoal() types.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _SingleJointPositionTypeSupport) Feedback() types.MessageTypeSupport {
	return SingleJointPosition_FeedbackTypeSupport
}

func (s _SingleJointPositionTypeSupport) FeedbackMessage() types.MessageTypeSupport {
	return SingleJointPosition_FeedbackMessageTypeSupport
}

func (s _SingleJointPositionTypeSupport) NewFeedbackMessage(goalID *types.GoalID, feedback types.Message) types.Message {
	msg := NewSingleJointPosition_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*SingleJointPosition_Feedback)
	return msg
}

func (s _SingleJointPositionTypeSupport) GoalStatusArray() types.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _SingleJointPositionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__control_msgs__action__SingleJointPosition())
}

// Modifying this variable is undefined behavior.
var SingleJointPositionTypeSupport types.ActionTypeSupport = _SingleJointPositionTypeSupport{}

type SingleJointPositionFeedbackSender struct {
	sender rclgo.FeedbackSender
}

func (s *SingleJointPositionFeedbackSender) Send(msg *SingleJointPosition_Feedback) error {
	return s.sender.Send(msg)
}

type SingleJointPositionGoalHandle struct{
	*rclgo.GoalHandle

	Description *SingleJointPosition_Goal
}

func (g *SingleJointPositionGoalHandle) Accept() (*SingleJointPositionFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &SingleJointPositionFeedbackSender{*s}, nil
}

type SingleJointPositionAction interface {
	ExecuteGoal(context.Context, *SingleJointPositionGoalHandle) (*SingleJointPosition_Result, error)
}

func NewSingleJointPositionAction(
	executeGoal func(context.Context, *SingleJointPositionGoalHandle) (*SingleJointPosition_Result, error),
) SingleJointPositionAction {
	return _SingleJointPositionFuncAction(executeGoal)
}

type _SingleJointPositionFuncAction func(context.Context, *SingleJointPositionGoalHandle) (*SingleJointPosition_Result, error)

func (a _SingleJointPositionFuncAction) ExecuteGoal(
	ctx context.Context, goal *SingleJointPositionGoalHandle,
) (*SingleJointPosition_Result, error) {
	return a(ctx, goal)
}

type _SingleJointPositionAction struct {
	action SingleJointPositionAction
}

func (a _SingleJointPositionAction) ExecuteGoal(ctx context.Context, handle *rclgo.GoalHandle) (types.Message, error) {
	return a.action.ExecuteGoal(ctx, &SingleJointPositionGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*SingleJointPosition_Goal),
	})
}

func (a _SingleJointPositionAction) TypeSupport() types.ActionTypeSupport {
	return SingleJointPositionTypeSupport
}

type SingleJointPositionServer struct{
	*rclgo.ActionServer
}

func NewSingleJointPositionServer(node *rclgo.Node, name string, action SingleJointPositionAction, opts *rclgo.ActionServerOptions) (*SingleJointPositionServer, error) {
	server, err := node.NewActionServer(name, _SingleJointPositionAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &SingleJointPositionServer{server}, nil
}

type SingleJointPositionFeedbackHandler func(context.Context, *SingleJointPosition_FeedbackMessage)

type SingleJointPositionStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type SingleJointPositionClient struct{
	*rclgo.ActionClient
}

func NewSingleJointPositionClient(node *rclgo.Node, name string, opts *rclgo.ActionClientOptions) (*SingleJointPositionClient, error) {
	client, err := node.NewActionClient(name, SingleJointPositionTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &SingleJointPositionClient{client}, nil
}

func (c *SingleJointPositionClient) WatchGoal(ctx context.Context, goal *SingleJointPosition_Goal, onFeedback SingleJointPositionFeedbackHandler) (*SingleJointPosition_GetResult_Response, *types.GoalID, error) {
	var resp types.Message
	var goalID *types.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg types.Message) {
			onFeedback(ctx, msg.(*SingleJointPosition_FeedbackMessage))
		})
	}
	if r, ok := resp.(*SingleJointPosition_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *SingleJointPositionClient) SendGoal(ctx context.Context, goal *SingleJointPosition_Goal) (*SingleJointPosition_SendGoal_Response, *types.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*SingleJointPosition_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *SingleJointPositionClient) SendGoalRequest(ctx context.Context, request *SingleJointPosition_SendGoal_Request) (*SingleJointPosition_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*SingleJointPosition_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *SingleJointPositionClient) GetResult(ctx context.Context, goalID *types.GoalID) (*SingleJointPosition_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*SingleJointPosition_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *SingleJointPositionClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *SingleJointPositionClient) WatchFeedback(ctx context.Context, goalID *types.GoalID, handler SingleJointPositionFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*SingleJointPosition_FeedbackMessage))
	})
}

func (c *SingleJointPositionClient) WatchStatus(ctx context.Context, goalID *types.GoalID, handler SingleJointPositionStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
