// Code generated by rclgo-gen. DO NOT EDIT.

package ackermann_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ackermann_msgs/msg/ackermann_drive_stamped.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ackermann_msgs/AckermannDriveStamped", AckermannDriveStampedTypeSupport)
	typemap.RegisterMessage("ackermann_msgs/msg/AckermannDriveStamped", AckermannDriveStampedTypeSupport)
}

type AckermannDriveStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Drive AckermannDrive `yaml:"drive"`
}

// NewAckermannDriveStamped creates a new AckermannDriveStamped with default values.
func NewAckermannDriveStamped() *AckermannDriveStamped {
	self := AckermannDriveStamped{}
	self.SetDefaults()
	return &self
}

func (t *AckermannDriveStamped) Clone() *AckermannDriveStamped {
	c := &AckermannDriveStamped{}
	c.Header = *t.Header.Clone()
	c.Drive = *t.Drive.Clone()
	return c
}

func (t *AckermannDriveStamped) CloneMsg() types.Message {
	return t.Clone()
}

func (t *AckermannDriveStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.Drive.SetDefaults()
}

func (t *AckermannDriveStamped) GetTypeSupport() types.MessageTypeSupport {
	return AckermannDriveStampedTypeSupport
}

// AckermannDriveStampedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AckermannDriveStampedPublisher struct {
	*rclgo.Publisher
}

// NewAckermannDriveStampedPublisher creates and returns a new publisher for the
// AckermannDriveStamped
func NewAckermannDriveStampedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AckermannDriveStampedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, AckermannDriveStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AckermannDriveStampedPublisher{pub}, nil
}

func (p *AckermannDriveStampedPublisher) Publish(msg *AckermannDriveStamped) error {
	return p.Publisher.Publish(msg)
}

// AckermannDriveStampedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AckermannDriveStampedSubscription struct {
	*rclgo.Subscription
}

// AckermannDriveStampedSubscriptionCallback type is used to provide a subscription
// handler function for a AckermannDriveStampedSubscription.
type AckermannDriveStampedSubscriptionCallback func(msg *AckermannDriveStamped, info *rclgo.MessageInfo, err error)

// NewAckermannDriveStampedSubscription creates and returns a new subscription for the
// AckermannDriveStamped
func NewAckermannDriveStampedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AckermannDriveStampedSubscriptionCallback) (*AckermannDriveStampedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg AckermannDriveStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AckermannDriveStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AckermannDriveStampedSubscription{sub}, nil
}

func (s *AckermannDriveStampedSubscription) TakeMessage(out *AckermannDriveStamped) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAckermannDriveStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAckermannDriveStampedSlice(dst, src []AckermannDriveStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AckermannDriveStampedTypeSupport types.MessageTypeSupport = _AckermannDriveStampedTypeSupport{}

type _AckermannDriveStampedTypeSupport struct{}

func (t _AckermannDriveStampedTypeSupport) New() types.Message {
	return NewAckermannDriveStamped()
}

func (t _AckermannDriveStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ackermann_msgs__msg__AckermannDriveStamped
	return (unsafe.Pointer)(C.ackermann_msgs__msg__AckermannDriveStamped__create())
}

func (t _AckermannDriveStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ackermann_msgs__msg__AckermannDriveStamped__destroy((*C.ackermann_msgs__msg__AckermannDriveStamped)(pointer_to_free))
}

func (t _AckermannDriveStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*AckermannDriveStamped)
	mem := (*C.ackermann_msgs__msg__AckermannDriveStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	AckermannDriveTypeSupport.AsCStruct(unsafe.Pointer(&mem.drive), &m.Drive)
}

func (t _AckermannDriveStampedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AckermannDriveStamped)
	mem := (*C.ackermann_msgs__msg__AckermannDriveStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	AckermannDriveTypeSupport.AsGoStruct(&m.Drive, unsafe.Pointer(&mem.drive))
}

func (t _AckermannDriveStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ackermann_msgs__msg__AckermannDriveStamped())
}

type CAckermannDriveStamped = C.ackermann_msgs__msg__AckermannDriveStamped
type CAckermannDriveStamped__Sequence = C.ackermann_msgs__msg__AckermannDriveStamped__Sequence

func AckermannDriveStamped__Sequence_to_Go(goSlice *[]AckermannDriveStamped, cSlice CAckermannDriveStamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AckermannDriveStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AckermannDriveStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func AckermannDriveStamped__Sequence_to_C(cSlice *CAckermannDriveStamped__Sequence, goSlice []AckermannDriveStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ackermann_msgs__msg__AckermannDriveStamped)(C.malloc(C.sizeof_struct_ackermann_msgs__msg__AckermannDriveStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AckermannDriveStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func AckermannDriveStamped__Array_to_Go(goSlice []AckermannDriveStamped, cSlice []CAckermannDriveStamped) {
	for i := 0; i < len(cSlice); i++ {
		AckermannDriveStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func AckermannDriveStamped__Array_to_C(cSlice []CAckermannDriveStamped, goSlice []AckermannDriveStamped) {
	for i := 0; i < len(goSlice); i++ {
		AckermannDriveStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
