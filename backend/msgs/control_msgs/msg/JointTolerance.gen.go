// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/joint_tolerance.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/JointTolerance", JointToleranceTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/JointTolerance", JointToleranceTypeSupport)
}

type JointTolerance struct {
	Name string `yaml:"name"`
	Position float64 `yaml:"position"`// in radians or meters (for a revolute or prismatic joint, respectively)
	Velocity float64 `yaml:"velocity"`// in rad/sec or m/sec
	Acceleration float64 `yaml:"acceleration"`// in rad/sec^2 or m/sec^2
}

// NewJointTolerance creates a new JointTolerance with default values.
func NewJointTolerance() *JointTolerance {
	self := JointTolerance{}
	self.SetDefaults()
	return &self
}

func (t *JointTolerance) Clone() *JointTolerance {
	c := &JointTolerance{}
	c.Name = t.Name
	c.Position = t.Position
	c.Velocity = t.Velocity
	c.Acceleration = t.Acceleration
	return c
}

func (t *JointTolerance) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointTolerance) SetDefaults() {
	t.Name = ""
	t.Position = 0
	t.Velocity = 0
	t.Acceleration = 0
}

func (t *JointTolerance) GetTypeSupport() types.MessageTypeSupport {
	return JointToleranceTypeSupport
}

// JointTolerancePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointTolerancePublisher struct {
	*rclgo.Publisher
}

// NewJointTolerancePublisher creates and returns a new publisher for the
// JointTolerance
func NewJointTolerancePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointTolerancePublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointToleranceTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointTolerancePublisher{pub}, nil
}

func (p *JointTolerancePublisher) Publish(msg *JointTolerance) error {
	return p.Publisher.Publish(msg)
}

// JointToleranceSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointToleranceSubscription struct {
	*rclgo.Subscription
}

// JointToleranceSubscriptionCallback type is used to provide a subscription
// handler function for a JointToleranceSubscription.
type JointToleranceSubscriptionCallback func(msg *JointTolerance, info *rclgo.MessageInfo, err error)

// NewJointToleranceSubscription creates and returns a new subscription for the
// JointTolerance
func NewJointToleranceSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointToleranceSubscriptionCallback) (*JointToleranceSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointTolerance
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointToleranceTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointToleranceSubscription{sub}, nil
}

func (s *JointToleranceSubscription) TakeMessage(out *JointTolerance) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointToleranceSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointToleranceSlice(dst, src []JointTolerance) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointToleranceTypeSupport types.MessageTypeSupport = _JointToleranceTypeSupport{}

type _JointToleranceTypeSupport struct{}

func (t _JointToleranceTypeSupport) New() types.Message {
	return NewJointTolerance()
}

func (t _JointToleranceTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__JointTolerance
	return (unsafe.Pointer)(C.control_msgs__msg__JointTolerance__create())
}

func (t _JointToleranceTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__JointTolerance__destroy((*C.control_msgs__msg__JointTolerance)(pointer_to_free))
}

func (t _JointToleranceTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointTolerance)
	mem := (*C.control_msgs__msg__JointTolerance)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.position = C.double(m.Position)
	mem.velocity = C.double(m.Velocity)
	mem.acceleration = C.double(m.Acceleration)
}

func (t _JointToleranceTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointTolerance)
	mem := (*C.control_msgs__msg__JointTolerance)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Position = float64(mem.position)
	m.Velocity = float64(mem.velocity)
	m.Acceleration = float64(mem.acceleration)
}

func (t _JointToleranceTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointTolerance())
}

type CJointTolerance = C.control_msgs__msg__JointTolerance
type CJointTolerance__Sequence = C.control_msgs__msg__JointTolerance__Sequence

func JointTolerance__Sequence_to_Go(goSlice *[]JointTolerance, cSlice CJointTolerance__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointTolerance, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointToleranceTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointTolerance__Sequence_to_C(cSlice *CJointTolerance__Sequence, goSlice []JointTolerance) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__JointTolerance)(C.malloc(C.sizeof_struct_control_msgs__msg__JointTolerance * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointToleranceTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointTolerance__Array_to_Go(goSlice []JointTolerance, cSlice []CJointTolerance) {
	for i := 0; i < len(cSlice); i++ {
		JointToleranceTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointTolerance__Array_to_C(cSlice []CJointTolerance, goSlice []JointTolerance) {
	for i := 0; i < len(goSlice); i++ {
		JointToleranceTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
