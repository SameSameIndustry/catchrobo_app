// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/joint_jog.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/JointJog", JointJogTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/JointJog", JointJogTypeSupport)
}

type JointJog struct {
	Header std_msgs_msg.Header `yaml:"header"`// Used in time-stamping the message.
	JointNames []string `yaml:"joint_names"`// Name list of the joints. You don't need to specify all joints of therobot. Joint names are case-sensitive.
	Displacements []float64 `yaml:"displacements"`// or position_deltas. A position command to the joints listed in joint_names.The order must be identical.Units are meters or radians.If displacements and velocities are filled, a profiled motion is requested.
	Velocities []float64 `yaml:"velocities"`// A velocity command to the joints listed in joint_names.The order must be identical.Units are m/s or rad/s.If displacements and velocities are filled, a profiled motion is requested.
	Duration float64 `yaml:"duration"`
}

// NewJointJog creates a new JointJog with default values.
func NewJointJog() *JointJog {
	self := JointJog{}
	self.SetDefaults()
	return &self
}

func (t *JointJog) Clone() *JointJog {
	c := &JointJog{}
	c.Header = *t.Header.Clone()
	if t.JointNames != nil {
		c.JointNames = make([]string, len(t.JointNames))
		copy(c.JointNames, t.JointNames)
	}
	if t.Displacements != nil {
		c.Displacements = make([]float64, len(t.Displacements))
		copy(c.Displacements, t.Displacements)
	}
	if t.Velocities != nil {
		c.Velocities = make([]float64, len(t.Velocities))
		copy(c.Velocities, t.Velocities)
	}
	c.Duration = t.Duration
	return c
}

func (t *JointJog) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointJog) SetDefaults() {
	t.Header.SetDefaults()
	t.JointNames = nil
	t.Displacements = nil
	t.Velocities = nil
	t.Duration = 0
}

func (t *JointJog) GetTypeSupport() types.MessageTypeSupport {
	return JointJogTypeSupport
}

// JointJogPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointJogPublisher struct {
	*rclgo.Publisher
}

// NewJointJogPublisher creates and returns a new publisher for the
// JointJog
func NewJointJogPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointJogPublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointJogTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointJogPublisher{pub}, nil
}

func (p *JointJogPublisher) Publish(msg *JointJog) error {
	return p.Publisher.Publish(msg)
}

// JointJogSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointJogSubscription struct {
	*rclgo.Subscription
}

// JointJogSubscriptionCallback type is used to provide a subscription
// handler function for a JointJogSubscription.
type JointJogSubscriptionCallback func(msg *JointJog, info *rclgo.MessageInfo, err error)

// NewJointJogSubscription creates and returns a new subscription for the
// JointJog
func NewJointJogSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointJogSubscriptionCallback) (*JointJogSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointJog
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointJogTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointJogSubscription{sub}, nil
}

func (s *JointJogSubscription) TakeMessage(out *JointJog) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointJogSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointJogSlice(dst, src []JointJog) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointJogTypeSupport types.MessageTypeSupport = _JointJogTypeSupport{}

type _JointJogTypeSupport struct{}

func (t _JointJogTypeSupport) New() types.Message {
	return NewJointJog()
}

func (t _JointJogTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__JointJog
	return (unsafe.Pointer)(C.control_msgs__msg__JointJog__create())
}

func (t _JointJogTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__JointJog__destroy((*C.control_msgs__msg__JointJog)(pointer_to_free))
}

func (t _JointJogTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointJog)
	mem := (*C.control_msgs__msg__JointJog)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)), m.JointNames)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.displacements)), m.Displacements)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)), m.Velocities)
	mem.duration = C.double(m.Duration)
}

func (t _JointJogTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointJog)
	mem := (*C.control_msgs__msg__JointJog)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.JointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)))
	primitives.Float64__Sequence_to_Go(&m.Displacements, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.displacements)))
	primitives.Float64__Sequence_to_Go(&m.Velocities, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)))
	m.Duration = float64(mem.duration)
}

func (t _JointJogTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointJog())
}

type CJointJog = C.control_msgs__msg__JointJog
type CJointJog__Sequence = C.control_msgs__msg__JointJog__Sequence

func JointJog__Sequence_to_Go(goSlice *[]JointJog, cSlice CJointJog__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointJog, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointJogTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointJog__Sequence_to_C(cSlice *CJointJog__Sequence, goSlice []JointJog) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__JointJog)(C.malloc(C.sizeof_struct_control_msgs__msg__JointJog * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointJogTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointJog__Array_to_Go(goSlice []JointJog, cSlice []CJointJog) {
	for i := 0; i < len(cSlice); i++ {
		JointJogTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointJog__Array_to_C(cSlice []CJointJog, goSlice []JointJog) {
	for i := 0; i < len(goSlice); i++ {
		JointJogTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
