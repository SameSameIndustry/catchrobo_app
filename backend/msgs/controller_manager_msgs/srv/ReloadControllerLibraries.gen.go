// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <controller_manager_msgs/srv/reload_controller_libraries.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("controller_manager_msgs/ReloadControllerLibraries", ReloadControllerLibrariesTypeSupport)
	typemap.RegisterService("controller_manager_msgs/srv/ReloadControllerLibraries", ReloadControllerLibrariesTypeSupport)
}

type _ReloadControllerLibrariesTypeSupport struct {}

func (s _ReloadControllerLibrariesTypeSupport) Request() types.MessageTypeSupport {
	return ReloadControllerLibraries_RequestTypeSupport
}

func (s _ReloadControllerLibrariesTypeSupport) Response() types.MessageTypeSupport {
	return ReloadControllerLibraries_ResponseTypeSupport
}

func (s _ReloadControllerLibrariesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__controller_manager_msgs__srv__ReloadControllerLibraries())
}

// Modifying this variable is undefined behavior.
var ReloadControllerLibrariesTypeSupport types.ServiceTypeSupport = _ReloadControllerLibrariesTypeSupport{}

// ReloadControllerLibrariesClient wraps rclgo.Client to provide type safe helper
// functions
type ReloadControllerLibrariesClient struct {
	*rclgo.Client
}

// NewReloadControllerLibrariesClient creates and returns a new client for the
// ReloadControllerLibraries
func NewReloadControllerLibrariesClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ReloadControllerLibrariesClient, error) {
	client, err := node.NewClient(serviceName, ReloadControllerLibrariesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ReloadControllerLibrariesClient{client}, nil
}

func (s *ReloadControllerLibrariesClient) Send(ctx context.Context, req *ReloadControllerLibraries_Request) (*ReloadControllerLibraries_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ReloadControllerLibraries_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ReloadControllerLibrariesServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ReloadControllerLibrariesServiceResponseSender) SendResponse(resp *ReloadControllerLibraries_Response) error {
	return s.sender.SendResponse(resp)
}

type ReloadControllerLibrariesServiceRequestHandler func(*rclgo.ServiceInfo, *ReloadControllerLibraries_Request, ReloadControllerLibrariesServiceResponseSender)

// ReloadControllerLibrariesService wraps rclgo.Service to provide type safe helper
// functions
type ReloadControllerLibrariesService struct {
	*rclgo.Service
}

// NewReloadControllerLibrariesService creates and returns a new service for the
// ReloadControllerLibraries
func NewReloadControllerLibrariesService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ReloadControllerLibrariesServiceRequestHandler) (*ReloadControllerLibrariesService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ReloadControllerLibraries_Request)
		responseSender := ReloadControllerLibrariesServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ReloadControllerLibrariesTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ReloadControllerLibrariesService{service}, nil
}