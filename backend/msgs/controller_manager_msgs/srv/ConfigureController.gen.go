// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <controller_manager_msgs/srv/configure_controller.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("controller_manager_msgs/ConfigureController", ConfigureControllerTypeSupport)
	typemap.RegisterService("controller_manager_msgs/srv/ConfigureController", ConfigureControllerTypeSupport)
}

type _ConfigureControllerTypeSupport struct {}

func (s _ConfigureControllerTypeSupport) Request() types.MessageTypeSupport {
	return ConfigureController_RequestTypeSupport
}

func (s _ConfigureControllerTypeSupport) Response() types.MessageTypeSupport {
	return ConfigureController_ResponseTypeSupport
}

func (s _ConfigureControllerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__controller_manager_msgs__srv__ConfigureController())
}

// Modifying this variable is undefined behavior.
var ConfigureControllerTypeSupport types.ServiceTypeSupport = _ConfigureControllerTypeSupport{}

// ConfigureControllerClient wraps rclgo.Client to provide type safe helper
// functions
type ConfigureControllerClient struct {
	*rclgo.Client
}

// NewConfigureControllerClient creates and returns a new client for the
// ConfigureController
func NewConfigureControllerClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ConfigureControllerClient, error) {
	client, err := node.NewClient(serviceName, ConfigureControllerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ConfigureControllerClient{client}, nil
}

func (s *ConfigureControllerClient) Send(ctx context.Context, req *ConfigureController_Request) (*ConfigureController_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ConfigureController_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ConfigureControllerServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ConfigureControllerServiceResponseSender) SendResponse(resp *ConfigureController_Response) error {
	return s.sender.SendResponse(resp)
}

type ConfigureControllerServiceRequestHandler func(*rclgo.ServiceInfo, *ConfigureController_Request, ConfigureControllerServiceResponseSender)

// ConfigureControllerService wraps rclgo.Service to provide type safe helper
// functions
type ConfigureControllerService struct {
	*rclgo.Service
}

// NewConfigureControllerService creates and returns a new service for the
// ConfigureController
func NewConfigureControllerService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ConfigureControllerServiceRequestHandler) (*ConfigureControllerService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ConfigureController_Request)
		responseSender := ConfigureControllerServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ConfigureControllerTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ConfigureControllerService{service}, nil
}