// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	lifecycle_msgs_msg "msgs/lifecycle_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/srv/set_hardware_component_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/SetHardwareComponentState_Response", SetHardwareComponentState_ResponseTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/srv/SetHardwareComponentState_Response", SetHardwareComponentState_ResponseTypeSupport)
}

type SetHardwareComponentState_Response struct {
	Ok bool `yaml:"ok"`
	State lifecycle_msgs_msg.State `yaml:"state"`
}

// NewSetHardwareComponentState_Response creates a new SetHardwareComponentState_Response with default values.
func NewSetHardwareComponentState_Response() *SetHardwareComponentState_Response {
	self := SetHardwareComponentState_Response{}
	self.SetDefaults()
	return &self
}

func (t *SetHardwareComponentState_Response) Clone() *SetHardwareComponentState_Response {
	c := &SetHardwareComponentState_Response{}
	c.Ok = t.Ok
	c.State = *t.State.Clone()
	return c
}

func (t *SetHardwareComponentState_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetHardwareComponentState_Response) SetDefaults() {
	t.Ok = false
	t.State.SetDefaults()
}

func (t *SetHardwareComponentState_Response) GetTypeSupport() types.MessageTypeSupport {
	return SetHardwareComponentState_ResponseTypeSupport
}

// SetHardwareComponentState_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SetHardwareComponentState_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewSetHardwareComponentState_ResponsePublisher creates and returns a new publisher for the
// SetHardwareComponentState_Response
func NewSetHardwareComponentState_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SetHardwareComponentState_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, SetHardwareComponentState_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetHardwareComponentState_ResponsePublisher{pub}, nil
}

func (p *SetHardwareComponentState_ResponsePublisher) Publish(msg *SetHardwareComponentState_Response) error {
	return p.Publisher.Publish(msg)
}

// SetHardwareComponentState_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SetHardwareComponentState_ResponseSubscription struct {
	*rclgo.Subscription
}

// SetHardwareComponentState_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a SetHardwareComponentState_ResponseSubscription.
type SetHardwareComponentState_ResponseSubscriptionCallback func(msg *SetHardwareComponentState_Response, info *rclgo.MessageInfo, err error)

// NewSetHardwareComponentState_ResponseSubscription creates and returns a new subscription for the
// SetHardwareComponentState_Response
func NewSetHardwareComponentState_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SetHardwareComponentState_ResponseSubscriptionCallback) (*SetHardwareComponentState_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SetHardwareComponentState_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SetHardwareComponentState_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetHardwareComponentState_ResponseSubscription{sub}, nil
}

func (s *SetHardwareComponentState_ResponseSubscription) TakeMessage(out *SetHardwareComponentState_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetHardwareComponentState_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetHardwareComponentState_ResponseSlice(dst, src []SetHardwareComponentState_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetHardwareComponentState_ResponseTypeSupport types.MessageTypeSupport = _SetHardwareComponentState_ResponseTypeSupport{}

type _SetHardwareComponentState_ResponseTypeSupport struct{}

func (t _SetHardwareComponentState_ResponseTypeSupport) New() types.Message {
	return NewSetHardwareComponentState_Response()
}

func (t _SetHardwareComponentState_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__srv__SetHardwareComponentState_Response
	return (unsafe.Pointer)(C.controller_manager_msgs__srv__SetHardwareComponentState_Response__create())
}

func (t _SetHardwareComponentState_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__srv__SetHardwareComponentState_Response__destroy((*C.controller_manager_msgs__srv__SetHardwareComponentState_Response)(pointer_to_free))
}

func (t _SetHardwareComponentState_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetHardwareComponentState_Response)
	mem := (*C.controller_manager_msgs__srv__SetHardwareComponentState_Response)(dst)
	mem.ok = C.bool(m.Ok)
	lifecycle_msgs_msg.StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.state), &m.State)
}

func (t _SetHardwareComponentState_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetHardwareComponentState_Response)
	mem := (*C.controller_manager_msgs__srv__SetHardwareComponentState_Response)(ros2_message_buffer)
	m.Ok = bool(mem.ok)
	lifecycle_msgs_msg.StateTypeSupport.AsGoStruct(&m.State, unsafe.Pointer(&mem.state))
}

func (t _SetHardwareComponentState_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__srv__SetHardwareComponentState_Response())
}

type CSetHardwareComponentState_Response = C.controller_manager_msgs__srv__SetHardwareComponentState_Response
type CSetHardwareComponentState_Response__Sequence = C.controller_manager_msgs__srv__SetHardwareComponentState_Response__Sequence

func SetHardwareComponentState_Response__Sequence_to_Go(goSlice *[]SetHardwareComponentState_Response, cSlice CSetHardwareComponentState_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetHardwareComponentState_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetHardwareComponentState_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SetHardwareComponentState_Response__Sequence_to_C(cSlice *CSetHardwareComponentState_Response__Sequence, goSlice []SetHardwareComponentState_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__srv__SetHardwareComponentState_Response)(C.malloc(C.sizeof_struct_controller_manager_msgs__srv__SetHardwareComponentState_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetHardwareComponentState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SetHardwareComponentState_Response__Array_to_Go(goSlice []SetHardwareComponentState_Response, cSlice []CSetHardwareComponentState_Response) {
	for i := 0; i < len(cSlice); i++ {
		SetHardwareComponentState_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetHardwareComponentState_Response__Array_to_C(cSlice []CSetHardwareComponentState_Response, goSlice []SetHardwareComponentState_Response) {
	for i := 0; i < len(goSlice); i++ {
		SetHardwareComponentState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
