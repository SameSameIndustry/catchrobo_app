// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <controller_manager_msgs/srv/list_hardware_components.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("controller_manager_msgs/ListHardwareComponents", ListHardwareComponentsTypeSupport)
	typemap.RegisterService("controller_manager_msgs/srv/ListHardwareComponents", ListHardwareComponentsTypeSupport)
}

type _ListHardwareComponentsTypeSupport struct {}

func (s _ListHardwareComponentsTypeSupport) Request() types.MessageTypeSupport {
	return ListHardwareComponents_RequestTypeSupport
}

func (s _ListHardwareComponentsTypeSupport) Response() types.MessageTypeSupport {
	return ListHardwareComponents_ResponseTypeSupport
}

func (s _ListHardwareComponentsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__controller_manager_msgs__srv__ListHardwareComponents())
}

// Modifying this variable is undefined behavior.
var ListHardwareComponentsTypeSupport types.ServiceTypeSupport = _ListHardwareComponentsTypeSupport{}

// ListHardwareComponentsClient wraps rclgo.Client to provide type safe helper
// functions
type ListHardwareComponentsClient struct {
	*rclgo.Client
}

// NewListHardwareComponentsClient creates and returns a new client for the
// ListHardwareComponents
func NewListHardwareComponentsClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ListHardwareComponentsClient, error) {
	client, err := node.NewClient(serviceName, ListHardwareComponentsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListHardwareComponentsClient{client}, nil
}

func (s *ListHardwareComponentsClient) Send(ctx context.Context, req *ListHardwareComponents_Request) (*ListHardwareComponents_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ListHardwareComponents_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ListHardwareComponentsServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ListHardwareComponentsServiceResponseSender) SendResponse(resp *ListHardwareComponents_Response) error {
	return s.sender.SendResponse(resp)
}

type ListHardwareComponentsServiceRequestHandler func(*rclgo.ServiceInfo, *ListHardwareComponents_Request, ListHardwareComponentsServiceResponseSender)

// ListHardwareComponentsService wraps rclgo.Service to provide type safe helper
// functions
type ListHardwareComponentsService struct {
	*rclgo.Service
}

// NewListHardwareComponentsService creates and returns a new service for the
// ListHardwareComponents
func NewListHardwareComponentsService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ListHardwareComponentsServiceRequestHandler) (*ListHardwareComponentsService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ListHardwareComponents_Request)
		responseSender := ListHardwareComponentsServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ListHardwareComponentsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ListHardwareComponentsService{service}, nil
}