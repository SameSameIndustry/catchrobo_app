// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/steering_controller_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/SteeringControllerStatus", SteeringControllerStatusTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/SteeringControllerStatus", SteeringControllerStatusTypeSupport)
}

type SteeringControllerStatus struct {
	Header std_msgs_msg.Header `yaml:"header"`
	TractionWheelsPosition []float64 `yaml:"traction_wheels_position"`// positions of traction wheels if the robot is controlled by position
	TractionWheelsVelocity []float64 `yaml:"traction_wheels_velocity"`// velocities of traction wheels if the robot is controlled by velocity
	SteerPositions []float64 `yaml:"steer_positions"`// positions of steering joints
	LinearVelocityCommand []float64 `yaml:"linear_velocity_command"`// value commanded to tractions joint
	SteeringAngleCommand []float64 `yaml:"steering_angle_command"`// values commanded to steering joints
}

// NewSteeringControllerStatus creates a new SteeringControllerStatus with default values.
func NewSteeringControllerStatus() *SteeringControllerStatus {
	self := SteeringControllerStatus{}
	self.SetDefaults()
	return &self
}

func (t *SteeringControllerStatus) Clone() *SteeringControllerStatus {
	c := &SteeringControllerStatus{}
	c.Header = *t.Header.Clone()
	if t.TractionWheelsPosition != nil {
		c.TractionWheelsPosition = make([]float64, len(t.TractionWheelsPosition))
		copy(c.TractionWheelsPosition, t.TractionWheelsPosition)
	}
	if t.TractionWheelsVelocity != nil {
		c.TractionWheelsVelocity = make([]float64, len(t.TractionWheelsVelocity))
		copy(c.TractionWheelsVelocity, t.TractionWheelsVelocity)
	}
	if t.SteerPositions != nil {
		c.SteerPositions = make([]float64, len(t.SteerPositions))
		copy(c.SteerPositions, t.SteerPositions)
	}
	if t.LinearVelocityCommand != nil {
		c.LinearVelocityCommand = make([]float64, len(t.LinearVelocityCommand))
		copy(c.LinearVelocityCommand, t.LinearVelocityCommand)
	}
	if t.SteeringAngleCommand != nil {
		c.SteeringAngleCommand = make([]float64, len(t.SteeringAngleCommand))
		copy(c.SteeringAngleCommand, t.SteeringAngleCommand)
	}
	return c
}

func (t *SteeringControllerStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SteeringControllerStatus) SetDefaults() {
	t.Header.SetDefaults()
	t.TractionWheelsPosition = nil
	t.TractionWheelsVelocity = nil
	t.SteerPositions = nil
	t.LinearVelocityCommand = nil
	t.SteeringAngleCommand = nil
}

func (t *SteeringControllerStatus) GetTypeSupport() types.MessageTypeSupport {
	return SteeringControllerStatusTypeSupport
}

// SteeringControllerStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SteeringControllerStatusPublisher struct {
	*rclgo.Publisher
}

// NewSteeringControllerStatusPublisher creates and returns a new publisher for the
// SteeringControllerStatus
func NewSteeringControllerStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SteeringControllerStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SteeringControllerStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SteeringControllerStatusPublisher{pub}, nil
}

func (p *SteeringControllerStatusPublisher) Publish(msg *SteeringControllerStatus) error {
	return p.Publisher.Publish(msg)
}

// SteeringControllerStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SteeringControllerStatusSubscription struct {
	*rclgo.Subscription
}

// SteeringControllerStatusSubscriptionCallback type is used to provide a subscription
// handler function for a SteeringControllerStatusSubscription.
type SteeringControllerStatusSubscriptionCallback func(msg *SteeringControllerStatus, info *rclgo.MessageInfo, err error)

// NewSteeringControllerStatusSubscription creates and returns a new subscription for the
// SteeringControllerStatus
func NewSteeringControllerStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SteeringControllerStatusSubscriptionCallback) (*SteeringControllerStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SteeringControllerStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SteeringControllerStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SteeringControllerStatusSubscription{sub}, nil
}

func (s *SteeringControllerStatusSubscription) TakeMessage(out *SteeringControllerStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSteeringControllerStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSteeringControllerStatusSlice(dst, src []SteeringControllerStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SteeringControllerStatusTypeSupport types.MessageTypeSupport = _SteeringControllerStatusTypeSupport{}

type _SteeringControllerStatusTypeSupport struct{}

func (t _SteeringControllerStatusTypeSupport) New() types.Message {
	return NewSteeringControllerStatus()
}

func (t _SteeringControllerStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__SteeringControllerStatus
	return (unsafe.Pointer)(C.control_msgs__msg__SteeringControllerStatus__create())
}

func (t _SteeringControllerStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__SteeringControllerStatus__destroy((*C.control_msgs__msg__SteeringControllerStatus)(pointer_to_free))
}

func (t _SteeringControllerStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SteeringControllerStatus)
	mem := (*C.control_msgs__msg__SteeringControllerStatus)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.traction_wheels_position)), m.TractionWheelsPosition)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.traction_wheels_velocity)), m.TractionWheelsVelocity)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.steer_positions)), m.SteerPositions)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.linear_velocity_command)), m.LinearVelocityCommand)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.steering_angle_command)), m.SteeringAngleCommand)
}

func (t _SteeringControllerStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SteeringControllerStatus)
	mem := (*C.control_msgs__msg__SteeringControllerStatus)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.Float64__Sequence_to_Go(&m.TractionWheelsPosition, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.traction_wheels_position)))
	primitives.Float64__Sequence_to_Go(&m.TractionWheelsVelocity, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.traction_wheels_velocity)))
	primitives.Float64__Sequence_to_Go(&m.SteerPositions, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.steer_positions)))
	primitives.Float64__Sequence_to_Go(&m.LinearVelocityCommand, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.linear_velocity_command)))
	primitives.Float64__Sequence_to_Go(&m.SteeringAngleCommand, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.steering_angle_command)))
}

func (t _SteeringControllerStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__SteeringControllerStatus())
}

type CSteeringControllerStatus = C.control_msgs__msg__SteeringControllerStatus
type CSteeringControllerStatus__Sequence = C.control_msgs__msg__SteeringControllerStatus__Sequence

func SteeringControllerStatus__Sequence_to_Go(goSlice *[]SteeringControllerStatus, cSlice CSteeringControllerStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SteeringControllerStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SteeringControllerStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SteeringControllerStatus__Sequence_to_C(cSlice *CSteeringControllerStatus__Sequence, goSlice []SteeringControllerStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__SteeringControllerStatus)(C.malloc(C.sizeof_struct_control_msgs__msg__SteeringControllerStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SteeringControllerStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SteeringControllerStatus__Array_to_Go(goSlice []SteeringControllerStatus, cSlice []CSteeringControllerStatus) {
	for i := 0; i < len(cSlice); i++ {
		SteeringControllerStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SteeringControllerStatus__Array_to_C(cSlice []CSteeringControllerStatus, goSlice []SteeringControllerStatus) {
	for i := 0; i < len(goSlice); i++ {
		SteeringControllerStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
