// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/msg/chain_connection.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/ChainConnection", ChainConnectionTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/msg/ChainConnection", ChainConnectionTypeSupport)
}

type ChainConnection struct {
	Name string `yaml:"name"`// name of controller exporting reference_interfaces
	ReferenceInterfaces []string `yaml:"reference_interfaces"`// list of reference exported by controller
}

// NewChainConnection creates a new ChainConnection with default values.
func NewChainConnection() *ChainConnection {
	self := ChainConnection{}
	self.SetDefaults()
	return &self
}

func (t *ChainConnection) Clone() *ChainConnection {
	c := &ChainConnection{}
	c.Name = t.Name
	if t.ReferenceInterfaces != nil {
		c.ReferenceInterfaces = make([]string, len(t.ReferenceInterfaces))
		copy(c.ReferenceInterfaces, t.ReferenceInterfaces)
	}
	return c
}

func (t *ChainConnection) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ChainConnection) SetDefaults() {
	t.Name = ""
	t.ReferenceInterfaces = nil
}

func (t *ChainConnection) GetTypeSupport() types.MessageTypeSupport {
	return ChainConnectionTypeSupport
}

// ChainConnectionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ChainConnectionPublisher struct {
	*rclgo.Publisher
}

// NewChainConnectionPublisher creates and returns a new publisher for the
// ChainConnection
func NewChainConnectionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ChainConnectionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ChainConnectionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ChainConnectionPublisher{pub}, nil
}

func (p *ChainConnectionPublisher) Publish(msg *ChainConnection) error {
	return p.Publisher.Publish(msg)
}

// ChainConnectionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ChainConnectionSubscription struct {
	*rclgo.Subscription
}

// ChainConnectionSubscriptionCallback type is used to provide a subscription
// handler function for a ChainConnectionSubscription.
type ChainConnectionSubscriptionCallback func(msg *ChainConnection, info *rclgo.MessageInfo, err error)

// NewChainConnectionSubscription creates and returns a new subscription for the
// ChainConnection
func NewChainConnectionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ChainConnectionSubscriptionCallback) (*ChainConnectionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ChainConnection
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ChainConnectionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ChainConnectionSubscription{sub}, nil
}

func (s *ChainConnectionSubscription) TakeMessage(out *ChainConnection) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneChainConnectionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneChainConnectionSlice(dst, src []ChainConnection) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ChainConnectionTypeSupport types.MessageTypeSupport = _ChainConnectionTypeSupport{}

type _ChainConnectionTypeSupport struct{}

func (t _ChainConnectionTypeSupport) New() types.Message {
	return NewChainConnection()
}

func (t _ChainConnectionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__msg__ChainConnection
	return (unsafe.Pointer)(C.controller_manager_msgs__msg__ChainConnection__create())
}

func (t _ChainConnectionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__msg__ChainConnection__destroy((*C.controller_manager_msgs__msg__ChainConnection)(pointer_to_free))
}

func (t _ChainConnectionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ChainConnection)
	mem := (*C.controller_manager_msgs__msg__ChainConnection)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.reference_interfaces)), m.ReferenceInterfaces)
}

func (t _ChainConnectionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ChainConnection)
	mem := (*C.controller_manager_msgs__msg__ChainConnection)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	primitives.String__Sequence_to_Go(&m.ReferenceInterfaces, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.reference_interfaces)))
}

func (t _ChainConnectionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__msg__ChainConnection())
}

type CChainConnection = C.controller_manager_msgs__msg__ChainConnection
type CChainConnection__Sequence = C.controller_manager_msgs__msg__ChainConnection__Sequence

func ChainConnection__Sequence_to_Go(goSlice *[]ChainConnection, cSlice CChainConnection__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ChainConnection, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ChainConnectionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ChainConnection__Sequence_to_C(cSlice *CChainConnection__Sequence, goSlice []ChainConnection) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__msg__ChainConnection)(C.malloc(C.sizeof_struct_controller_manager_msgs__msg__ChainConnection * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ChainConnectionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ChainConnection__Array_to_Go(goSlice []ChainConnection, cSlice []CChainConnection) {
	for i := 0; i < len(cSlice); i++ {
		ChainConnectionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ChainConnection__Array_to_C(cSlice []CChainConnection, goSlice []ChainConnection) {
	for i := 0; i < len(goSlice); i++ {
		ChainConnectionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
