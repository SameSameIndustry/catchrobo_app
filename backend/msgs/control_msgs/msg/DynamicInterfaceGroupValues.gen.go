// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/dynamic_interface_group_values.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/DynamicInterfaceGroupValues", DynamicInterfaceGroupValuesTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/DynamicInterfaceGroupValues", DynamicInterfaceGroupValuesTypeSupport)
}

type DynamicInterfaceGroupValues struct {
	Header std_msgs_msg.Header `yaml:"header"`
	InterfaceGroups []string `yaml:"interface_groups"`// List of interface group names , e.g. ["flange_analog_IOs", "flange_vacuum"]
	InterfaceValues []InterfaceValue `yaml:"interface_values"`// Key-value pairs representing interfaces and their corresponding values for each interface group listed in `interface_groups`
}

// NewDynamicInterfaceGroupValues creates a new DynamicInterfaceGroupValues with default values.
func NewDynamicInterfaceGroupValues() *DynamicInterfaceGroupValues {
	self := DynamicInterfaceGroupValues{}
	self.SetDefaults()
	return &self
}

func (t *DynamicInterfaceGroupValues) Clone() *DynamicInterfaceGroupValues {
	c := &DynamicInterfaceGroupValues{}
	c.Header = *t.Header.Clone()
	if t.InterfaceGroups != nil {
		c.InterfaceGroups = make([]string, len(t.InterfaceGroups))
		copy(c.InterfaceGroups, t.InterfaceGroups)
	}
	if t.InterfaceValues != nil {
		c.InterfaceValues = make([]InterfaceValue, len(t.InterfaceValues))
		CloneInterfaceValueSlice(c.InterfaceValues, t.InterfaceValues)
	}
	return c
}

func (t *DynamicInterfaceGroupValues) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DynamicInterfaceGroupValues) SetDefaults() {
	t.Header.SetDefaults()
	t.InterfaceGroups = nil
	t.InterfaceValues = nil
}

func (t *DynamicInterfaceGroupValues) GetTypeSupport() types.MessageTypeSupport {
	return DynamicInterfaceGroupValuesTypeSupport
}

// DynamicInterfaceGroupValuesPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DynamicInterfaceGroupValuesPublisher struct {
	*rclgo.Publisher
}

// NewDynamicInterfaceGroupValuesPublisher creates and returns a new publisher for the
// DynamicInterfaceGroupValues
func NewDynamicInterfaceGroupValuesPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DynamicInterfaceGroupValuesPublisher, error) {
	pub, err := node.NewPublisher(topic_name, DynamicInterfaceGroupValuesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DynamicInterfaceGroupValuesPublisher{pub}, nil
}

func (p *DynamicInterfaceGroupValuesPublisher) Publish(msg *DynamicInterfaceGroupValues) error {
	return p.Publisher.Publish(msg)
}

// DynamicInterfaceGroupValuesSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DynamicInterfaceGroupValuesSubscription struct {
	*rclgo.Subscription
}

// DynamicInterfaceGroupValuesSubscriptionCallback type is used to provide a subscription
// handler function for a DynamicInterfaceGroupValuesSubscription.
type DynamicInterfaceGroupValuesSubscriptionCallback func(msg *DynamicInterfaceGroupValues, info *rclgo.MessageInfo, err error)

// NewDynamicInterfaceGroupValuesSubscription creates and returns a new subscription for the
// DynamicInterfaceGroupValues
func NewDynamicInterfaceGroupValuesSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DynamicInterfaceGroupValuesSubscriptionCallback) (*DynamicInterfaceGroupValuesSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DynamicInterfaceGroupValues
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DynamicInterfaceGroupValuesTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DynamicInterfaceGroupValuesSubscription{sub}, nil
}

func (s *DynamicInterfaceGroupValuesSubscription) TakeMessage(out *DynamicInterfaceGroupValues) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDynamicInterfaceGroupValuesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDynamicInterfaceGroupValuesSlice(dst, src []DynamicInterfaceGroupValues) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DynamicInterfaceGroupValuesTypeSupport types.MessageTypeSupport = _DynamicInterfaceGroupValuesTypeSupport{}

type _DynamicInterfaceGroupValuesTypeSupport struct{}

func (t _DynamicInterfaceGroupValuesTypeSupport) New() types.Message {
	return NewDynamicInterfaceGroupValues()
}

func (t _DynamicInterfaceGroupValuesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__DynamicInterfaceGroupValues
	return (unsafe.Pointer)(C.control_msgs__msg__DynamicInterfaceGroupValues__create())
}

func (t _DynamicInterfaceGroupValuesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__DynamicInterfaceGroupValues__destroy((*C.control_msgs__msg__DynamicInterfaceGroupValues)(pointer_to_free))
}

func (t _DynamicInterfaceGroupValuesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DynamicInterfaceGroupValues)
	mem := (*C.control_msgs__msg__DynamicInterfaceGroupValues)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.interface_groups)), m.InterfaceGroups)
	InterfaceValue__Sequence_to_C(&mem.interface_values, m.InterfaceValues)
}

func (t _DynamicInterfaceGroupValuesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DynamicInterfaceGroupValues)
	mem := (*C.control_msgs__msg__DynamicInterfaceGroupValues)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.InterfaceGroups, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.interface_groups)))
	InterfaceValue__Sequence_to_Go(&m.InterfaceValues, mem.interface_values)
}

func (t _DynamicInterfaceGroupValuesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__DynamicInterfaceGroupValues())
}

type CDynamicInterfaceGroupValues = C.control_msgs__msg__DynamicInterfaceGroupValues
type CDynamicInterfaceGroupValues__Sequence = C.control_msgs__msg__DynamicInterfaceGroupValues__Sequence

func DynamicInterfaceGroupValues__Sequence_to_Go(goSlice *[]DynamicInterfaceGroupValues, cSlice CDynamicInterfaceGroupValues__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DynamicInterfaceGroupValues, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DynamicInterfaceGroupValuesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DynamicInterfaceGroupValues__Sequence_to_C(cSlice *CDynamicInterfaceGroupValues__Sequence, goSlice []DynamicInterfaceGroupValues) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__DynamicInterfaceGroupValues)(C.malloc(C.sizeof_struct_control_msgs__msg__DynamicInterfaceGroupValues * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DynamicInterfaceGroupValuesTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DynamicInterfaceGroupValues__Array_to_Go(goSlice []DynamicInterfaceGroupValues, cSlice []CDynamicInterfaceGroupValues) {
	for i := 0; i < len(cSlice); i++ {
		DynamicInterfaceGroupValuesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DynamicInterfaceGroupValues__Array_to_C(cSlice []CDynamicInterfaceGroupValues, goSlice []DynamicInterfaceGroupValues) {
	for i := 0; i < len(goSlice); i++ {
		DynamicInterfaceGroupValuesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
