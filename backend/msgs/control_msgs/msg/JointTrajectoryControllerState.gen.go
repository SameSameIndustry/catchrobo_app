// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "msgs/std_msgs/msg"
	trajectory_msgs_msg "msgs/trajectory_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/joint_trajectory_controller_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/JointTrajectoryControllerState", JointTrajectoryControllerStateTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/JointTrajectoryControllerState", JointTrajectoryControllerStateTypeSupport)
}

type JointTrajectoryControllerState struct {
	Header std_msgs_msg.Header `yaml:"header"`// Header timestamp should be update time of controller state
	JointNames []string `yaml:"joint_names"`
	Reference trajectory_msgs_msg.JointTrajectoryPoint `yaml:"reference"`// The set point, that is, desired state.
	Feedback trajectory_msgs_msg.JointTrajectoryPoint `yaml:"feedback"`// Current value of the process (ie: latest sensor measurement on the controlled value).
	Error trajectory_msgs_msg.JointTrajectoryPoint `yaml:"error"`// The error of the controlled value, essentially reference - feedback (for a regular PID implementation).
	Output trajectory_msgs_msg.JointTrajectoryPoint `yaml:"output"`// Current output of the controller.
	Desired trajectory_msgs_msg.JointTrajectoryPoint `yaml:"desired"`// -- deprecated --
	Actual trajectory_msgs_msg.JointTrajectoryPoint `yaml:"actual"`
	MultiDofJointNames []string `yaml:"multi_dof_joint_names"`
	MultiDofReference trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_reference"`// The set point, that is, desired state.
	MultiDofFeedback trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_feedback"`// Current value of the process (ie: latest sensor measurement on the controlled value).
	MultiDofError trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_error"`// The error of the controlled value, essentially reference - feedback (for a regular PID implementation).
	MultiDofOutput trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_output"`// Current output of the controller.
	MultiDofDesired trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_desired"`// -- deprecated --
	MultiDofActual trajectory_msgs_msg.MultiDOFJointTrajectoryPoint `yaml:"multi_dof_actual"`
}

// NewJointTrajectoryControllerState creates a new JointTrajectoryControllerState with default values.
func NewJointTrajectoryControllerState() *JointTrajectoryControllerState {
	self := JointTrajectoryControllerState{}
	self.SetDefaults()
	return &self
}

func (t *JointTrajectoryControllerState) Clone() *JointTrajectoryControllerState {
	c := &JointTrajectoryControllerState{}
	c.Header = *t.Header.Clone()
	if t.JointNames != nil {
		c.JointNames = make([]string, len(t.JointNames))
		copy(c.JointNames, t.JointNames)
	}
	c.Reference = *t.Reference.Clone()
	c.Feedback = *t.Feedback.Clone()
	c.Error = *t.Error.Clone()
	c.Output = *t.Output.Clone()
	c.Desired = *t.Desired.Clone()
	c.Actual = *t.Actual.Clone()
	if t.MultiDofJointNames != nil {
		c.MultiDofJointNames = make([]string, len(t.MultiDofJointNames))
		copy(c.MultiDofJointNames, t.MultiDofJointNames)
	}
	c.MultiDofReference = *t.MultiDofReference.Clone()
	c.MultiDofFeedback = *t.MultiDofFeedback.Clone()
	c.MultiDofError = *t.MultiDofError.Clone()
	c.MultiDofOutput = *t.MultiDofOutput.Clone()
	c.MultiDofDesired = *t.MultiDofDesired.Clone()
	c.MultiDofActual = *t.MultiDofActual.Clone()
	return c
}

func (t *JointTrajectoryControllerState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointTrajectoryControllerState) SetDefaults() {
	t.Header.SetDefaults()
	t.JointNames = nil
	t.Reference.SetDefaults()
	t.Feedback.SetDefaults()
	t.Error.SetDefaults()
	t.Output.SetDefaults()
	t.Desired.SetDefaults()
	t.Actual.SetDefaults()
	t.MultiDofJointNames = nil
	t.MultiDofReference.SetDefaults()
	t.MultiDofFeedback.SetDefaults()
	t.MultiDofError.SetDefaults()
	t.MultiDofOutput.SetDefaults()
	t.MultiDofDesired.SetDefaults()
	t.MultiDofActual.SetDefaults()
}

func (t *JointTrajectoryControllerState) GetTypeSupport() types.MessageTypeSupport {
	return JointTrajectoryControllerStateTypeSupport
}

// JointTrajectoryControllerStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointTrajectoryControllerStatePublisher struct {
	*rclgo.Publisher
}

// NewJointTrajectoryControllerStatePublisher creates and returns a new publisher for the
// JointTrajectoryControllerState
func NewJointTrajectoryControllerStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointTrajectoryControllerStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointTrajectoryControllerStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointTrajectoryControllerStatePublisher{pub}, nil
}

func (p *JointTrajectoryControllerStatePublisher) Publish(msg *JointTrajectoryControllerState) error {
	return p.Publisher.Publish(msg)
}

// JointTrajectoryControllerStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointTrajectoryControllerStateSubscription struct {
	*rclgo.Subscription
}

// JointTrajectoryControllerStateSubscriptionCallback type is used to provide a subscription
// handler function for a JointTrajectoryControllerStateSubscription.
type JointTrajectoryControllerStateSubscriptionCallback func(msg *JointTrajectoryControllerState, info *rclgo.MessageInfo, err error)

// NewJointTrajectoryControllerStateSubscription creates and returns a new subscription for the
// JointTrajectoryControllerState
func NewJointTrajectoryControllerStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointTrajectoryControllerStateSubscriptionCallback) (*JointTrajectoryControllerStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointTrajectoryControllerState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointTrajectoryControllerStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointTrajectoryControllerStateSubscription{sub}, nil
}

func (s *JointTrajectoryControllerStateSubscription) TakeMessage(out *JointTrajectoryControllerState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointTrajectoryControllerStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointTrajectoryControllerStateSlice(dst, src []JointTrajectoryControllerState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointTrajectoryControllerStateTypeSupport types.MessageTypeSupport = _JointTrajectoryControllerStateTypeSupport{}

type _JointTrajectoryControllerStateTypeSupport struct{}

func (t _JointTrajectoryControllerStateTypeSupport) New() types.Message {
	return NewJointTrajectoryControllerState()
}

func (t _JointTrajectoryControllerStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__JointTrajectoryControllerState
	return (unsafe.Pointer)(C.control_msgs__msg__JointTrajectoryControllerState__create())
}

func (t _JointTrajectoryControllerStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__JointTrajectoryControllerState__destroy((*C.control_msgs__msg__JointTrajectoryControllerState)(pointer_to_free))
}

func (t _JointTrajectoryControllerStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointTrajectoryControllerState)
	mem := (*C.control_msgs__msg__JointTrajectoryControllerState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)), m.JointNames)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.reference), &m.Reference)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.feedback), &m.Feedback)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.error), &m.Error)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.output), &m.Output)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.desired), &m.Desired)
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.actual), &m.Actual)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.multi_dof_joint_names)), m.MultiDofJointNames)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_reference), &m.MultiDofReference)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_feedback), &m.MultiDofFeedback)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_error), &m.MultiDofError)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_output), &m.MultiDofOutput)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_desired), &m.MultiDofDesired)
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.multi_dof_actual), &m.MultiDofActual)
}

func (t _JointTrajectoryControllerStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointTrajectoryControllerState)
	mem := (*C.control_msgs__msg__JointTrajectoryControllerState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.JointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Reference, unsafe.Pointer(&mem.reference))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Feedback, unsafe.Pointer(&mem.feedback))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Error, unsafe.Pointer(&mem.error))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Output, unsafe.Pointer(&mem.output))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Desired, unsafe.Pointer(&mem.desired))
	trajectory_msgs_msg.JointTrajectoryPointTypeSupport.AsGoStruct(&m.Actual, unsafe.Pointer(&mem.actual))
	primitives.String__Sequence_to_Go(&m.MultiDofJointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.multi_dof_joint_names)))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofReference, unsafe.Pointer(&mem.multi_dof_reference))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofFeedback, unsafe.Pointer(&mem.multi_dof_feedback))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofError, unsafe.Pointer(&mem.multi_dof_error))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofOutput, unsafe.Pointer(&mem.multi_dof_output))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofDesired, unsafe.Pointer(&mem.multi_dof_desired))
	trajectory_msgs_msg.MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&m.MultiDofActual, unsafe.Pointer(&mem.multi_dof_actual))
}

func (t _JointTrajectoryControllerStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__JointTrajectoryControllerState())
}

type CJointTrajectoryControllerState = C.control_msgs__msg__JointTrajectoryControllerState
type CJointTrajectoryControllerState__Sequence = C.control_msgs__msg__JointTrajectoryControllerState__Sequence

func JointTrajectoryControllerState__Sequence_to_Go(goSlice *[]JointTrajectoryControllerState, cSlice CJointTrajectoryControllerState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointTrajectoryControllerState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointTrajectoryControllerStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointTrajectoryControllerState__Sequence_to_C(cSlice *CJointTrajectoryControllerState__Sequence, goSlice []JointTrajectoryControllerState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__JointTrajectoryControllerState)(C.malloc(C.sizeof_struct_control_msgs__msg__JointTrajectoryControllerState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointTrajectoryControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointTrajectoryControllerState__Array_to_Go(goSlice []JointTrajectoryControllerState, cSlice []CJointTrajectoryControllerState) {
	for i := 0; i < len(cSlice); i++ {
		JointTrajectoryControllerStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointTrajectoryControllerState__Array_to_C(cSlice []CJointTrajectoryControllerState, goSlice []JointTrajectoryControllerState) {
	for i := 0; i < len(goSlice); i++ {
		JointTrajectoryControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
