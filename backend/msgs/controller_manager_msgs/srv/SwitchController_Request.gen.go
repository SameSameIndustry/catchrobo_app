// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	builtin_interfaces_msg "msgs/builtin_interfaces/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/srv/switch_controller.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/SwitchController_Request", SwitchController_RequestTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/srv/SwitchController_Request", SwitchController_RequestTypeSupport)
}
const (
	SwitchController_Request_BEST_EFFORT int32 = 1
	SwitchController_Request_STRICT int32 = 2
)

type SwitchController_Request struct {
	ActivateControllers []string `yaml:"activate_controllers"`
	DeactivateControllers []string `yaml:"deactivate_controllers"`
	StartControllers []string `yaml:"start_controllers"`// DEPRECATED: Use activate_controllers filed instead
	StopControllers []string `yaml:"stop_controllers"`// DEPRECATED: Use deactivate_controllers filed instead
	Strictness int32 `yaml:"strictness"`
	StartAsap bool `yaml:"start_asap"`// DEPRECATED: Use activate_asap filed instead
	ActivateAsap bool `yaml:"activate_asap"`
	Timeout builtin_interfaces_msg.Duration `yaml:"timeout"`
}

// NewSwitchController_Request creates a new SwitchController_Request with default values.
func NewSwitchController_Request() *SwitchController_Request {
	self := SwitchController_Request{}
	self.SetDefaults()
	return &self
}

func (t *SwitchController_Request) Clone() *SwitchController_Request {
	c := &SwitchController_Request{}
	if t.ActivateControllers != nil {
		c.ActivateControllers = make([]string, len(t.ActivateControllers))
		copy(c.ActivateControllers, t.ActivateControllers)
	}
	if t.DeactivateControllers != nil {
		c.DeactivateControllers = make([]string, len(t.DeactivateControllers))
		copy(c.DeactivateControllers, t.DeactivateControllers)
	}
	if t.StartControllers != nil {
		c.StartControllers = make([]string, len(t.StartControllers))
		copy(c.StartControllers, t.StartControllers)
	}
	if t.StopControllers != nil {
		c.StopControllers = make([]string, len(t.StopControllers))
		copy(c.StopControllers, t.StopControllers)
	}
	c.Strictness = t.Strictness
	c.StartAsap = t.StartAsap
	c.ActivateAsap = t.ActivateAsap
	c.Timeout = *t.Timeout.Clone()
	return c
}

func (t *SwitchController_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SwitchController_Request) SetDefaults() {
	t.ActivateControllers = nil
	t.DeactivateControllers = nil
	t.StartControllers = nil
	t.StopControllers = nil
	t.Strictness = 0
	t.StartAsap = false
	t.ActivateAsap = false
	t.Timeout.SetDefaults()
}

func (t *SwitchController_Request) GetTypeSupport() types.MessageTypeSupport {
	return SwitchController_RequestTypeSupport
}

// SwitchController_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SwitchController_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSwitchController_RequestPublisher creates and returns a new publisher for the
// SwitchController_Request
func NewSwitchController_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SwitchController_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SwitchController_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SwitchController_RequestPublisher{pub}, nil
}

func (p *SwitchController_RequestPublisher) Publish(msg *SwitchController_Request) error {
	return p.Publisher.Publish(msg)
}

// SwitchController_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SwitchController_RequestSubscription struct {
	*rclgo.Subscription
}

// SwitchController_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SwitchController_RequestSubscription.
type SwitchController_RequestSubscriptionCallback func(msg *SwitchController_Request, info *rclgo.MessageInfo, err error)

// NewSwitchController_RequestSubscription creates and returns a new subscription for the
// SwitchController_Request
func NewSwitchController_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SwitchController_RequestSubscriptionCallback) (*SwitchController_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SwitchController_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SwitchController_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SwitchController_RequestSubscription{sub}, nil
}

func (s *SwitchController_RequestSubscription) TakeMessage(out *SwitchController_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSwitchController_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSwitchController_RequestSlice(dst, src []SwitchController_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SwitchController_RequestTypeSupport types.MessageTypeSupport = _SwitchController_RequestTypeSupport{}

type _SwitchController_RequestTypeSupport struct{}

func (t _SwitchController_RequestTypeSupport) New() types.Message {
	return NewSwitchController_Request()
}

func (t _SwitchController_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__srv__SwitchController_Request
	return (unsafe.Pointer)(C.controller_manager_msgs__srv__SwitchController_Request__create())
}

func (t _SwitchController_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__srv__SwitchController_Request__destroy((*C.controller_manager_msgs__srv__SwitchController_Request)(pointer_to_free))
}

func (t _SwitchController_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SwitchController_Request)
	mem := (*C.controller_manager_msgs__srv__SwitchController_Request)(dst)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.activate_controllers)), m.ActivateControllers)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.deactivate_controllers)), m.DeactivateControllers)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.start_controllers)), m.StartControllers)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.stop_controllers)), m.StopControllers)
	mem.strictness = C.int32_t(m.Strictness)
	mem.start_asap = C.bool(m.StartAsap)
	mem.activate_asap = C.bool(m.ActivateAsap)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.timeout), &m.Timeout)
}

func (t _SwitchController_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SwitchController_Request)
	mem := (*C.controller_manager_msgs__srv__SwitchController_Request)(ros2_message_buffer)
	primitives.String__Sequence_to_Go(&m.ActivateControllers, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.activate_controllers)))
	primitives.String__Sequence_to_Go(&m.DeactivateControllers, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.deactivate_controllers)))
	primitives.String__Sequence_to_Go(&m.StartControllers, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.start_controllers)))
	primitives.String__Sequence_to_Go(&m.StopControllers, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.stop_controllers)))
	m.Strictness = int32(mem.strictness)
	m.StartAsap = bool(mem.start_asap)
	m.ActivateAsap = bool(mem.activate_asap)
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.Timeout, unsafe.Pointer(&mem.timeout))
}

func (t _SwitchController_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__srv__SwitchController_Request())
}

type CSwitchController_Request = C.controller_manager_msgs__srv__SwitchController_Request
type CSwitchController_Request__Sequence = C.controller_manager_msgs__srv__SwitchController_Request__Sequence

func SwitchController_Request__Sequence_to_Go(goSlice *[]SwitchController_Request, cSlice CSwitchController_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SwitchController_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SwitchController_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SwitchController_Request__Sequence_to_C(cSlice *CSwitchController_Request__Sequence, goSlice []SwitchController_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__srv__SwitchController_Request)(C.malloc(C.sizeof_struct_controller_manager_msgs__srv__SwitchController_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SwitchController_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SwitchController_Request__Array_to_Go(goSlice []SwitchController_Request, cSlice []CSwitchController_Request) {
	for i := 0; i < len(cSlice); i++ {
		SwitchController_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SwitchController_Request__Array_to_C(cSlice []CSwitchController_Request, goSlice []SwitchController_Request) {
	for i := 0; i < len(goSlice); i++ {
		SwitchController_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
