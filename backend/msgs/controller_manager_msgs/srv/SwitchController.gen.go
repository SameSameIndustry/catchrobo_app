// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <controller_manager_msgs/srv/switch_controller.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("controller_manager_msgs/SwitchController", SwitchControllerTypeSupport)
	typemap.RegisterService("controller_manager_msgs/srv/SwitchController", SwitchControllerTypeSupport)
}

type _SwitchControllerTypeSupport struct {}

func (s _SwitchControllerTypeSupport) Request() types.MessageTypeSupport {
	return SwitchController_RequestTypeSupport
}

func (s _SwitchControllerTypeSupport) Response() types.MessageTypeSupport {
	return SwitchController_ResponseTypeSupport
}

func (s _SwitchControllerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__controller_manager_msgs__srv__SwitchController())
}

// Modifying this variable is undefined behavior.
var SwitchControllerTypeSupport types.ServiceTypeSupport = _SwitchControllerTypeSupport{}

// SwitchControllerClient wraps rclgo.Client to provide type safe helper
// functions
type SwitchControllerClient struct {
	*rclgo.Client
}

// NewSwitchControllerClient creates and returns a new client for the
// SwitchController
func NewSwitchControllerClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SwitchControllerClient, error) {
	client, err := node.NewClient(serviceName, SwitchControllerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SwitchControllerClient{client}, nil
}

func (s *SwitchControllerClient) Send(ctx context.Context, req *SwitchController_Request) (*SwitchController_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SwitchController_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SwitchControllerServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SwitchControllerServiceResponseSender) SendResponse(resp *SwitchController_Response) error {
	return s.sender.SendResponse(resp)
}

type SwitchControllerServiceRequestHandler func(*rclgo.ServiceInfo, *SwitchController_Request, SwitchControllerServiceResponseSender)

// SwitchControllerService wraps rclgo.Service to provide type safe helper
// functions
type SwitchControllerService struct {
	*rclgo.Service
}

// NewSwitchControllerService creates and returns a new service for the
// SwitchController
func NewSwitchControllerService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SwitchControllerServiceRequestHandler) (*SwitchControllerService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SwitchController_Request)
		responseSender := SwitchControllerServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SwitchControllerTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SwitchControllerService{service}, nil
}