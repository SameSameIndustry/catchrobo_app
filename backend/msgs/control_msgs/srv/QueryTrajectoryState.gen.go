// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/srv/query_trajectory_state.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("control_msgs/QueryTrajectoryState", QueryTrajectoryStateTypeSupport)
	typemap.RegisterService("control_msgs/srv/QueryTrajectoryState", QueryTrajectoryStateTypeSupport)
}

type _QueryTrajectoryStateTypeSupport struct {}

func (s _QueryTrajectoryStateTypeSupport) Request() types.MessageTypeSupport {
	return QueryTrajectoryState_RequestTypeSupport
}

func (s _QueryTrajectoryStateTypeSupport) Response() types.MessageTypeSupport {
	return QueryTrajectoryState_ResponseTypeSupport
}

func (s _QueryTrajectoryStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__control_msgs__srv__QueryTrajectoryState())
}

// Modifying this variable is undefined behavior.
var QueryTrajectoryStateTypeSupport types.ServiceTypeSupport = _QueryTrajectoryStateTypeSupport{}

// QueryTrajectoryStateClient wraps rclgo.Client to provide type safe helper
// functions
type QueryTrajectoryStateClient struct {
	*rclgo.Client
}

// NewQueryTrajectoryStateClient creates and returns a new client for the
// QueryTrajectoryState
func NewQueryTrajectoryStateClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*QueryTrajectoryStateClient, error) {
	client, err := node.NewClient(serviceName, QueryTrajectoryStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &QueryTrajectoryStateClient{client}, nil
}

func (s *QueryTrajectoryStateClient) Send(ctx context.Context, req *QueryTrajectoryState_Request) (*QueryTrajectoryState_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*QueryTrajectoryState_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type QueryTrajectoryStateServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s QueryTrajectoryStateServiceResponseSender) SendResponse(resp *QueryTrajectoryState_Response) error {
	return s.sender.SendResponse(resp)
}

type QueryTrajectoryStateServiceRequestHandler func(*rclgo.ServiceInfo, *QueryTrajectoryState_Request, QueryTrajectoryStateServiceResponseSender)

// QueryTrajectoryStateService wraps rclgo.Service to provide type safe helper
// functions
type QueryTrajectoryStateService struct {
	*rclgo.Service
}

// NewQueryTrajectoryStateService creates and returns a new service for the
// QueryTrajectoryState
func NewQueryTrajectoryStateService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler QueryTrajectoryStateServiceRequestHandler) (*QueryTrajectoryStateService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*QueryTrajectoryState_Request)
		responseSender := QueryTrajectoryStateServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, QueryTrajectoryStateTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &QueryTrajectoryStateService{service}, nil
}