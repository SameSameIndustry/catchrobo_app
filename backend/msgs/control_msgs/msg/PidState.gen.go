// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "msgs/builtin_interfaces/msg"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/pid_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/PidState", PidStateTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/PidState", PidStateTypeSupport)
}

type PidState struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Timestep builtin_interfaces_msg.Duration `yaml:"timestep"`
	Error float64 `yaml:"error"`// error = target - state
	ErrorDot float64 `yaml:"error_dot"`// derivative of error
	PError float64 `yaml:"p_error"`// equals error
	IError float64 `yaml:"i_error"`// weighted integral of error
	DError float64 `yaml:"d_error"`// equals derivative of error
	PTerm float64 `yaml:"p_term"`// proportional gain
	ITerm float64 `yaml:"i_term"`// integral gain
	DTerm float64 `yaml:"d_term"`// derivative gain
	IMax float64 `yaml:"i_max"`// upper integral clamp.
	IMin float64 `yaml:"i_min"`// lower integral clamp.
	Output float64 `yaml:"output"`// output of the PID controller
}

// NewPidState creates a new PidState with default values.
func NewPidState() *PidState {
	self := PidState{}
	self.SetDefaults()
	return &self
}

func (t *PidState) Clone() *PidState {
	c := &PidState{}
	c.Header = *t.Header.Clone()
	c.Timestep = *t.Timestep.Clone()
	c.Error = t.Error
	c.ErrorDot = t.ErrorDot
	c.PError = t.PError
	c.IError = t.IError
	c.DError = t.DError
	c.PTerm = t.PTerm
	c.ITerm = t.ITerm
	c.DTerm = t.DTerm
	c.IMax = t.IMax
	c.IMin = t.IMin
	c.Output = t.Output
	return c
}

func (t *PidState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PidState) SetDefaults() {
	t.Header.SetDefaults()
	t.Timestep.SetDefaults()
	t.Error = 0
	t.ErrorDot = 0
	t.PError = 0
	t.IError = 0
	t.DError = 0
	t.PTerm = 0
	t.ITerm = 0
	t.DTerm = 0
	t.IMax = 0
	t.IMin = 0
	t.Output = 0
}

func (t *PidState) GetTypeSupport() types.MessageTypeSupport {
	return PidStateTypeSupport
}

// PidStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PidStatePublisher struct {
	*rclgo.Publisher
}

// NewPidStatePublisher creates and returns a new publisher for the
// PidState
func NewPidStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PidStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, PidStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PidStatePublisher{pub}, nil
}

func (p *PidStatePublisher) Publish(msg *PidState) error {
	return p.Publisher.Publish(msg)
}

// PidStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PidStateSubscription struct {
	*rclgo.Subscription
}

// PidStateSubscriptionCallback type is used to provide a subscription
// handler function for a PidStateSubscription.
type PidStateSubscriptionCallback func(msg *PidState, info *rclgo.MessageInfo, err error)

// NewPidStateSubscription creates and returns a new subscription for the
// PidState
func NewPidStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PidStateSubscriptionCallback) (*PidStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PidState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PidStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PidStateSubscription{sub}, nil
}

func (s *PidStateSubscription) TakeMessage(out *PidState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePidStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePidStateSlice(dst, src []PidState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PidStateTypeSupport types.MessageTypeSupport = _PidStateTypeSupport{}

type _PidStateTypeSupport struct{}

func (t _PidStateTypeSupport) New() types.Message {
	return NewPidState()
}

func (t _PidStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__PidState
	return (unsafe.Pointer)(C.control_msgs__msg__PidState__create())
}

func (t _PidStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__PidState__destroy((*C.control_msgs__msg__PidState)(pointer_to_free))
}

func (t _PidStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PidState)
	mem := (*C.control_msgs__msg__PidState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.timestep), &m.Timestep)
	mem.error = C.double(m.Error)
	mem.error_dot = C.double(m.ErrorDot)
	mem.p_error = C.double(m.PError)
	mem.i_error = C.double(m.IError)
	mem.d_error = C.double(m.DError)
	mem.p_term = C.double(m.PTerm)
	mem.i_term = C.double(m.ITerm)
	mem.d_term = C.double(m.DTerm)
	mem.i_max = C.double(m.IMax)
	mem.i_min = C.double(m.IMin)
	mem.output = C.double(m.Output)
}

func (t _PidStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PidState)
	mem := (*C.control_msgs__msg__PidState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.Timestep, unsafe.Pointer(&mem.timestep))
	m.Error = float64(mem.error)
	m.ErrorDot = float64(mem.error_dot)
	m.PError = float64(mem.p_error)
	m.IError = float64(mem.i_error)
	m.DError = float64(mem.d_error)
	m.PTerm = float64(mem.p_term)
	m.ITerm = float64(mem.i_term)
	m.DTerm = float64(mem.d_term)
	m.IMax = float64(mem.i_max)
	m.IMin = float64(mem.i_min)
	m.Output = float64(mem.output)
}

func (t _PidStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__PidState())
}

type CPidState = C.control_msgs__msg__PidState
type CPidState__Sequence = C.control_msgs__msg__PidState__Sequence

func PidState__Sequence_to_Go(goSlice *[]PidState, cSlice CPidState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PidState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PidStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PidState__Sequence_to_C(cSlice *CPidState__Sequence, goSlice []PidState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__PidState)(C.malloc(C.sizeof_struct_control_msgs__msg__PidState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PidStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PidState__Array_to_Go(goSlice []PidState, cSlice []CPidState) {
	for i := 0; i < len(cSlice); i++ {
		PidStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PidState__Array_to_C(cSlice []CPidState, goSlice []PidState) {
	for i := 0; i < len(goSlice); i++ {
		PidStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
