// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/srv/unload_controller.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/UnloadController_Request", UnloadController_RequestTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/srv/UnloadController_Request", UnloadController_RequestTypeSupport)
}

type UnloadController_Request struct {
	Name string `yaml:"name"`
}

// NewUnloadController_Request creates a new UnloadController_Request with default values.
func NewUnloadController_Request() *UnloadController_Request {
	self := UnloadController_Request{}
	self.SetDefaults()
	return &self
}

func (t *UnloadController_Request) Clone() *UnloadController_Request {
	c := &UnloadController_Request{}
	c.Name = t.Name
	return c
}

func (t *UnloadController_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *UnloadController_Request) SetDefaults() {
	t.Name = ""
}

func (t *UnloadController_Request) GetTypeSupport() types.MessageTypeSupport {
	return UnloadController_RequestTypeSupport
}

// UnloadController_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type UnloadController_RequestPublisher struct {
	*rclgo.Publisher
}

// NewUnloadController_RequestPublisher creates and returns a new publisher for the
// UnloadController_Request
func NewUnloadController_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*UnloadController_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, UnloadController_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UnloadController_RequestPublisher{pub}, nil
}

func (p *UnloadController_RequestPublisher) Publish(msg *UnloadController_Request) error {
	return p.Publisher.Publish(msg)
}

// UnloadController_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type UnloadController_RequestSubscription struct {
	*rclgo.Subscription
}

// UnloadController_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a UnloadController_RequestSubscription.
type UnloadController_RequestSubscriptionCallback func(msg *UnloadController_Request, info *rclgo.MessageInfo, err error)

// NewUnloadController_RequestSubscription creates and returns a new subscription for the
// UnloadController_Request
func NewUnloadController_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback UnloadController_RequestSubscriptionCallback) (*UnloadController_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg UnloadController_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, UnloadController_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UnloadController_RequestSubscription{sub}, nil
}

func (s *UnloadController_RequestSubscription) TakeMessage(out *UnloadController_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUnloadController_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUnloadController_RequestSlice(dst, src []UnloadController_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UnloadController_RequestTypeSupport types.MessageTypeSupport = _UnloadController_RequestTypeSupport{}

type _UnloadController_RequestTypeSupport struct{}

func (t _UnloadController_RequestTypeSupport) New() types.Message {
	return NewUnloadController_Request()
}

func (t _UnloadController_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__srv__UnloadController_Request
	return (unsafe.Pointer)(C.controller_manager_msgs__srv__UnloadController_Request__create())
}

func (t _UnloadController_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__srv__UnloadController_Request__destroy((*C.controller_manager_msgs__srv__UnloadController_Request)(pointer_to_free))
}

func (t _UnloadController_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*UnloadController_Request)
	mem := (*C.controller_manager_msgs__srv__UnloadController_Request)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
}

func (t _UnloadController_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UnloadController_Request)
	mem := (*C.controller_manager_msgs__srv__UnloadController_Request)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
}

func (t _UnloadController_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__srv__UnloadController_Request())
}

type CUnloadController_Request = C.controller_manager_msgs__srv__UnloadController_Request
type CUnloadController_Request__Sequence = C.controller_manager_msgs__srv__UnloadController_Request__Sequence

func UnloadController_Request__Sequence_to_Go(goSlice *[]UnloadController_Request, cSlice CUnloadController_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UnloadController_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UnloadController_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func UnloadController_Request__Sequence_to_C(cSlice *CUnloadController_Request__Sequence, goSlice []UnloadController_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__srv__UnloadController_Request)(C.malloc(C.sizeof_struct_controller_manager_msgs__srv__UnloadController_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UnloadController_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func UnloadController_Request__Array_to_Go(goSlice []UnloadController_Request, cSlice []CUnloadController_Request) {
	for i := 0; i < len(cSlice); i++ {
		UnloadController_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func UnloadController_Request__Array_to_C(cSlice []CUnloadController_Request, goSlice []UnloadController_Request) {
	for i := 0; i < len(goSlice); i++ {
		UnloadController_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
