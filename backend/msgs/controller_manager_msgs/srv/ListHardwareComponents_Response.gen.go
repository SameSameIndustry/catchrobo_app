// Code generated by rclgo-gen. DO NOT EDIT.

package controller_manager_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	controller_manager_msgs_msg "msgs/controller_manager_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <controller_manager_msgs/srv/list_hardware_components.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("controller_manager_msgs/ListHardwareComponents_Response", ListHardwareComponents_ResponseTypeSupport)
	typemap.RegisterMessage("controller_manager_msgs/srv/ListHardwareComponents_Response", ListHardwareComponents_ResponseTypeSupport)
}

type ListHardwareComponents_Response struct {
	Component []controller_manager_msgs_msg.HardwareComponentState `yaml:"component"`
}

// NewListHardwareComponents_Response creates a new ListHardwareComponents_Response with default values.
func NewListHardwareComponents_Response() *ListHardwareComponents_Response {
	self := ListHardwareComponents_Response{}
	self.SetDefaults()
	return &self
}

func (t *ListHardwareComponents_Response) Clone() *ListHardwareComponents_Response {
	c := &ListHardwareComponents_Response{}
	if t.Component != nil {
		c.Component = make([]controller_manager_msgs_msg.HardwareComponentState, len(t.Component))
		controller_manager_msgs_msg.CloneHardwareComponentStateSlice(c.Component, t.Component)
	}
	return c
}

func (t *ListHardwareComponents_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ListHardwareComponents_Response) SetDefaults() {
	t.Component = nil
}

func (t *ListHardwareComponents_Response) GetTypeSupport() types.MessageTypeSupport {
	return ListHardwareComponents_ResponseTypeSupport
}

// ListHardwareComponents_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ListHardwareComponents_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewListHardwareComponents_ResponsePublisher creates and returns a new publisher for the
// ListHardwareComponents_Response
func NewListHardwareComponents_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ListHardwareComponents_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ListHardwareComponents_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListHardwareComponents_ResponsePublisher{pub}, nil
}

func (p *ListHardwareComponents_ResponsePublisher) Publish(msg *ListHardwareComponents_Response) error {
	return p.Publisher.Publish(msg)
}

// ListHardwareComponents_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ListHardwareComponents_ResponseSubscription struct {
	*rclgo.Subscription
}

// ListHardwareComponents_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a ListHardwareComponents_ResponseSubscription.
type ListHardwareComponents_ResponseSubscriptionCallback func(msg *ListHardwareComponents_Response, info *rclgo.MessageInfo, err error)

// NewListHardwareComponents_ResponseSubscription creates and returns a new subscription for the
// ListHardwareComponents_Response
func NewListHardwareComponents_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ListHardwareComponents_ResponseSubscriptionCallback) (*ListHardwareComponents_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ListHardwareComponents_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ListHardwareComponents_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ListHardwareComponents_ResponseSubscription{sub}, nil
}

func (s *ListHardwareComponents_ResponseSubscription) TakeMessage(out *ListHardwareComponents_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneListHardwareComponents_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneListHardwareComponents_ResponseSlice(dst, src []ListHardwareComponents_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ListHardwareComponents_ResponseTypeSupport types.MessageTypeSupport = _ListHardwareComponents_ResponseTypeSupport{}

type _ListHardwareComponents_ResponseTypeSupport struct{}

func (t _ListHardwareComponents_ResponseTypeSupport) New() types.Message {
	return NewListHardwareComponents_Response()
}

func (t _ListHardwareComponents_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.controller_manager_msgs__srv__ListHardwareComponents_Response
	return (unsafe.Pointer)(C.controller_manager_msgs__srv__ListHardwareComponents_Response__create())
}

func (t _ListHardwareComponents_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.controller_manager_msgs__srv__ListHardwareComponents_Response__destroy((*C.controller_manager_msgs__srv__ListHardwareComponents_Response)(pointer_to_free))
}

func (t _ListHardwareComponents_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ListHardwareComponents_Response)
	mem := (*C.controller_manager_msgs__srv__ListHardwareComponents_Response)(dst)
	controller_manager_msgs_msg.HardwareComponentState__Sequence_to_C((*controller_manager_msgs_msg.CHardwareComponentState__Sequence)(unsafe.Pointer(&mem.component)), m.Component)
}

func (t _ListHardwareComponents_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ListHardwareComponents_Response)
	mem := (*C.controller_manager_msgs__srv__ListHardwareComponents_Response)(ros2_message_buffer)
	controller_manager_msgs_msg.HardwareComponentState__Sequence_to_Go(&m.Component, *(*controller_manager_msgs_msg.CHardwareComponentState__Sequence)(unsafe.Pointer(&mem.component)))
}

func (t _ListHardwareComponents_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__controller_manager_msgs__srv__ListHardwareComponents_Response())
}

type CListHardwareComponents_Response = C.controller_manager_msgs__srv__ListHardwareComponents_Response
type CListHardwareComponents_Response__Sequence = C.controller_manager_msgs__srv__ListHardwareComponents_Response__Sequence

func ListHardwareComponents_Response__Sequence_to_Go(goSlice *[]ListHardwareComponents_Response, cSlice CListHardwareComponents_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListHardwareComponents_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ListHardwareComponents_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ListHardwareComponents_Response__Sequence_to_C(cSlice *CListHardwareComponents_Response__Sequence, goSlice []ListHardwareComponents_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.controller_manager_msgs__srv__ListHardwareComponents_Response)(C.malloc(C.sizeof_struct_controller_manager_msgs__srv__ListHardwareComponents_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ListHardwareComponents_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ListHardwareComponents_Response__Array_to_Go(goSlice []ListHardwareComponents_Response, cSlice []CListHardwareComponents_Response) {
	for i := 0; i < len(cSlice); i++ {
		ListHardwareComponents_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ListHardwareComponents_Response__Array_to_C(cSlice []CListHardwareComponents_Response, goSlice []ListHardwareComponents_Response) {
	for i := 0; i < len(goSlice); i++ {
		ListHardwareComponents_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
