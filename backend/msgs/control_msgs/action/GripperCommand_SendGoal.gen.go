// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/gripper_command.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("control_msgs/GripperCommand_SendGoal", GripperCommand_SendGoalTypeSupport)
	typemap.RegisterService("control_msgs/action/GripperCommand_SendGoal", GripperCommand_SendGoalTypeSupport)
}

type _GripperCommand_SendGoalTypeSupport struct {}

func (s _GripperCommand_SendGoalTypeSupport) Request() types.MessageTypeSupport {
	return GripperCommand_SendGoal_RequestTypeSupport
}

func (s _GripperCommand_SendGoalTypeSupport) Response() types.MessageTypeSupport {
	return GripperCommand_SendGoal_ResponseTypeSupport
}

func (s _GripperCommand_SendGoalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__control_msgs__action__GripperCommand_SendGoal())
}

// Modifying this variable is undefined behavior.
var GripperCommand_SendGoalTypeSupport types.ServiceTypeSupport = _GripperCommand_SendGoalTypeSupport{}

// GripperCommand_SendGoalClient wraps rclgo.Client to provide type safe helper
// functions
type GripperCommand_SendGoalClient struct {
	*rclgo.Client
}

// NewGripperCommand_SendGoalClient creates and returns a new client for the
// GripperCommand_SendGoal
func NewGripperCommand_SendGoalClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GripperCommand_SendGoalClient, error) {
	client, err := node.NewClient(serviceName, GripperCommand_SendGoalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GripperCommand_SendGoalClient{client}, nil
}

func (s *GripperCommand_SendGoalClient) Send(ctx context.Context, req *GripperCommand_SendGoal_Request) (*GripperCommand_SendGoal_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GripperCommand_SendGoal_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GripperCommand_SendGoalServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GripperCommand_SendGoalServiceResponseSender) SendResponse(resp *GripperCommand_SendGoal_Response) error {
	return s.sender.SendResponse(resp)
}

type GripperCommand_SendGoalServiceRequestHandler func(*rclgo.ServiceInfo, *GripperCommand_SendGoal_Request, GripperCommand_SendGoalServiceResponseSender)

// GripperCommand_SendGoalService wraps rclgo.Service to provide type safe helper
// functions
type GripperCommand_SendGoalService struct {
	*rclgo.Service
}

// NewGripperCommand_SendGoalService creates and returns a new service for the
// GripperCommand_SendGoal
func NewGripperCommand_SendGoalService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GripperCommand_SendGoalServiceRequestHandler) (*GripperCommand_SendGoalService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GripperCommand_SendGoal_Request)
		responseSender := GripperCommand_SendGoalServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GripperCommand_SendGoalTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GripperCommand_SendGoalService{service}, nil
}