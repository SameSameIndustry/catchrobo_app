// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "msgs/geometry_msgs/msg"
	sensor_msgs_msg "msgs/sensor_msgs/msg"
	std_msgs_msg "msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <control_msgs/msg/admittance_controller_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("control_msgs/AdmittanceControllerState", AdmittanceControllerStateTypeSupport)
	typemap.RegisterMessage("control_msgs/msg/AdmittanceControllerState", AdmittanceControllerStateTypeSupport)
}

type AdmittanceControllerState struct {
	Mass std_msgs_msg.Float64MultiArray `yaml:"mass"`// 6-vector of mass terms used in the admittance calculation. Admittance parameters
	Damping std_msgs_msg.Float64MultiArray `yaml:"damping"`// 6-vector of damping terms used in the admittance calculation
	Stiffness std_msgs_msg.Float64MultiArray `yaml:"stiffness"`// 6-vector of stiffness terms used in the admittance calculation
	RotBaseControl geometry_msgs_msg.Quaternion `yaml:"rot_base_control"`// quaternion describing the orientation of the control frame. Frame information
	RefTransBaseFt geometry_msgs_msg.TransformStamped `yaml:"ref_trans_base_ft"`// force torque sensor transform at the reference joint configuration
	SelectedAxes std_msgs_msg.Int8MultiArray `yaml:"selected_axes"`// 6-vector of 0/1 describing if admittance is enable in the corresponding control frame axis
	FtSensorFrame std_msgs_msg.String `yaml:"ft_sensor_frame"`// name of the force torque frame
	AdmittancePosition geometry_msgs_msg.TransformStamped `yaml:"admittance_position"`// calculated admittance position in cartesian space. State information
	AdmittanceAcceleration geometry_msgs_msg.TwistStamped `yaml:"admittance_acceleration"`// calculated admittance acceleration in cartesian space
	AdmittanceVelocity geometry_msgs_msg.TwistStamped `yaml:"admittance_velocity"`// calculated admittance velocity in cartesian space
	WrenchBase geometry_msgs_msg.WrenchStamped `yaml:"wrench_base"`// wrench used in the admittance calculation
	JointState sensor_msgs_msg.JointState `yaml:"joint_state"`// calculated admittance offsets in joint space
}

// NewAdmittanceControllerState creates a new AdmittanceControllerState with default values.
func NewAdmittanceControllerState() *AdmittanceControllerState {
	self := AdmittanceControllerState{}
	self.SetDefaults()
	return &self
}

func (t *AdmittanceControllerState) Clone() *AdmittanceControllerState {
	c := &AdmittanceControllerState{}
	c.Mass = *t.Mass.Clone()
	c.Damping = *t.Damping.Clone()
	c.Stiffness = *t.Stiffness.Clone()
	c.RotBaseControl = *t.RotBaseControl.Clone()
	c.RefTransBaseFt = *t.RefTransBaseFt.Clone()
	c.SelectedAxes = *t.SelectedAxes.Clone()
	c.FtSensorFrame = *t.FtSensorFrame.Clone()
	c.AdmittancePosition = *t.AdmittancePosition.Clone()
	c.AdmittanceAcceleration = *t.AdmittanceAcceleration.Clone()
	c.AdmittanceVelocity = *t.AdmittanceVelocity.Clone()
	c.WrenchBase = *t.WrenchBase.Clone()
	c.JointState = *t.JointState.Clone()
	return c
}

func (t *AdmittanceControllerState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *AdmittanceControllerState) SetDefaults() {
	t.Mass.SetDefaults()
	t.Damping.SetDefaults()
	t.Stiffness.SetDefaults()
	t.RotBaseControl.SetDefaults()
	t.RefTransBaseFt.SetDefaults()
	t.SelectedAxes.SetDefaults()
	t.FtSensorFrame.SetDefaults()
	t.AdmittancePosition.SetDefaults()
	t.AdmittanceAcceleration.SetDefaults()
	t.AdmittanceVelocity.SetDefaults()
	t.WrenchBase.SetDefaults()
	t.JointState.SetDefaults()
}

func (t *AdmittanceControllerState) GetTypeSupport() types.MessageTypeSupport {
	return AdmittanceControllerStateTypeSupport
}

// AdmittanceControllerStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AdmittanceControllerStatePublisher struct {
	*rclgo.Publisher
}

// NewAdmittanceControllerStatePublisher creates and returns a new publisher for the
// AdmittanceControllerState
func NewAdmittanceControllerStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AdmittanceControllerStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, AdmittanceControllerStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AdmittanceControllerStatePublisher{pub}, nil
}

func (p *AdmittanceControllerStatePublisher) Publish(msg *AdmittanceControllerState) error {
	return p.Publisher.Publish(msg)
}

// AdmittanceControllerStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AdmittanceControllerStateSubscription struct {
	*rclgo.Subscription
}

// AdmittanceControllerStateSubscriptionCallback type is used to provide a subscription
// handler function for a AdmittanceControllerStateSubscription.
type AdmittanceControllerStateSubscriptionCallback func(msg *AdmittanceControllerState, info *rclgo.MessageInfo, err error)

// NewAdmittanceControllerStateSubscription creates and returns a new subscription for the
// AdmittanceControllerState
func NewAdmittanceControllerStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AdmittanceControllerStateSubscriptionCallback) (*AdmittanceControllerStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg AdmittanceControllerState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AdmittanceControllerStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AdmittanceControllerStateSubscription{sub}, nil
}

func (s *AdmittanceControllerStateSubscription) TakeMessage(out *AdmittanceControllerState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAdmittanceControllerStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAdmittanceControllerStateSlice(dst, src []AdmittanceControllerState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AdmittanceControllerStateTypeSupport types.MessageTypeSupport = _AdmittanceControllerStateTypeSupport{}

type _AdmittanceControllerStateTypeSupport struct{}

func (t _AdmittanceControllerStateTypeSupport) New() types.Message {
	return NewAdmittanceControllerState()
}

func (t _AdmittanceControllerStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.control_msgs__msg__AdmittanceControllerState
	return (unsafe.Pointer)(C.control_msgs__msg__AdmittanceControllerState__create())
}

func (t _AdmittanceControllerStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.control_msgs__msg__AdmittanceControllerState__destroy((*C.control_msgs__msg__AdmittanceControllerState)(pointer_to_free))
}

func (t _AdmittanceControllerStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*AdmittanceControllerState)
	mem := (*C.control_msgs__msg__AdmittanceControllerState)(dst)
	std_msgs_msg.Float64MultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&mem.mass), &m.Mass)
	std_msgs_msg.Float64MultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&mem.damping), &m.Damping)
	std_msgs_msg.Float64MultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&mem.stiffness), &m.Stiffness)
	geometry_msgs_msg.QuaternionTypeSupport.AsCStruct(unsafe.Pointer(&mem.rot_base_control), &m.RotBaseControl)
	geometry_msgs_msg.TransformStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.ref_trans_base_ft), &m.RefTransBaseFt)
	std_msgs_msg.Int8MultiArrayTypeSupport.AsCStruct(unsafe.Pointer(&mem.selected_axes), &m.SelectedAxes)
	std_msgs_msg.StringTypeSupport.AsCStruct(unsafe.Pointer(&mem.ft_sensor_frame), &m.FtSensorFrame)
	geometry_msgs_msg.TransformStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.admittance_position), &m.AdmittancePosition)
	geometry_msgs_msg.TwistStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.admittance_acceleration), &m.AdmittanceAcceleration)
	geometry_msgs_msg.TwistStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.admittance_velocity), &m.AdmittanceVelocity)
	geometry_msgs_msg.WrenchStampedTypeSupport.AsCStruct(unsafe.Pointer(&mem.wrench_base), &m.WrenchBase)
	sensor_msgs_msg.JointStateTypeSupport.AsCStruct(unsafe.Pointer(&mem.joint_state), &m.JointState)
}

func (t _AdmittanceControllerStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AdmittanceControllerState)
	mem := (*C.control_msgs__msg__AdmittanceControllerState)(ros2_message_buffer)
	std_msgs_msg.Float64MultiArrayTypeSupport.AsGoStruct(&m.Mass, unsafe.Pointer(&mem.mass))
	std_msgs_msg.Float64MultiArrayTypeSupport.AsGoStruct(&m.Damping, unsafe.Pointer(&mem.damping))
	std_msgs_msg.Float64MultiArrayTypeSupport.AsGoStruct(&m.Stiffness, unsafe.Pointer(&mem.stiffness))
	geometry_msgs_msg.QuaternionTypeSupport.AsGoStruct(&m.RotBaseControl, unsafe.Pointer(&mem.rot_base_control))
	geometry_msgs_msg.TransformStampedTypeSupport.AsGoStruct(&m.RefTransBaseFt, unsafe.Pointer(&mem.ref_trans_base_ft))
	std_msgs_msg.Int8MultiArrayTypeSupport.AsGoStruct(&m.SelectedAxes, unsafe.Pointer(&mem.selected_axes))
	std_msgs_msg.StringTypeSupport.AsGoStruct(&m.FtSensorFrame, unsafe.Pointer(&mem.ft_sensor_frame))
	geometry_msgs_msg.TransformStampedTypeSupport.AsGoStruct(&m.AdmittancePosition, unsafe.Pointer(&mem.admittance_position))
	geometry_msgs_msg.TwistStampedTypeSupport.AsGoStruct(&m.AdmittanceAcceleration, unsafe.Pointer(&mem.admittance_acceleration))
	geometry_msgs_msg.TwistStampedTypeSupport.AsGoStruct(&m.AdmittanceVelocity, unsafe.Pointer(&mem.admittance_velocity))
	geometry_msgs_msg.WrenchStampedTypeSupport.AsGoStruct(&m.WrenchBase, unsafe.Pointer(&mem.wrench_base))
	sensor_msgs_msg.JointStateTypeSupport.AsGoStruct(&m.JointState, unsafe.Pointer(&mem.joint_state))
}

func (t _AdmittanceControllerStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__control_msgs__msg__AdmittanceControllerState())
}

type CAdmittanceControllerState = C.control_msgs__msg__AdmittanceControllerState
type CAdmittanceControllerState__Sequence = C.control_msgs__msg__AdmittanceControllerState__Sequence

func AdmittanceControllerState__Sequence_to_Go(goSlice *[]AdmittanceControllerState, cSlice CAdmittanceControllerState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AdmittanceControllerState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AdmittanceControllerStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func AdmittanceControllerState__Sequence_to_C(cSlice *CAdmittanceControllerState__Sequence, goSlice []AdmittanceControllerState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.control_msgs__msg__AdmittanceControllerState)(C.malloc(C.sizeof_struct_control_msgs__msg__AdmittanceControllerState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AdmittanceControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func AdmittanceControllerState__Array_to_Go(goSlice []AdmittanceControllerState, cSlice []CAdmittanceControllerState) {
	for i := 0; i < len(cSlice); i++ {
		AdmittanceControllerStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func AdmittanceControllerState__Array_to_C(cSlice []CAdmittanceControllerState, goSlice []AdmittanceControllerState) {
	for i := 0; i < len(goSlice); i++ {
		AdmittanceControllerStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
