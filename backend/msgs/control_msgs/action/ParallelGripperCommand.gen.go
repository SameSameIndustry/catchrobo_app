// Code generated by rclgo-gen. DO NOT EDIT.

package control_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <control_msgs/action/parallel_gripper_command.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"

	action_msgs_msg "msgs/action_msgs/msg"
	action_msgs_srv "msgs/action_msgs/srv"
)

func init() {
	typemap.RegisterAction("control_msgs/ParallelGripperCommand", ParallelGripperCommandTypeSupport)
	typemap.RegisterAction("control_msgs/action/ParallelGripperCommand", ParallelGripperCommandTypeSupport)
}

type _ParallelGripperCommandTypeSupport struct {}

func (s _ParallelGripperCommandTypeSupport) Goal() types.MessageTypeSupport {
	return ParallelGripperCommand_GoalTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) SendGoal() types.ServiceTypeSupport {
	return ParallelGripperCommand_SendGoalTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) types.Message {
	msg := NewParallelGripperCommand_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _ParallelGripperCommandTypeSupport) Result() types.MessageTypeSupport {
	return ParallelGripperCommand_ResultTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) GetResult() types.ServiceTypeSupport {
	return ParallelGripperCommand_GetResultTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) NewGetResultResponse(status int8, result types.Message) types.Message {
	msg := NewParallelGripperCommand_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewParallelGripperCommand_Result()
	} else {
		msg.Result = *result.(*ParallelGripperCommand_Result)
	}
	return msg
}

func (s _ParallelGripperCommandTypeSupport) CancelGoal() types.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) Feedback() types.MessageTypeSupport {
	return ParallelGripperCommand_FeedbackTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) FeedbackMessage() types.MessageTypeSupport {
	return ParallelGripperCommand_FeedbackMessageTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) NewFeedbackMessage(goalID *types.GoalID, feedback types.Message) types.Message {
	msg := NewParallelGripperCommand_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*ParallelGripperCommand_Feedback)
	return msg
}

func (s _ParallelGripperCommandTypeSupport) GoalStatusArray() types.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _ParallelGripperCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__control_msgs__action__ParallelGripperCommand())
}

// Modifying this variable is undefined behavior.
var ParallelGripperCommandTypeSupport types.ActionTypeSupport = _ParallelGripperCommandTypeSupport{}

type ParallelGripperCommandFeedbackSender struct {
	sender rclgo.FeedbackSender
}

func (s *ParallelGripperCommandFeedbackSender) Send(msg *ParallelGripperCommand_Feedback) error {
	return s.sender.Send(msg)
}

type ParallelGripperCommandGoalHandle struct{
	*rclgo.GoalHandle

	Description *ParallelGripperCommand_Goal
}

func (g *ParallelGripperCommandGoalHandle) Accept() (*ParallelGripperCommandFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &ParallelGripperCommandFeedbackSender{*s}, nil
}

type ParallelGripperCommandAction interface {
	ExecuteGoal(context.Context, *ParallelGripperCommandGoalHandle) (*ParallelGripperCommand_Result, error)
}

func NewParallelGripperCommandAction(
	executeGoal func(context.Context, *ParallelGripperCommandGoalHandle) (*ParallelGripperCommand_Result, error),
) ParallelGripperCommandAction {
	return _ParallelGripperCommandFuncAction(executeGoal)
}

type _ParallelGripperCommandFuncAction func(context.Context, *ParallelGripperCommandGoalHandle) (*ParallelGripperCommand_Result, error)

func (a _ParallelGripperCommandFuncAction) ExecuteGoal(
	ctx context.Context, goal *ParallelGripperCommandGoalHandle,
) (*ParallelGripperCommand_Result, error) {
	return a(ctx, goal)
}

type _ParallelGripperCommandAction struct {
	action ParallelGripperCommandAction
}

func (a _ParallelGripperCommandAction) ExecuteGoal(ctx context.Context, handle *rclgo.GoalHandle) (types.Message, error) {
	return a.action.ExecuteGoal(ctx, &ParallelGripperCommandGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*ParallelGripperCommand_Goal),
	})
}

func (a _ParallelGripperCommandAction) TypeSupport() types.ActionTypeSupport {
	return ParallelGripperCommandTypeSupport
}

type ParallelGripperCommandServer struct{
	*rclgo.ActionServer
}

func NewParallelGripperCommandServer(node *rclgo.Node, name string, action ParallelGripperCommandAction, opts *rclgo.ActionServerOptions) (*ParallelGripperCommandServer, error) {
	server, err := node.NewActionServer(name, _ParallelGripperCommandAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &ParallelGripperCommandServer{server}, nil
}

type ParallelGripperCommandFeedbackHandler func(context.Context, *ParallelGripperCommand_FeedbackMessage)

type ParallelGripperCommandStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type ParallelGripperCommandClient struct{
	*rclgo.ActionClient
}

func NewParallelGripperCommandClient(node *rclgo.Node, name string, opts *rclgo.ActionClientOptions) (*ParallelGripperCommandClient, error) {
	client, err := node.NewActionClient(name, ParallelGripperCommandTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &ParallelGripperCommandClient{client}, nil
}

func (c *ParallelGripperCommandClient) WatchGoal(ctx context.Context, goal *ParallelGripperCommand_Goal, onFeedback ParallelGripperCommandFeedbackHandler) (*ParallelGripperCommand_GetResult_Response, *types.GoalID, error) {
	var resp types.Message
	var goalID *types.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg types.Message) {
			onFeedback(ctx, msg.(*ParallelGripperCommand_FeedbackMessage))
		})
	}
	if r, ok := resp.(*ParallelGripperCommand_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *ParallelGripperCommandClient) SendGoal(ctx context.Context, goal *ParallelGripperCommand_Goal) (*ParallelGripperCommand_SendGoal_Response, *types.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*ParallelGripperCommand_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *ParallelGripperCommandClient) SendGoalRequest(ctx context.Context, request *ParallelGripperCommand_SendGoal_Request) (*ParallelGripperCommand_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*ParallelGripperCommand_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *ParallelGripperCommandClient) GetResult(ctx context.Context, goalID *types.GoalID) (*ParallelGripperCommand_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*ParallelGripperCommand_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *ParallelGripperCommandClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *ParallelGripperCommandClient) WatchFeedback(ctx context.Context, goalID *types.GoalID, handler ParallelGripperCommandFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*ParallelGripperCommand_FeedbackMessage))
	})
}

func (c *ParallelGripperCommandClient) WatchStatus(ctx context.Context, goalID *types.GoalID, handler ParallelGripperCommandStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
